
app.elf:     file format elf32-littleriscv
app.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0100032c

Program Header:
0x70000003 off    0x0000761e vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000020 memsz 0x00000000 flags r--
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00005eb0 memsz 0x00005eb0 flags r-x
    LOAD off    0x00006ed0 vaddr 0x01005ed0 paddr 0x0100660c align 2**12
         filesz 0x0000073c memsz 0x0000073c flags rw-
    LOAD off    0x00000d48 vaddr 0x01006d48 paddr 0x01006d48 align 2**12
         filesz 0x00000000 memsz 0x000003dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000002dc  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005b5c  010002fc  010002fc  000012fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  01005e58  01005e58  00006e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000073c  01005ed0  0100660c  00006ed0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003dc  01006d48  01006d48  00007d48  2**3
                  ALLOC
  6 .hyperram_controller_0_s0 00000000  01007124  01007124  0000760c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  02028000  02028000  0000760c  2**0
                  CONTENTS
  8 .comment      00000012  00000000  00000000  0000760c  2**0
                  CONTENTS, READONLY
  9 .riscv.attributes 00000020  00000000  00000000  0000761e  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000004d8  00000000  00000000  00007640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00005cc2  00000000  00000000  00007b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000023a6  00000000  00000000  0000d7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000029e1  00000000  00000000  0000fb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00000ae8  00000000  00000000  00012564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00000fc2  00000000  00000000  0001304c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 00001462  00000000  00000000  0001400e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  00015470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000003d  00000000  00000000  00015490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010002fc l    d  .text	00000000 .text
01005e58 l    d  .rodata	00000000 .rodata
01005ed0 l    d  .rwdata	00000000 .rwdata
01006d48 l    d  .bss	00000000 .bss
01007124 l    d  .hyperram_controller_0_s0	00000000 .hyperram_controller_0_s0
02028000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.S.obj
010003d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 machine_trap.S.obj
01000020 l       .exceptions	00000000 save_registers
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
010003d8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
01005ed0 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0100085c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010008c4 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01000a88 l     F .text	000000dc alt_open_fd
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 intel_niosv_irq.c
00000000 l    df *ABS*	00000000 mtimer.c
00000000 l    df *ABS*	00000000 libc_a-atexit.o
00000000 l    df *ABS*	00000000 libc_a-exit.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
01001214 l     F .text	0000001c stdio_exit_handler
01001230 l     F .text	00000064 cleanup_stdio
01001294 l     F .text	00000040 __fp_lock
010012d4 l     F .text	00000040 __fp_unlock
01001314 l     F .text	00000168 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-puts.o
00000000 l    df *ABS*	00000000 libc_a-setvbuf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-reent.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-sysclose.o
00000000 l    df *ABS*	00000000 libc_a-sysopen.o
00000000 l    df *ABS*	00000000 libc_a-memset.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
010022f4 l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 libc_a-openr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-fini.o
00000000 l    df *ABS*	00000000 libc_a-memmove-stub.o
00000000 l    df *ABS*	00000000 libc_a-memcpy.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 muldi3.o
00000000 l    df *ABS*	00000000 div.o
00000000 l    df *ABS*	00000000 alt_close.c
010048e0 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01004a40 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01004b40 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
01004c74 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
01004d94 l     F .text	00000040 alt_get_errno
01004dd4 l     F .text	000000e8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
01005024 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
01006608 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
01005220 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 libc_a-sysfstat.o
00000000 l    df *ABS*	00000000 libc_a-stack_protector.o
00000000 l    df *ABS*	00000000 libc_a-signal.o
00000000 l    df *ABS*	00000000 libc_a-signalr.o
00000000 l    df *ABS*	00000000 libc_a-syswrite.o
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
01005d1c l     F .text	00000040 alt_get_errno
01005728 g     F .text	0000000c .hidden __stack_chk_fail_local
01003e90 g     F .text	00000050 _isatty_r
010004bc g     F .text	0000007c alt_main
01005cfc g     F .text	00000020 _getpid
01001748 g     F .text	00000134 _puts_r
01006db4 g     O .bss	00000080 alt_irq
01001dc0 g     F .text	0000005c _lseek_r
0100660c g       *ABS*	00000000 __flash_rwdata_start
01007124 g       *ABS*	00000000 __alt_heap_start
01005c8c g     F .text	00000058 _kill_r
01006dd8 g       *ABS*	00000000 __global_pointer$
01006d98 g     O .bss	00000001 __lock___atexit_recursive_mutex
010057a8 g     F .text	0000009c _signal_r
01001c0c g     F .text	00000078 __sseek
010015c4 g     F .text	00000060 __sinit
01005ed0 g       *ABS*	00000000 __tls_base
01002f30 g     F .text	00000008 __malloc_unlock
01006d80 g     O .bss	00000001 __lock___arc4random_mutex
01003fe8 g     F .text	0000010c memmove
010000c0 g     F .exceptions	00000028 is_ecc_handler_present
01006db0 g     O .bss	00000004 __stack_chk_guard
010065fc g     O .rwdata	00000004 __atexit_recursive_mutex
01001edc g     F .text	00000004 __retarget_lock_close
01000000 g     F .entry	00000004 __reset
01006d78 g     O .bss	00000004 __stdio_exit_handler
01000020 g       *ABS*	00000000 __flash_exceptions_start
01003e38 g     F .text	00000058 _fstat_r
01006d7c g     O .bss	00000004 errno
01001b7c g     F .text	00000008 __seofread
01006d54 g     O .bss	00000004 alt_argv
01005f24 g     O .rwdata	00000180 alt_fd_list
01005364 g     F .text	00000120 alt_find_dev
010040f4 g     F .text	000001a4 memcpy
01001888 g     F .text	00000298 setvbuf
01001114 g     F .text	00000078 alt_niosv_timer_sc_isr
01000b64 g     F .text	000000fc alt_io_redirect
0100187c g     F .text	0000000c puts
01005e58 g       *ABS*	00000000 __fini_array_end
01004834 g     F .text	00000048 .hidden __hidden___udivsi3
010006a4 g     F .text	00000104 altera_avalon_jtag_uart_read
01002748 g     F .text	0000000c malloc
02028000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01004834 g     F .text	00000048 .hidden __udivsi3
01005844 g     F .text	000000c4 _raise_r
01004a80 g     F .text	000000c0 _fstat
010001f4 g     F .exceptions	00000108 handle_trap
01006dac g     O .bss	00000004 __malloc_top_pad
01005ce4 g     F .text	00000004 _getpid_r
01006d5c g     O .bss	00000004 __dso_handle
010034b0 g     F .text	00000514 __sfvwrite_r
01005908 g     F .text	000000e0 __sigtramp_r
01003f3c g     F .text	00000050 _sbrk_r
01001e1c g     F .text	0000005c _read_r
010065e8 g     O .rwdata	00000004 alt_max_fd
01002f38 g     F .text	00000170 _fclose_r
010033e0 g     F .text	000000d0 fflush
01006da8 g     O .bss	00000004 __malloc_max_sbrked_mem
01005734 g     F .text	00000018 __stack_chk_init
01006d8c g     O .bss	00000001 __lock___env_recursive_mutex
01004b80 g     F .text	000000f4 _isatty
01004298 g     F .text	00000570 _realloc_r
01007124 g       *ABS*	00000000 __bss_end
01000d6c g     F .text	0000014c alt_tick
01004ebc g     F .text	00000168 _open
0100516c g     F .text	000000b4 _sbrk
01005690 g     F .text	00000098 __stack_chk_fail
01005ed0 g       *ABS*	00000000 __tbss_start
0100118c g     F .text	00000048 alt_niosv_mtimecmp_interrupt_init
01001634 g     F .text	00000030 __fp_lock_all
01000cd4 g     F .text	00000098 alt_alarm_stop
01000108 g     F .exceptions	000000ec alt_irq_handler
01005efc g     O .rwdata	00000028 alt_dev_null
01003f8c g     F .text	0000005c __libc_fini_array
01000f8c g     F .text	00000080 alt_niosv_mtime_get
01001cdc g     F .text	000000e4 _reclaim_reent
01000840 g     F .text	0000001c alt_dcache_flush_all
010000e8 g     F .exceptions	00000020 break_operation
01006d90 g     O .bss	00000001 __lock___malloc_recursive_mutex
0100660c g       *ABS*	00000000 __ram_rwdata_end
01006e34 g     O .bss	00000138 __sf
010065e0 g     O .rwdata	00000008 alt_dev_list
01005ce8 g     F .text	00000014 write
01000f6c g     F .text	00000020 alt_timestamp_freq
01005ed0 g       *ABS*	00000000 __ram_rodata_end
01005680 g     F .text	00000010 fstat
0100487c g     F .text	00000010 .hidden __umodsi3
01007124 g       *ABS*	00000000 end
01000888 g     F .text	0000003c alt_dev_reg
01001f00 g     F .text	00000004 __retarget_lock_release_recursive
01001ef4 g     F .text	00000008 __retarget_lock_try_acquire_recursive
02000000 g       *ABS*	00000000 __alt_stack_pointer
010007a8 g     F .text	00000098 altera_avalon_jtag_uart_write
01001624 g     F .text	00000008 __sfp_lock_acquire
01003d74 g     F .text	000000c4 memchr
01002444 g     F .text	00000304 _free_r
010021a4 g     F .text	00000150 __call_exitprocs
01006f6c g     O .bss	00000190 __atexit0
01006600 g     O .rwdata	00000004 __malloc_sbrk_base
0100032c g     F .text	000000ac _start
01006d60 g     O .bss	00000004 _alt_tick_rate
01001eec g     F .text	00000008 __retarget_lock_try_acquire
01004cb4 g     F .text	000000e0 _lseek
01006d68 g     O .bss	00000008 _alt_nticks
01005aa8 g     F .text	000000a4 signal
01001088 g     F .text	0000008c alt_niosv_mtimecmp_get
01000570 g     F .text	0000006c alt_sys_init
01003ee0 g     F .text	0000005c _open_r
01005ed0 g       *ABS*	00000000 __tdata_source
010020c0 g     F .text	000000e4 __register_exitproc
01004808 g     F .text	00000024 .hidden __mulsi3
01005ed0 g       *ABS*	00000000 __ram_rwdata_start
01005e58 g       *ABS*	00000000 __ram_rodata_start
010070fc g     O .bss	00000028 __malloc_current_mallinfo
01006d70 g     O .bss	00000008 alt_niosv_timestamp_offset
01006d4c g     O .bss	00000004 alt_niosv_timer_interrupt_handler
010005dc g     F .text	00000064 altera_avalon_jtag_uart_read_fd
010055c0 g     F .text	000000c0 alt_get_fd
01001c8c g     F .text	00000050 _close_r
01007124 g       *ABS*	00000000 __alt_stack_base
01001ee0 g     F .text	00000004 __retarget_lock_close_recursive
01003c34 g     F .text	00000140 __swsetup_r
0100147c g     F .text	00000148 __sfp
010061d0 g     O .rwdata	00000408 __malloc_av_
01006da0 g     O .bss	00000004 __atexit
01001b20 g     F .text	0000005c __sread
01005484 g     F .text	0000013c alt_find_file
01000904 g     F .text	000000a8 alt_dev_llist_insert
01002f28 g     F .text	00000008 __malloc_lock
01005e58 g       *ABS*	00000000 __fini_array_start
01003300 g     F .text	000000e0 _fflush_r
01000000 g       *ABS*	00000000 __alt_mem_hyperram_controller_0_s0
01001ee8 g     F .text	00000004 __retarget_lock_acquire_recursive
01006d48 g       *ABS*	00000000 __bss_start
01005ed0 g       *ABS*	00000000 __tdata_start
01005ed0 g       *ABS*	00000000 __tdata_end
01001f58 g     F .text	000000dc memset
010002fc g     F .text	00000030 main
01006d58 g     O .bss	00000004 alt_envp
01006da4 g     O .bss	00000004 __malloc_max_total_mem
01000640 g     F .text	00000064 altera_avalon_jtag_uart_write_fd
01001ed8 g     F .text	00000004 __retarget_lock_init_recursive
01001c84 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
010030a8 g     F .text	0000000c fclose
01000edc g     F .text	0000003c alt_timestamp_start
01005e58 g       *ABS*	00000000 __init_array_end
01002760 g     F .text	000007c8 _malloc_r
010065ec g     O .rwdata	00000004 alt_errno
01005b4c g     F .text	0000005c _init_signal
0100482c g     F .text	00000084 .hidden __divsi3
0100230c g     F .text	00000138 _malloc_trim_r
01005e58 g       *ABS*	00000000 __flash_rodata_start
01001ed4 g     F .text	00000004 __retarget_lock_init
01000538 g     F .text	00000038 alt_irq_init
01000c60 g     F .text	00000074 alt_release_fd
010011d4 g     F .text	00000014 atexit
01001e78 g     F .text	0000005c _write_r
010065f8 g     O .rwdata	00000004 _impure_ptr
01006d50 g     O .bss	00000004 alt_argc
010030b4 g     F .text	0000024c __sflush_r
01000a0c g     F .text	00000060 _do_dtors
01001694 g     F .text	000000b4 _fwalk_sglue
01001664 g     F .text	00000030 __fp_unlock_all
010065d8 g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01000f18 g     F .text	00000054 alt_timestamp
01003b5c g     F .text	000000d8 __swhatbuf_r
010060a4 g     O .rwdata	0000000c __sglue
01000020 g     F .exceptions	00000000 trap_vector
01005260 g     F .text	00000104 _write
0100660c g       *ABS*	00000000 _edata
01007124 g       *ABS*	00000000 _end
010002fc g       *ABS*	00000000 __ram_exceptions_end
01006d94 g     O .bss	00000001 __lock___at_quick_exit_mutex
01000eb8 g     F .text	00000024 intel_niosv_irq_init
01001b84 g     F .text	00000088 __swrite
01006604 g     O .rwdata	00000004 __malloc_trim_threshold
010011e8 g     F .text	0000002c exit
010048b0 g     F .text	00000030 .hidden __modsi3
01005d5c g     F .text	000000f4 _kill
010060b0 g     O .rwdata	00000120 _impure_data
02000000 g       *ABS*	00000000 __alt_data_end
01005ed0 g       *ABS*	00000000 __tbss_end
0100162c g     F .text	00000008 __sfp_lock_release
01005064 g     F .text	00000108 _read
01005e50 g       *ABS*	00000000 __init_array_start
01001ee4 g     F .text	00000004 __retarget_lock_acquire
01001efc g     F .text	00000004 __retarget_lock_release
01004a00 g     F .text	00000040 _exit
01006d84 g     O .bss	00000001 __lock___dd_hash_mutex
010039c4 g     F .text	00000198 __smakebuf_r
01006d88 g     O .bss	00000001 __lock___tz_mutex
01002034 g     F .text	0000008c strlen
0100574c g     F .text	0000005c _init_signal_r
01001f10 g     F .text	00000048 open
01000a6c g     F .text	0000001c alt_icache_flush_all
0100100c g     F .text	0000007c alt_niosv_mtimecmp_set
010065f0 g     O .rwdata	00000008 alt_alarm_list
010009ac g     F .text	00000060 _do_ctors
01005ba8 g     F .text	000000e4 __sigtramp
01001f04 g     F .text	0000000c close
0100043c g     F .text	00000080 alt_load
01006d48 g     O .bss	00000004 alt_niosv_software_interrupt_handler
01006d9c g     O .bss	00000001 __lock___sfp_recursive_mutex
010059e8 g     F .text	000000c0 raise
01004920 g     F .text	000000e0 _close
01002754 g     F .text	0000000c free



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */

    /* Jump to the _start entry point in the .text section. */
    tail _start
 1000000:	32c0006f          	j	100032c <_start>
	...

Disassembly of section .exceptions:

01000020 <trap_vector>:
    /* Save caller-saved registers on the stack */

#if __riscv_flen == 32 // rv32if
    addi sp, sp, -36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
	addi sp, sp, -16 * 4
 1000020:	fc010113          	add	sp,sp,-64
#else // rv32e (16-bit)
	addi sp, sp, -10 * 4
#endif

    /* rv32e (16-bit), rv32i and rv32if */
    sw ra,  0 * 4(sp)
 1000024:	00112023          	sw	ra,0(sp)
    sw t0,  1 * 4(sp)
 1000028:	00512223          	sw	t0,4(sp)
    sw t1,  2 * 4(sp)
 100002c:	00612423          	sw	t1,8(sp)
    sw t2,  3 * 4(sp)
 1000030:	00712623          	sw	t2,12(sp)
    sw a0,  4 * 4(sp)
 1000034:	00a12823          	sw	a0,16(sp)
    sw a1,  5 * 4(sp)
 1000038:	00b12a23          	sw	a1,20(sp)
    sw a2,  6 * 4(sp)
 100003c:	00c12c23          	sw	a2,24(sp)
    sw a3,  7 * 4(sp)
 1000040:	00d12e23          	sw	a3,28(sp)
    sw a4,  8 * 4(sp)
 1000044:	02e12023          	sw	a4,32(sp)
    sw a5,  9 * 4(sp)
 1000048:	02f12223          	sw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32 
    sw a6, 10 * 4(sp)
 100004c:	03012423          	sw	a6,40(sp)
    sw a7, 11 * 4(sp)
 1000050:	03112623          	sw	a7,44(sp)
    sw t3, 12 * 4(sp)
 1000054:	03c12823          	sw	t3,48(sp)
    sw t4, 13 * 4(sp)
 1000058:	03d12a23          	sw	t4,52(sp)
    sw t5, 14 * 4(sp)
 100005c:	03e12c23          	sw	t5,56(sp)
    sw t6, 15 * 4(sp)
 1000060:	03f12e23          	sw	t6,60(sp)
    fsw fa6, 34 * 4(sp)
    fsw fa7, 35 * 4(sp)
#endif
   
    /* Call handle_trap to dispatch the correct handler, if available */
    csrr a0, mcause
 1000064:	34202573          	csrr	a0,mcause
    csrr a1, mepc
 1000068:	341025f3          	csrr	a1,mepc
    csrr a2, mtval
 100006c:	34302673          	csrr	a2,mtval
    jal handle_trap
 1000070:	184000ef          	jal	10001f4 <handle_trap>
    csrw mepc, a0
 1000074:	34151073          	csrw	mepc,a0

    /* Restore caller-saved registers */

    /* rv32e (16-bit), rv32i and rv32if */
    lw ra,  0 * 4(sp)
 1000078:	00012083          	lw	ra,0(sp)
    lw t0,  1 * 4(sp)
 100007c:	00412283          	lw	t0,4(sp)
    lw t1,  2 * 4(sp)
 1000080:	00812303          	lw	t1,8(sp)
    lw t2,  3 * 4(sp)
 1000084:	00c12383          	lw	t2,12(sp)
    lw a0,  4 * 4(sp)
 1000088:	01012503          	lw	a0,16(sp)
    lw a1,  5 * 4(sp)
 100008c:	01412583          	lw	a1,20(sp)
    lw a2,  6 * 4(sp)
 1000090:	01812603          	lw	a2,24(sp)
    lw a3,  7 * 4(sp)
 1000094:	01c12683          	lw	a3,28(sp)
    lw a4,  8 * 4(sp)
 1000098:	02012703          	lw	a4,32(sp)
    lw a5,  9 * 4(sp)
 100009c:	02412783          	lw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32	
    lw a6, 10 * 4(sp)
 10000a0:	02812803          	lw	a6,40(sp)
    lw a7, 11 * 4(sp)
 10000a4:	02c12883          	lw	a7,44(sp)
    lw t3, 12 * 4(sp)
 10000a8:	03012e03          	lw	t3,48(sp)
    lw t4, 13 * 4(sp)
 10000ac:	03412e83          	lw	t4,52(sp)
    lw t5, 14 * 4(sp)
 10000b0:	03812f03          	lw	t5,56(sp)
    lw t6, 15 * 4(sp)
 10000b4:	03c12f83          	lw	t6,60(sp)
#endif

#if __riscv_flen == 32 // rv32if
    addi sp, sp, 36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
	addi sp, sp, 16 * 4
 10000b8:	04010113          	add	sp,sp,64
    lw s0, 0(sp)
    lw s1, 4(sp)
    addi sp, sp, 8
#endif

    mret
 10000bc:	30200073          	mret

010000c0 <is_ecc_handler_present>:
    }

    return epc;
}

alt_u32 is_ecc_handler_present (alt_u32 e_code) {
 10000c0:	fd010113          	add	sp,sp,-48
 10000c4:	02812623          	sw	s0,44(sp)
 10000c8:	03010413          	add	s0,sp,48
 10000cc:	fca42e23          	sw	a0,-36(s0)
#ifdef ALT_CPU_ECC_PRESENT
    alt_u32 present = (e_code == NIOSV_ECC_EXCEPTION && alt_ecc_exception_handler);
#else
    alt_u32 present = 0;
 10000d0:	fe042623          	sw	zero,-20(s0)
#endif
    return present;
 10000d4:	fec42783          	lw	a5,-20(s0)
} 
 10000d8:	00078513          	mv	a0,a5
 10000dc:	02c12403          	lw	s0,44(sp)
 10000e0:	03010113          	add	sp,sp,48
 10000e4:	00008067          	ret

010000e8 <break_operation>:

void break_operation (void)
{
 10000e8:	ff010113          	add	sp,sp,-16
 10000ec:	00812623          	sw	s0,12(sp)
 10000f0:	01010413          	add	s0,sp,16
#ifdef ALT_CPU_HAS_DEBUG_STUB
            NIOSV_EBREAK();
 10000f4:	00100073          	ebreak
#else  // ALT_CPU_HAS_DEBUG_STUB
            while(1)
                ;
#endif // ALT_CPU_HAS_DEBUG_STUB  
}
 10000f8:	00000013          	nop
 10000fc:	00c12403          	lw	s0,12(sp)
 1000100:	01010113          	add	sp,sp,16
 1000104:	00008067          	ret

01000108 <alt_irq_handler>:
 * This means that if there is never a call to alt_irq_register() then
 * this function will not get linked in to the executable. This is acceptable
 * since if no handler is ever registered, then an interrupt can never occur.
 */
void alt_irq_handler (void)
{
 1000108:	fd010113          	add	sp,sp,-48
 100010c:	02112623          	sw	ra,44(sp)
 1000110:	02812423          	sw	s0,40(sp)
 1000114:	03010413          	add	s0,sp,48
    alt_u32 i;

    /*
     * Notify the operating system that we are at interrupt level.
     */  
    ALT_OS_INT_ENTER();
 1000118:	00000013          	nop
{
#if ALT_HAS_IRQ_SUPPORT
    alt_u32 active;
    alt_u32 enabled;

    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
 100011c:	344027f3          	csrr	a5,mip
 1000120:	fef42023          	sw	a5,-32(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
 1000124:	304027f3          	csrr	a5,mie
 1000128:	fef42223          	sw	a5,-28(s0)

    // Since this is used by alt_irq_handler, we want to only process the upper 16-bits
    // --> the interrupt lines connected via Platform Designer...
    return (active & enabled) >> 16;
 100012c:	fe042703          	lw	a4,-32(s0)
 1000130:	fe442783          	lw	a5,-28(s0)
 1000134:	00f777b3          	and	a5,a4,a5
 1000138:	0107d793          	srl	a5,a5,0x10
     * reduced by finding out which interrupts are pending as late as possible.
     * Consider the case where the high priority interupt is asserted during
     * the interrupt entry sequence for a lower priority interrupt to see why
     * this is the case.
     */
    active = alt_irq_pending();
 100013c:	fcf42a23          	sw	a5,-44(s0)

    do
    {
        i = 0;
 1000140:	fc042e23          	sw	zero,-36(s0)
        mask = 1;
 1000144:	00100793          	li	a5,1
 1000148:	fcf42c23          	sw	a5,-40(s0)
         * called to clear the interrupt condition.
         */

        do
        {
            if (active & mask)
 100014c:	fd442703          	lw	a4,-44(s0)
 1000150:	fd842783          	lw	a5,-40(s0)
 1000154:	00f777b3          	and	a5,a4,a5
 1000158:	04078e63          	beqz	a5,10001b4 <alt_irq_handler+0xac>
            {
                alt_irq[i].handler(alt_irq[i].context); 
 100015c:	fdc18713          	add	a4,gp,-36 # 1006db4 <alt_irq>
 1000160:	fdc42783          	lw	a5,-36(s0)
 1000164:	00379793          	sll	a5,a5,0x3
 1000168:	00f707b3          	add	a5,a4,a5
 100016c:	0007a703          	lw	a4,0(a5)
 1000170:	fdc18693          	add	a3,gp,-36 # 1006db4 <alt_irq>
 1000174:	fdc42783          	lw	a5,-36(s0)
 1000178:	00379793          	sll	a5,a5,0x3
 100017c:	00f687b3          	add	a5,a3,a5
 1000180:	0047a783          	lw	a5,4(a5)
 1000184:	00078513          	mv	a0,a5
 1000188:	000700e7          	jalr	a4
                break;
 100018c:	00000013          	nop
    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
 1000190:	344027f3          	csrr	a5,mip
 1000194:	fef42423          	sw	a5,-24(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
 1000198:	304027f3          	csrr	a5,mie
 100019c:	fef42623          	sw	a5,-20(s0)
    return (active & enabled) >> 16;
 10001a0:	fe842703          	lw	a4,-24(s0)
 10001a4:	fec42783          	lw	a5,-20(s0)
 10001a8:	00f777b3          	and	a5,a4,a5
 10001ac:	0107d793          	srl	a5,a5,0x10
 10001b0:	0200006f          	j	10001d0 <alt_irq_handler+0xc8>
            }
            
            mask <<= 1;
 10001b4:	fd842783          	lw	a5,-40(s0)
 10001b8:	00179793          	sll	a5,a5,0x1
 10001bc:	fcf42c23          	sw	a5,-40(s0)
            i++;
 10001c0:	fdc42783          	lw	a5,-36(s0)
 10001c4:	00178793          	add	a5,a5,1
 10001c8:	fcf42e23          	sw	a5,-36(s0)
            if (active & mask)
 10001cc:	f81ff06f          	j	100014c <alt_irq_handler+0x44>
            
        } while (1);

        active = alt_irq_pending();
 10001d0:	fcf42a23          	sw	a5,-44(s0)
    
    } while (active);
 10001d4:	fd442783          	lw	a5,-44(s0)
 10001d8:	f60794e3          	bnez	a5,1000140 <alt_irq_handler+0x38>

    /*
     * Notify the operating system that interrupt processing is complete.
     */ 

    ALT_OS_INT_EXIT();
 10001dc:	00000013          	nop
}
 10001e0:	00000013          	nop
 10001e4:	02c12083          	lw	ra,44(sp)
 10001e8:	02812403          	lw	s0,40(sp)
 10001ec:	03010113          	add	sp,sp,48
 10001f0:	00008067          	ret

010001f4 <handle_trap>:
{
 10001f4:	fd010113          	add	sp,sp,-48
 10001f8:	02112623          	sw	ra,44(sp)
 10001fc:	02812423          	sw	s0,40(sp)
 1000200:	03010413          	add	s0,sp,48
 1000204:	fca42e23          	sw	a0,-36(s0)
 1000208:	fcb42c23          	sw	a1,-40(s0)
 100020c:	fcc42a23          	sw	a2,-44(s0)
    is_irq = (cause & NIOSV_MCAUSE_INTERRUPT_MASK);
 1000210:	fdc42703          	lw	a4,-36(s0)
 1000214:	800007b7          	lui	a5,0x80000
 1000218:	00f777b3          	and	a5,a4,a5
 100021c:	fef42423          	sw	a5,-24(s0)
    exception_code = (cause & ~NIOSV_MCAUSE_INTERRUPT_MASK);
 1000220:	fdc42703          	lw	a4,-36(s0)
 1000224:	800007b7          	lui	a5,0x80000
 1000228:	fff78793          	add	a5,a5,-1 # 7fffffff <__alt_mem_onchip_memory2_0+0x7dfd7fff>
 100022c:	00f777b3          	and	a5,a4,a5
 1000230:	fef42623          	sw	a5,-20(s0)
    if (is_irq) {
 1000234:	fe842783          	lw	a5,-24(s0)
 1000238:	08078063          	beqz	a5,10002b8 <handle_trap+0xc4>
        switch (exception_code) {
 100023c:	fec42703          	lw	a4,-20(s0)
 1000240:	00300793          	li	a5,3
 1000244:	02f70c63          	beq	a4,a5,100027c <handle_trap+0x88>
 1000248:	fec42703          	lw	a4,-20(s0)
 100024c:	00700793          	li	a5,7
 1000250:	04f71a63          	bne	a4,a5,10002a4 <handle_trap+0xb0>
                if (alt_niosv_timer_interrupt_handler) {
 1000254:	f741a783          	lw	a5,-140(gp) # 1006d4c <alt_niosv_timer_interrupt_handler>
 1000258:	06078c63          	beqz	a5,10002d0 <handle_trap+0xdc>
                    ALT_OS_INT_ENTER();
 100025c:	00000013          	nop
                    alt_niosv_timer_interrupt_handler(cause, epc, tval);
 1000260:	f741a783          	lw	a5,-140(gp) # 1006d4c <alt_niosv_timer_interrupt_handler>
 1000264:	fd442603          	lw	a2,-44(s0)
 1000268:	fd842583          	lw	a1,-40(s0)
 100026c:	fdc42503          	lw	a0,-36(s0)
 1000270:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 1000274:	00000013          	nop
                break;
 1000278:	0580006f          	j	10002d0 <handle_trap+0xdc>
                if (alt_niosv_software_interrupt_handler) {
 100027c:	f701a783          	lw	a5,-144(gp) # 1006d48 <alt_niosv_software_interrupt_handler>
 1000280:	04078c63          	beqz	a5,10002d8 <handle_trap+0xe4>
                    ALT_OS_INT_ENTER();
 1000284:	00000013          	nop
                    alt_niosv_software_interrupt_handler(cause, epc, tval);
 1000288:	f701a783          	lw	a5,-144(gp) # 1006d48 <alt_niosv_software_interrupt_handler>
 100028c:	fd442603          	lw	a2,-44(s0)
 1000290:	fd842583          	lw	a1,-40(s0)
 1000294:	fdc42503          	lw	a0,-36(s0)
 1000298:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 100029c:	00000013          	nop
                break;
 10002a0:	0380006f          	j	10002d8 <handle_trap+0xe4>
                if (exception_code >= 16) {
 10002a4:	fec42703          	lw	a4,-20(s0)
 10002a8:	00f00793          	li	a5,15
 10002ac:	02e7fa63          	bgeu	a5,a4,10002e0 <handle_trap+0xec>
                    alt_irq_handler();
 10002b0:	e59ff0ef          	jal	1000108 <alt_irq_handler>
                break;
 10002b4:	02c0006f          	j	10002e0 <handle_trap+0xec>
        if (!is_ecc_handler_present(exception_code)) {
 10002b8:	fec42503          	lw	a0,-20(s0)
 10002bc:	e05ff0ef          	jal	10000c0 <is_ecc_handler_present>
 10002c0:	00050793          	mv	a5,a0
 10002c4:	02079063          	bnez	a5,10002e4 <handle_trap+0xf0>
             break_operation();
 10002c8:	e21ff0ef          	jal	10000e8 <break_operation>
 10002cc:	0180006f          	j	10002e4 <handle_trap+0xf0>
                break;
 10002d0:	00000013          	nop
 10002d4:	0100006f          	j	10002e4 <handle_trap+0xf0>
                break;
 10002d8:	00000013          	nop
 10002dc:	0080006f          	j	10002e4 <handle_trap+0xf0>
                break;
 10002e0:	00000013          	nop
    return epc;
 10002e4:	fd842783          	lw	a5,-40(s0)
}
 10002e8:	00078513          	mv	a0,a5
 10002ec:	02c12083          	lw	ra,44(sp)
 10002f0:	02812403          	lw	s0,40(sp)
 10002f4:	03010113          	add	sp,sp,48
 10002f8:	00008067          	ret

Disassembly of section .text:

010002fc <main>:
#include <stdio.h>

void main() {
 10002fc:	ff010113          	add	sp,sp,-16
 1000300:	00112623          	sw	ra,12(sp)
 1000304:	00812423          	sw	s0,8(sp)
 1000308:	01010413          	add	s0,sp,16
    printf("Hello, World!\n");
 100030c:	010067b7          	lui	a5,0x1006
 1000310:	e5878513          	add	a0,a5,-424 # 1005e58 <__fini_array_end>
 1000314:	568010ef          	jal	100187c <puts>
    return 0;
 1000318:	00000013          	nop
 100031c:	00c12083          	lw	ra,12(sp)
 1000320:	00812403          	lw	s0,8(sp)
 1000324:	01010113          	add	sp,sp,16
 1000328:	00008067          	ret

0100032c <_start>:
    .type _start, @function
_start:
#if ALT_CPU_HAS_CSR_SUPPORT
    /* assume that we are in machine mode on startup */
    /* setup trap to catch anything that goes wrong early in the boot process */
    la t0, trap_vector
 100032c:	00000297          	auipc	t0,0x0
 1000330:	cf428293          	add	t0,t0,-780 # 1000020 <trap_vector>
    csrw mtvec, t0
 1000334:	30529073          	csrw	mtvec,t0

    /* disable all interrupt */
    li t0, 0x88
 1000338:	08800293          	li	t0,136
    csrc mstatus, t0
 100033c:	3002b073          	csrc	mstatus,t0
    csrw mie, zero
 1000340:	30401073          	csrw	mie,zero
    csrw mip, zero
 1000344:	34401073          	csrw	mip,zero
#endif /* Initialize Data Cache */
#endif /* ALT_SIM_OPTIMIZE */

    .option push
    .option norelax
    la gp, __global_pointer$
 1000348:	00007197          	auipc	gp,0x7
 100034c:	a9018193          	add	gp,gp,-1392 # 1006dd8 <__global_pointer$>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    la sp, __alt_stack_pointer
 1000350:	01000117          	auipc	sp,0x1000
 1000354:	cb010113          	add	sp,sp,-848 # 2000000 <__alt_data_end>
    /* Log that the BSS is about to be cleared. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_bss)
#endif /* ALT_LOG_ENABLE */

    la t1, __bss_start
 1000358:	00007317          	auipc	t1,0x7
 100035c:	9f030313          	add	t1,t1,-1552 # 1006d48 <alt_niosv_software_interrupt_handler>
    la t2, __bss_end
 1000360:	00007397          	auipc	t2,0x7
 1000364:	dc438393          	add	t2,t2,-572 # 1007124 <__alt_heap_start>
0:
    sw zero, (t1)
 1000368:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
 100036c:	00430313          	add	t1,t1,4
    bltu t1, t2, 0b
 1000370:	fe736ce3          	bltu	t1,t2,1000368 <_start+0x3c>
/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD
    call alt_load
 1000374:	0c8000ef          	jal	100043c <alt_load>
 */
#ifndef ALT_SIM_OPTIMIZE
.globl __tbss_start
.globl __tbss_end

    la t1, __tbss_start
 1000378:	00006317          	auipc	t1,0x6
 100037c:	b5830313          	add	t1,t1,-1192 # 1005ed0 <jtag_uart_0>
    la t2, __tbss_end
 1000380:	00006397          	auipc	t2,0x6
 1000384:	b5038393          	add	t2,t2,-1200 # 1005ed0 <jtag_uart_0>
    
    // Check if we need to skip this (if .tbss is empty)
    bgeu t1, t2, 1f
 1000388:	00737863          	bgeu	t1,t2,1000398 <_start+0x6c>
0:
    sw zero, (t1)
 100038c:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
 1000390:	00430313          	add	t1,t1,4
    bltu t1, t2, 0b
 1000394:	fe736ce3          	bltu	t1,t2,100038c <_start+0x60>
// Copy tdata to tdata golden source location
.globl __tdata_start
.globl __tdata_end
.globl __tdata_source

    la t0, __tdata_start
 1000398:	00006297          	auipc	t0,0x6
 100039c:	b3828293          	add	t0,t0,-1224 # 1005ed0 <jtag_uart_0>
    la t1, __tdata_end
 10003a0:	00006317          	auipc	t1,0x6
 10003a4:	b3030313          	add	t1,t1,-1232 # 1005ed0 <jtag_uart_0>
    la t2, __tdata_source
 10003a8:	00006397          	auipc	t2,0x6
 10003ac:	b2838393          	add	t2,t2,-1240 # 1005ed0 <jtag_uart_0>

    // Check if we need to skip this (if .tdata is empty)
    bgeu t0, t1, 1f
 10003b0:	0062fc63          	bgeu	t0,t1,10003c8 <_start+0x9c>
0:
    lw s1, (t0)
 10003b4:	0002a483          	lw	s1,0(t0)
    sw s1, (t2)
 10003b8:	0093a023          	sw	s1,0(t2)
    addi t0, t0, 4
 10003bc:	00428293          	add	t0,t0,4
    addi t2, t2, 4
 10003c0:	00438393          	add	t2,t2,4
    bltu t0, t1, 0b
 10003c4:	fe62e8e3          	bltu	t0,t1,10003b4 <_start+0x88>
1:

// Assign thread pointer register (tp) to main thread tls base
.globl __tls_base
    la tp, __tls_base
 10003c8:	00006217          	auipc	tp,0x6
 10003cc:	b0820213          	add	tp,tp,-1272 # 1005ed0 <jtag_uart_0>
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_alt_main)
#endif /* ALT_LOG_ENABLE */

    /* Call the C entry point. It should never return. */
    call alt_main
 10003d0:	0ec000ef          	jal	10004bc <alt_main>

010003d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    j alt_after_alt_main
 10003d4:	0000006f          	j	10003d4 <alt_after_alt_main>

010003d8 <alt_load_section>:
 10003d8:	fe010113          	add	sp,sp,-32
 10003dc:	00812e23          	sw	s0,28(sp)
 */  

void alt_load (void)
{
  /* 
   * Copy the .rwdata section. 
 10003e0:	02010413          	add	s0,sp,32
 10003e4:	fea42623          	sw	a0,-20(s0)
 10003e8:	feb42423          	sw	a1,-24(s0)
 10003ec:	fec42223          	sw	a2,-28(s0)
   */
 10003f0:	fe842703          	lw	a4,-24(s0)
 10003f4:	fec42783          	lw	a5,-20(s0)
 10003f8:	02f70a63          	beq	a4,a5,100042c <alt_load_section+0x54>

  alt_load_section (&__flash_rwdata_start, 
 10003fc:	0240006f          	j	1000420 <alt_load_section+0x48>
		               &__ram_rwdata_start,
		               &__ram_rwdata_end);
 1000400:	fec42703          	lw	a4,-20(s0)
 1000404:	00470793          	add	a5,a4,4
 1000408:	fef42623          	sw	a5,-20(s0)
 100040c:	fe842783          	lw	a5,-24(s0)
 1000410:	00478693          	add	a3,a5,4
 1000414:	fed42423          	sw	a3,-24(s0)
 1000418:	00072703          	lw	a4,0(a4)
 100041c:	00e7a023          	sw	a4,0(a5)
  alt_load_section (&__flash_rwdata_start, 
 1000420:	fe842703          	lw	a4,-24(s0)
 1000424:	fe442783          	lw	a5,-28(s0)
 1000428:	fcf71ce3          	bne	a4,a5,1000400 <alt_load_section+0x28>

  /*
   * Copy the exception handler.
 100042c:	00000013          	nop
 1000430:	01c12403          	lw	s0,28(sp)
 1000434:	02010113          	add	sp,sp,32
 1000438:	00008067          	ret

0100043c <alt_load>:
{
 100043c:	ff010113          	add	sp,sp,-16
 1000440:	00112623          	sw	ra,12(sp)
 1000444:	00812423          	sw	s0,8(sp)
 1000448:	01010413          	add	s0,sp,16
  alt_load_section (&__flash_rwdata_start, 
 100044c:	010067b7          	lui	a5,0x1006
 1000450:	60c78613          	add	a2,a5,1548 # 100660c <__flash_rwdata_start>
 1000454:	010067b7          	lui	a5,0x1006
 1000458:	ed078593          	add	a1,a5,-304 # 1005ed0 <jtag_uart_0>
 100045c:	010067b7          	lui	a5,0x1006
 1000460:	60c78513          	add	a0,a5,1548 # 100660c <__flash_rwdata_start>
 1000464:	f75ff0ef          	jal	10003d8 <alt_load_section>
   */

  alt_load_section (&__flash_exceptions_start, 
 1000468:	010007b7          	lui	a5,0x1000
 100046c:	2fc78613          	add	a2,a5,764 # 10002fc <main>
 1000470:	010007b7          	lui	a5,0x1000
 1000474:	02078593          	add	a1,a5,32 # 1000020 <trap_vector>
 1000478:	010007b7          	lui	a5,0x1000
 100047c:	02078513          	add	a0,a5,32 # 1000020 <trap_vector>
 1000480:	f59ff0ef          	jal	10003d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1000484:	010067b7          	lui	a5,0x1006
 1000488:	ed078613          	add	a2,a5,-304 # 1005ed0 <jtag_uart_0>
 100048c:	010067b7          	lui	a5,0x1006
 1000490:	e5878593          	add	a1,a5,-424 # 1005e58 <__fini_array_end>
 1000494:	010067b7          	lui	a5,0x1006
 1000498:	e5878513          	add	a0,a5,-424 # 1005e58 <__fini_array_end>
 100049c:	f3dff0ef          	jal	10003d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 10004a0:	3a0000ef          	jal	1000840 <alt_dcache_flush_all>
  alt_icache_flush_all();
 10004a4:	5c8000ef          	jal	1000a6c <alt_icache_flush_all>
}
 10004a8:	00000013          	nop
 10004ac:	00c12083          	lw	ra,12(sp)
 10004b0:	00812403          	lw	s0,8(sp)
 10004b4:	01010113          	add	sp,sp,16
 10004b8:	00008067          	ret

010004bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 10004bc:	fe010113          	add	sp,sp,-32
 10004c0:	00112e23          	sw	ra,28(sp)
 10004c4:	00812c23          	sw	s0,24(sp)
 10004c8:	02010413          	add	s0,sp,32
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 10004cc:	00000513          	li	a0,0
 10004d0:	068000ef          	jal	1000538 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 10004d4:	00000013          	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 10004d8:	098000ef          	jal	1000570 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 10004dc:	010067b7          	lui	a5,0x1006
 10004e0:	e6878613          	add	a2,a5,-408 # 1005e68 <__fini_array_end+0x10>
 10004e4:	010067b7          	lui	a5,0x1006
 10004e8:	e6878593          	add	a1,a5,-408 # 1005e68 <__fini_array_end+0x10>
 10004ec:	010067b7          	lui	a5,0x1006
 10004f0:	e6878513          	add	a0,a5,-408 # 1005e68 <__fini_array_end+0x10>
 10004f4:	670000ef          	jal	1000b64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 10004f8:	4b4000ef          	jal	10009ac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 10004fc:	010017b7          	lui	a5,0x1001
 1000500:	a0c78513          	add	a0,a5,-1524 # 1000a0c <_do_dtors>
 1000504:	4d1000ef          	jal	10011d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1000508:	f781a703          	lw	a4,-136(gp) # 1006d50 <alt_argc>
 100050c:	f7c1a683          	lw	a3,-132(gp) # 1006d54 <alt_argv>
 1000510:	f801a783          	lw	a5,-128(gp) # 1006d58 <alt_envp>
 1000514:	00078613          	mv	a2,a5
 1000518:	00068593          	mv	a1,a3
 100051c:	00070513          	mv	a0,a4
 1000520:	dddff0ef          	jal	10002fc <main>
 1000524:	fea42623          	sw	a0,-20(s0)
  close(STDOUT_FILENO);
 1000528:	00100513          	li	a0,1
 100052c:	1d9010ef          	jal	1001f04 <close>
  exit (result);
 1000530:	fec42503          	lw	a0,-20(s0)
 1000534:	4b5000ef          	jal	10011e8 <exit>

01000538 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1000538:	fe010113          	add	sp,sp,-32
 100053c:	00112e23          	sw	ra,28(sp)
 1000540:	00812c23          	sw	s0,24(sp)
 1000544:	02010413          	add	s0,sp,32
 1000548:	fea42623          	sw	a0,-20(s0)
    INTEL_NIOSV_M_IRQ_INIT ( INTEL_NIOSV_M_0, intel_niosv_m_0);
 100054c:	16d000ef          	jal	1000eb8 <intel_niosv_irq_init>
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, NIOSV_MSTATUS_MIE_MASK);
 1000550:	00800793          	li	a5,8
 1000554:	3007a073          	csrs	mstatus,a5
}
 1000558:	00000013          	nop
    alt_irq_cpu_enable_interrupts();
}
 100055c:	00000013          	nop
 1000560:	01c12083          	lw	ra,28(sp)
 1000564:	01812403          	lw	s0,24(sp)
 1000568:	02010113          	add	sp,sp,32
 100056c:	00008067          	ret

01000570 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1000570:	fe010113          	add	sp,sp,-32
 1000574:	00112e23          	sw	ra,28(sp)
 1000578:	00812c23          	sw	s0,24(sp)
 100057c:	02010413          	add	s0,sp,32
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1000580:	010067b7          	lui	a5,0x1006
 1000584:	ed078513          	add	a0,a5,-304 # 1005ed0 <jtag_uart_0>
 1000588:	300000ef          	jal	1000888 <alt_dev_reg>
 100058c:	3e800793          	li	a5,1000
 1000590:	fef42623          	sw	a5,-20(s0)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1000594:	f881a783          	lw	a5,-120(gp) # 1006d60 <_alt_tick_rate>
 1000598:	00079863          	bnez	a5,10005a8 <alt_sys_init+0x38>
  {
    _alt_tick_rate = nticks;
 100059c:	fec42703          	lw	a4,-20(s0)
 10005a0:	f8e1a423          	sw	a4,-120(gp) # 1006d60 <_alt_tick_rate>
    return 0;
 10005a4:	0080006f          	j	10005ac <alt_sys_init+0x3c>
  }
  else
  {
    return -1;
 10005a8:	00000013          	nop
 10005ac:	010017b7          	lui	a5,0x1001
 10005b0:	11478793          	add	a5,a5,276 # 1001114 <alt_niosv_timer_sc_isr>
 10005b4:	fef42423          	sw	a5,-24(s0)
alt_u64 alt_niosv_mtimecmp_get();
void alt_niosv_mtimecmp_interrupt_init();
extern alt_niosv_timer_isr_t alt_niosv_timer_interrupt_handler;

static ALT_INLINE void ALT_ALWAYS_INLINE alt_niosv_register_mtimecmp_interrupt_handle(alt_niosv_timer_isr_t handle) {
    alt_niosv_timer_interrupt_handler = handle;
 10005b8:	fe842703          	lw	a4,-24(s0)
 10005bc:	f6e1aa23          	sw	a4,-140(gp) # 1006d4c <alt_niosv_timer_interrupt_handler>
}
 10005c0:	00000013          	nop
    INTEL_NIOSV_M_INIT ( INTEL_NIOSV_M_0, intel_niosv_m_0);
 10005c4:	3c9000ef          	jal	100118c <alt_niosv_mtimecmp_interrupt_init>
}
 10005c8:	00000013          	nop
 10005cc:	01c12083          	lw	ra,28(sp)
 10005d0:	01812403          	lw	s0,24(sp)
 10005d4:	02010113          	add	sp,sp,32
 10005d8:	00008067          	ret

010005dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10005dc:	fd010113          	add	sp,sp,-48
 10005e0:	02112623          	sw	ra,44(sp)
 10005e4:	02812423          	sw	s0,40(sp)
 10005e8:	03010413          	add	s0,sp,48
 10005ec:	fca42e23          	sw	a0,-36(s0)
 10005f0:	fcb42c23          	sw	a1,-40(s0)
 10005f4:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10005f8:	fdc42783          	lw	a5,-36(s0)
 10005fc:	0007a783          	lw	a5,0(a5)
 1000600:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1000604:	fec42783          	lw	a5,-20(s0)
 1000608:	02878713          	add	a4,a5,40
 100060c:	fdc42783          	lw	a5,-36(s0)
 1000610:	0087a783          	lw	a5,8(a5)
 1000614:	00078693          	mv	a3,a5
 1000618:	fd442603          	lw	a2,-44(s0)
 100061c:	fd842583          	lw	a1,-40(s0)
 1000620:	00070513          	mv	a0,a4
 1000624:	080000ef          	jal	10006a4 <altera_avalon_jtag_uart_read>
 1000628:	00050793          	mv	a5,a0
      fd->fd_flags);
}
 100062c:	00078513          	mv	a0,a5
 1000630:	02c12083          	lw	ra,44(sp)
 1000634:	02812403          	lw	s0,40(sp)
 1000638:	03010113          	add	sp,sp,48
 100063c:	00008067          	ret

01000640 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1000640:	fd010113          	add	sp,sp,-48
 1000644:	02112623          	sw	ra,44(sp)
 1000648:	02812423          	sw	s0,40(sp)
 100064c:	03010413          	add	s0,sp,48
 1000650:	fca42e23          	sw	a0,-36(s0)
 1000654:	fcb42c23          	sw	a1,-40(s0)
 1000658:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100065c:	fdc42783          	lw	a5,-36(s0)
 1000660:	0007a783          	lw	a5,0(a5)
 1000664:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1000668:	fec42783          	lw	a5,-20(s0)
 100066c:	02878713          	add	a4,a5,40
 1000670:	fdc42783          	lw	a5,-36(s0)
 1000674:	0087a783          	lw	a5,8(a5)
 1000678:	00078693          	mv	a3,a5
 100067c:	fd442603          	lw	a2,-44(s0)
 1000680:	fd842583          	lw	a1,-40(s0)
 1000684:	00070513          	mv	a0,a4
 1000688:	120000ef          	jal	10007a8 <altera_avalon_jtag_uart_write>
 100068c:	00050793          	mv	a5,a0
      fd->fd_flags);
}
 1000690:	00078513          	mv	a0,a5
 1000694:	02c12083          	lw	ra,44(sp)
 1000698:	02812403          	lw	s0,40(sp)
 100069c:	03010113          	add	sp,sp,48
 10006a0:	00008067          	ret

010006a4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 10006a4:	fc010113          	add	sp,sp,-64
 10006a8:	02812e23          	sw	s0,60(sp)
 10006ac:	04010413          	add	s0,sp,64
 10006b0:	fca42623          	sw	a0,-52(s0)
 10006b4:	fcb42423          	sw	a1,-56(s0)
 10006b8:	fcc42223          	sw	a2,-60(s0)
 10006bc:	fcd42023          	sw	a3,-64(s0)
  unsigned int base = sp->base;
 10006c0:	fcc42783          	lw	a5,-52(s0)
 10006c4:	0007a783          	lw	a5,0(a5)
 10006c8:	fef42023          	sw	a5,-32(s0)

  char * ptr = buffer;
 10006cc:	fc842783          	lw	a5,-56(s0)
 10006d0:	fcf42e23          	sw	a5,-36(s0)
  char * end = buffer + space;
 10006d4:	fc442783          	lw	a5,-60(s0)
 10006d8:	fc842703          	lw	a4,-56(s0)
 10006dc:	00f707b3          	add	a5,a4,a5
 10006e0:	fef42223          	sw	a5,-28(s0)

  while (ptr < end)
 10006e4:	0600006f          	j	1000744 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 10006e8:	fe042783          	lw	a5,-32(s0)
 10006ec:	0007a783          	lw	a5,0(a5)
 10006f0:	fef42423          	sw	a5,-24(s0)
 10006f4:	fe842783          	lw	a5,-24(s0)
 10006f8:	fef42623          	sw	a5,-20(s0)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 10006fc:	fec42703          	lw	a4,-20(s0)
 1000700:	000087b7          	lui	a5,0x8
 1000704:	00f777b3          	and	a5,a4,a5
 1000708:	02078063          	beqz	a5,1000728 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100070c:	fdc42783          	lw	a5,-36(s0)
 1000710:	00178713          	add	a4,a5,1 # 8001 <__reset-0xff7fff>
 1000714:	fce42e23          	sw	a4,-36(s0)
 1000718:	fec42703          	lw	a4,-20(s0)
 100071c:	0ff77713          	zext.b	a4,a4
 1000720:	00e78023          	sb	a4,0(a5)
 1000724:	0200006f          	j	1000744 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
 1000728:	fdc42703          	lw	a4,-36(s0)
 100072c:	fc842783          	lw	a5,-56(s0)
 1000730:	02f71263          	bne	a4,a5,1000754 <altera_avalon_jtag_uart_read+0xb0>
      break;
    else if(flags & O_NONBLOCK)
 1000734:	fc042703          	lw	a4,-64(s0)
 1000738:	000047b7          	lui	a5,0x4
 100073c:	00f777b3          	and	a5,a4,a5
 1000740:	00079e63          	bnez	a5,100075c <altera_avalon_jtag_uart_read+0xb8>
  while (ptr < end)
 1000744:	fdc42703          	lw	a4,-36(s0)
 1000748:	fe442783          	lw	a5,-28(s0)
 100074c:	f8f76ee3          	bltu	a4,a5,10006e8 <altera_avalon_jtag_uart_read+0x44>
 1000750:	0100006f          	j	1000760 <altera_avalon_jtag_uart_read+0xbc>
      break;
 1000754:	00000013          	nop
 1000758:	0080006f          	j	1000760 <altera_avalon_jtag_uart_read+0xbc>
      break;   
 100075c:	00000013          	nop
    
  }

  if (ptr != buffer)
 1000760:	fdc42703          	lw	a4,-36(s0)
 1000764:	fc842783          	lw	a5,-56(s0)
 1000768:	00f70a63          	beq	a4,a5,100077c <altera_avalon_jtag_uart_read+0xd8>
    return ptr - buffer;
 100076c:	fdc42703          	lw	a4,-36(s0)
 1000770:	fc842783          	lw	a5,-56(s0)
 1000774:	40f707b3          	sub	a5,a4,a5
 1000778:	0200006f          	j	1000798 <altera_avalon_jtag_uart_read+0xf4>
  else if (flags & O_NONBLOCK)
 100077c:	fc042703          	lw	a4,-64(s0)
 1000780:	000047b7          	lui	a5,0x4
 1000784:	00f777b3          	and	a5,a4,a5
 1000788:	00078663          	beqz	a5,1000794 <altera_avalon_jtag_uart_read+0xf0>
    return -EWOULDBLOCK;
 100078c:	ff500793          	li	a5,-11
 1000790:	0080006f          	j	1000798 <altera_avalon_jtag_uart_read+0xf4>
  else
    return -EIO;
 1000794:	ffb00793          	li	a5,-5
}
 1000798:	00078513          	mv	a0,a5
 100079c:	03c12403          	lw	s0,60(sp)
 10007a0:	04010113          	add	sp,sp,64
 10007a4:	00008067          	ret

010007a8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 10007a8:	fd010113          	add	sp,sp,-48
 10007ac:	02812623          	sw	s0,44(sp)
 10007b0:	03010413          	add	s0,sp,48
 10007b4:	fca42e23          	sw	a0,-36(s0)
 10007b8:	fcb42c23          	sw	a1,-40(s0)
 10007bc:	fcc42a23          	sw	a2,-44(s0)
 10007c0:	fcd42823          	sw	a3,-48(s0)
  unsigned int base = sp->base;
 10007c4:	fdc42783          	lw	a5,-36(s0)
 10007c8:	0007a783          	lw	a5,0(a5) # 4000 <__reset-0xffc000>
 10007cc:	fef42023          	sw	a5,-32(s0)

  const char * end = ptr + count;
 10007d0:	fd442783          	lw	a5,-44(s0)
 10007d4:	fd842703          	lw	a4,-40(s0)
 10007d8:	00f707b3          	add	a5,a4,a5
 10007dc:	fef42223          	sw	a5,-28(s0)

  while (ptr < end)
 10007e0:	0400006f          	j	1000820 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 10007e4:	fe042783          	lw	a5,-32(s0)
 10007e8:	00478793          	add	a5,a5,4
 10007ec:	0007a783          	lw	a5,0(a5)
 10007f0:	fef42423          	sw	a5,-24(s0)
 10007f4:	fe842703          	lw	a4,-24(s0)
 10007f8:	000107b7          	lui	a5,0x10
 10007fc:	02f76263          	bltu	a4,a5,1000820 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 1000800:	fd842783          	lw	a5,-40(s0)
 1000804:	00178713          	add	a4,a5,1 # 10001 <__reset-0xfeffff>
 1000808:	fce42c23          	sw	a4,-40(s0)
 100080c:	0007c783          	lbu	a5,0(a5)
 1000810:	fef42623          	sw	a5,-20(s0)
 1000814:	fe042783          	lw	a5,-32(s0)
 1000818:	fec42703          	lw	a4,-20(s0)
 100081c:	00e7a023          	sw	a4,0(a5)
  while (ptr < end)
 1000820:	fd842703          	lw	a4,-40(s0)
 1000824:	fe442783          	lw	a5,-28(s0)
 1000828:	faf76ee3          	bltu	a4,a5,10007e4 <altera_avalon_jtag_uart_write+0x3c>

  return count;
 100082c:	fd442783          	lw	a5,-44(s0)
}
 1000830:	00078513          	mv	a0,a5
 1000834:	02c12403          	lw	s0,44(sp)
 1000838:	03010113          	add	sp,sp,48
 100083c:	00008067          	ret

01000840 <alt_dcache_flush_all>:

/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */
void alt_dcache_flush_all (void)
{
 1000840:	ff010113          	add	sp,sp,-16
 1000844:	00812623          	sw	s0,12(sp)
 1000848:	01010413          	add	s0,sp,16
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    { 
      DCACHE_CLEAN_BY_INDEX_VAL(i); 
    }
#endif
}
 100084c:	00000013          	nop
 1000850:	00c12403          	lw	s0,12(sp)
 1000854:	01010113          	add	sp,sp,16
 1000858:	00008067          	ret

0100085c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100085c:	fe010113          	add	sp,sp,-32
 1000860:	00812e23          	sw	s0,28(sp)
 1000864:	02010413          	add	s0,sp,32
 1000868:	fea42623          	sw	a0,-20(s0)
 100086c:	feb42423          	sw	a1,-24(s0)
 1000870:	fec42223          	sw	a2,-28(s0)
  return len;
 1000874:	fe442783          	lw	a5,-28(s0)
}
 1000878:	00078513          	mv	a0,a5
 100087c:	01c12403          	lw	s0,28(sp)
 1000880:	02010113          	add	sp,sp,32
 1000884:	00008067          	ret

01000888 <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
 1000888:	fe010113          	add	sp,sp,-32
 100088c:	00112e23          	sw	ra,28(sp)
 1000890:	00812c23          	sw	s0,24(sp)
 1000894:	02010413          	add	s0,sp,32
 1000898:	fea42623          	sw	a0,-20(s0)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100089c:	010067b7          	lui	a5,0x1006
 10008a0:	5e078593          	add	a1,a5,1504 # 10065e0 <alt_dev_list>
 10008a4:	fec42503          	lw	a0,-20(s0)
 10008a8:	05c000ef          	jal	1000904 <alt_dev_llist_insert>
 10008ac:	00050793          	mv	a5,a0
}
 10008b0:	00078513          	mv	a0,a5
 10008b4:	01c12083          	lw	ra,28(sp)
 10008b8:	01812403          	lw	s0,24(sp)
 10008bc:	02010113          	add	sp,sp,32
 10008c0:	00008067          	ret

010008c4 <alt_get_errno>:
 10008c4:	ff010113          	add	sp,sp,-16
 10008c8:	00112623          	sw	ra,12(sp)
 10008cc:	00812423          	sw	s0,8(sp)
 10008d0:	01010413          	add	s0,sp,16
 10008d4:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 10008d8:	00078a63          	beqz	a5,10008ec <alt_get_errno+0x28>
 10008dc:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 10008e0:	000780e7          	jalr	a5
 10008e4:	00050793          	mv	a5,a0
 10008e8:	0080006f          	j	10008f0 <alt_get_errno+0x2c>
 10008ec:	fa418793          	add	a5,gp,-92 # 1006d7c <errno>
 10008f0:	00078513          	mv	a0,a5
 10008f4:	00c12083          	lw	ra,12(sp)
 10008f8:	00812403          	lw	s0,8(sp)
 10008fc:	01010113          	add	sp,sp,16
 1000900:	00008067          	ret

01000904 <alt_dev_llist_insert>:
{
 1000904:	fd010113          	add	sp,sp,-48
 1000908:	02112623          	sw	ra,44(sp)
 100090c:	02812423          	sw	s0,40(sp)
 1000910:	03010413          	add	s0,sp,48
 1000914:	fca42e23          	sw	a0,-36(s0)
 1000918:	fcb42c23          	sw	a1,-40(s0)
  if (!dev || !dev->name)
 100091c:	fdc42783          	lw	a5,-36(s0)
 1000920:	00078863          	beqz	a5,1000930 <alt_dev_llist_insert+0x2c>
 1000924:	fdc42783          	lw	a5,-36(s0)
 1000928:	0087a783          	lw	a5,8(a5)
 100092c:	00079e63          	bnez	a5,1000948 <alt_dev_llist_insert+0x44>
    ALT_ERRNO = EINVAL;
 1000930:	f95ff0ef          	jal	10008c4 <alt_get_errno>
 1000934:	00050713          	mv	a4,a0
 1000938:	01600793          	li	a5,22
 100093c:	00f72023          	sw	a5,0(a4)
    return -EINVAL;
 1000940:	fea00793          	li	a5,-22
 1000944:	0540006f          	j	1000998 <alt_dev_llist_insert+0x94>
  alt_llist_insert(list, &dev->llist);
 1000948:	fdc42783          	lw	a5,-36(s0)
 100094c:	fd842703          	lw	a4,-40(s0)
 1000950:	fee42423          	sw	a4,-24(s0)
 1000954:	fef42623          	sw	a5,-20(s0)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1000958:	fec42783          	lw	a5,-20(s0)
 100095c:	fe842703          	lw	a4,-24(s0)
 1000960:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
 1000964:	fe842783          	lw	a5,-24(s0)
 1000968:	0007a703          	lw	a4,0(a5)
 100096c:	fec42783          	lw	a5,-20(s0)
 1000970:	00e7a023          	sw	a4,0(a5)

  list->next->previous = entry;
 1000974:	fe842783          	lw	a5,-24(s0)
 1000978:	0007a783          	lw	a5,0(a5)
 100097c:	fec42703          	lw	a4,-20(s0)
 1000980:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
 1000984:	fe842783          	lw	a5,-24(s0)
 1000988:	fec42703          	lw	a4,-20(s0)
 100098c:	00e7a023          	sw	a4,0(a5)
}
 1000990:	00000013          	nop
  return 0;  
 1000994:	00000793          	li	a5,0
}
 1000998:	00078513          	mv	a0,a5
 100099c:	02c12083          	lw	ra,44(sp)
 10009a0:	02812403          	lw	s0,40(sp)
 10009a4:	03010113          	add	sp,sp,48
 10009a8:	00008067          	ret

010009ac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 10009ac:	fe010113          	add	sp,sp,-32
 10009b0:	00112e23          	sw	ra,28(sp)
 10009b4:	00812c23          	sw	s0,24(sp)
 10009b8:	02010413          	add	s0,sp,32
  constructor* ctor;

  for (ctor = __init_array_start; ctor < __init_array_end; ctor++)
 10009bc:	010067b7          	lui	a5,0x1006
 10009c0:	e5078793          	add	a5,a5,-432 # 1005e50 <__init_array_start>
 10009c4:	fef42623          	sw	a5,-20(s0)
 10009c8:	01c0006f          	j	10009e4 <_do_ctors+0x38>
        (*ctor) (); 
 10009cc:	fec42783          	lw	a5,-20(s0)
 10009d0:	0007a783          	lw	a5,0(a5)
 10009d4:	000780e7          	jalr	a5
  for (ctor = __init_array_start; ctor < __init_array_end; ctor++)
 10009d8:	fec42783          	lw	a5,-20(s0)
 10009dc:	00478793          	add	a5,a5,4
 10009e0:	fef42623          	sw	a5,-20(s0)
 10009e4:	fec42703          	lw	a4,-20(s0)
 10009e8:	010067b7          	lui	a5,0x1006
 10009ec:	e5878793          	add	a5,a5,-424 # 1005e58 <__fini_array_end>
 10009f0:	fcf76ee3          	bltu	a4,a5,10009cc <_do_ctors+0x20>
}
 10009f4:	00000013          	nop
 10009f8:	00000013          	nop
 10009fc:	01c12083          	lw	ra,28(sp)
 1000a00:	01812403          	lw	s0,24(sp)
 1000a04:	02010113          	add	sp,sp,32
 1000a08:	00008067          	ret

01000a0c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1000a0c:	fe010113          	add	sp,sp,-32
 1000a10:	00112e23          	sw	ra,28(sp)
 1000a14:	00812c23          	sw	s0,24(sp)
 1000a18:	02010413          	add	s0,sp,32
  destructor* dtor;

  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
 1000a1c:	010067b7          	lui	a5,0x1006
 1000a20:	e5478793          	add	a5,a5,-428 # 1005e54 <__init_array_start+0x4>
 1000a24:	fef42623          	sw	a5,-20(s0)
 1000a28:	01c0006f          	j	1000a44 <_do_dtors+0x38>
        (*dtor) (); 
 1000a2c:	fec42783          	lw	a5,-20(s0)
 1000a30:	0007a783          	lw	a5,0(a5)
 1000a34:	000780e7          	jalr	a5
  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
 1000a38:	fec42783          	lw	a5,-20(s0)
 1000a3c:	ffc78793          	add	a5,a5,-4
 1000a40:	fef42623          	sw	a5,-20(s0)
 1000a44:	fec42703          	lw	a4,-20(s0)
 1000a48:	010067b7          	lui	a5,0x1006
 1000a4c:	e5878793          	add	a5,a5,-424 # 1005e58 <__fini_array_end>
 1000a50:	fcf77ee3          	bgeu	a4,a5,1000a2c <_do_dtors+0x20>
}
 1000a54:	00000013          	nop
 1000a58:	00000013          	nop
 1000a5c:	01c12083          	lw	ra,28(sp)
 1000a60:	01812403          	lw	s0,24(sp)
 1000a64:	02010113          	add	sp,sp,32
 1000a68:	00008067          	ret

01000a6c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1000a6c:	ff010113          	add	sp,sp,-16
 1000a70:	00812623          	sw	s0,12(sp)
 1000a74:	01010413          	add	s0,sp,16
#if ALT_CPU_ICACHE_SIZE > 0
    __asm__ volatile("fence.i" ::: "memory");
#endif
}
 1000a78:	00000013          	nop
 1000a7c:	00c12403          	lw	s0,12(sp)
 1000a80:	01010113          	add	sp,sp,16
 1000a84:	00008067          	ret

01000a88 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1000a88:	fd010113          	add	sp,sp,-48
 1000a8c:	02112623          	sw	ra,44(sp)
 1000a90:	02812423          	sw	s0,40(sp)
 1000a94:	03010413          	add	s0,sp,48
 1000a98:	fca42e23          	sw	a0,-36(s0)
 1000a9c:	fcb42c23          	sw	a1,-40(s0)
 1000aa0:	fcc42a23          	sw	a2,-44(s0)
 1000aa4:	fcd42823          	sw	a3,-48(s0)
  int old;

  old = open (name, flags, mode);
 1000aa8:	fd042603          	lw	a2,-48(s0)
 1000aac:	fd442583          	lw	a1,-44(s0)
 1000ab0:	fd842503          	lw	a0,-40(s0)
 1000ab4:	45c010ef          	jal	1001f10 <open>
 1000ab8:	fea42623          	sw	a0,-20(s0)

  if (old >= 0)
 1000abc:	fec42783          	lw	a5,-20(s0)
 1000ac0:	0807c863          	bltz	a5,1000b50 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 1000ac4:	010067b7          	lui	a5,0x1006
 1000ac8:	f2478693          	add	a3,a5,-220 # 1005f24 <alt_fd_list>
 1000acc:	fec42703          	lw	a4,-20(s0)
 1000ad0:	00070793          	mv	a5,a4
 1000ad4:	00179793          	sll	a5,a5,0x1
 1000ad8:	00e787b3          	add	a5,a5,a4
 1000adc:	00279793          	sll	a5,a5,0x2
 1000ae0:	00f687b3          	add	a5,a3,a5
 1000ae4:	0007a703          	lw	a4,0(a5)
 1000ae8:	fdc42783          	lw	a5,-36(s0)
 1000aec:	00e7a023          	sw	a4,0(a5)
    fd->priv     = alt_fd_list[old].priv;
 1000af0:	010067b7          	lui	a5,0x1006
 1000af4:	f2478693          	add	a3,a5,-220 # 1005f24 <alt_fd_list>
 1000af8:	fec42703          	lw	a4,-20(s0)
 1000afc:	00070793          	mv	a5,a4
 1000b00:	00179793          	sll	a5,a5,0x1
 1000b04:	00e787b3          	add	a5,a5,a4
 1000b08:	00279793          	sll	a5,a5,0x2
 1000b0c:	00f687b3          	add	a5,a3,a5
 1000b10:	0047a703          	lw	a4,4(a5)
 1000b14:	fdc42783          	lw	a5,-36(s0)
 1000b18:	00e7a223          	sw	a4,4(a5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1000b1c:	010067b7          	lui	a5,0x1006
 1000b20:	f2478693          	add	a3,a5,-220 # 1005f24 <alt_fd_list>
 1000b24:	fec42703          	lw	a4,-20(s0)
 1000b28:	00070793          	mv	a5,a4
 1000b2c:	00179793          	sll	a5,a5,0x1
 1000b30:	00e787b3          	add	a5,a5,a4
 1000b34:	00279793          	sll	a5,a5,0x2
 1000b38:	00f687b3          	add	a5,a3,a5
 1000b3c:	0087a703          	lw	a4,8(a5)
 1000b40:	fdc42783          	lw	a5,-36(s0)
 1000b44:	00e7a423          	sw	a4,8(a5)

    alt_release_fd (old);
 1000b48:	fec42503          	lw	a0,-20(s0)
 1000b4c:	114000ef          	jal	1000c60 <alt_release_fd>
  }
} 
 1000b50:	00000013          	nop
 1000b54:	02c12083          	lw	ra,44(sp)
 1000b58:	02812403          	lw	s0,40(sp)
 1000b5c:	03010113          	add	sp,sp,48
 1000b60:	00008067          	ret

01000b64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1000b64:	fe010113          	add	sp,sp,-32
 1000b68:	00112e23          	sw	ra,28(sp)
 1000b6c:	00812c23          	sw	s0,24(sp)
 1000b70:	02010413          	add	s0,sp,32
 1000b74:	fea42623          	sw	a0,-20(s0)
 1000b78:	feb42423          	sw	a1,-24(s0)
 1000b7c:	fec42223          	sw	a2,-28(s0)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1000b80:	1ff00693          	li	a3,511
 1000b84:	00100613          	li	a2,1
 1000b88:	fec42583          	lw	a1,-20(s0)
 1000b8c:	010067b7          	lui	a5,0x1006
 1000b90:	f3078513          	add	a0,a5,-208 # 1005f30 <alt_fd_list+0xc>
 1000b94:	ef5ff0ef          	jal	1000a88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1000b98:	1ff00693          	li	a3,511
 1000b9c:	00000613          	li	a2,0
 1000ba0:	fe842583          	lw	a1,-24(s0)
 1000ba4:	010067b7          	lui	a5,0x1006
 1000ba8:	f2478513          	add	a0,a5,-220 # 1005f24 <alt_fd_list>
 1000bac:	eddff0ef          	jal	1000a88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1000bb0:	1ff00693          	li	a3,511
 1000bb4:	00100613          	li	a2,1
 1000bb8:	fe442583          	lw	a1,-28(s0)
 1000bbc:	010067b7          	lui	a5,0x1006
 1000bc0:	f3c78513          	add	a0,a5,-196 # 1005f3c <alt_fd_list+0x18>
 1000bc4:	ec5ff0ef          	jal	1000a88 <alt_open_fd>

#ifndef USE_PICOLIBC
  /* Allocate a stream buffer if it is not yet done.
   * And use no buffering mode by default.
   */
  if ((FILE *)stdin->_bf._base == NULL)
 1000bc8:	8201a783          	lw	a5,-2016(gp) # 10065f8 <_impure_ptr>
 1000bcc:	0047a783          	lw	a5,4(a5)
 1000bd0:	0107a783          	lw	a5,16(a5)
 1000bd4:	02079063          	bnez	a5,1000bf4 <alt_io_redirect+0x90>
  {
    setvbuf(stdin, NULL, _IONBF, 0);
 1000bd8:	8201a783          	lw	a5,-2016(gp) # 10065f8 <_impure_ptr>
 1000bdc:	0047a783          	lw	a5,4(a5)
 1000be0:	00000693          	li	a3,0
 1000be4:	00200613          	li	a2,2
 1000be8:	00000593          	li	a1,0
 1000bec:	00078513          	mv	a0,a5
 1000bf0:	499000ef          	jal	1001888 <setvbuf>
  }

  if ((FILE *)stdout->_bf._base == NULL)
 1000bf4:	8201a783          	lw	a5,-2016(gp) # 10065f8 <_impure_ptr>
 1000bf8:	0087a783          	lw	a5,8(a5)
 1000bfc:	0107a783          	lw	a5,16(a5)
 1000c00:	02079063          	bnez	a5,1000c20 <alt_io_redirect+0xbc>
  {
    setvbuf(stdout, NULL, _IONBF, 0);
 1000c04:	8201a783          	lw	a5,-2016(gp) # 10065f8 <_impure_ptr>
 1000c08:	0087a783          	lw	a5,8(a5)
 1000c0c:	00000693          	li	a3,0
 1000c10:	00200613          	li	a2,2
 1000c14:	00000593          	li	a1,0
 1000c18:	00078513          	mv	a0,a5
 1000c1c:	46d000ef          	jal	1001888 <setvbuf>
  }

  if ((FILE *)stderr->_bf._base == NULL)
 1000c20:	8201a783          	lw	a5,-2016(gp) # 10065f8 <_impure_ptr>
 1000c24:	00c7a783          	lw	a5,12(a5)
 1000c28:	0107a783          	lw	a5,16(a5)
 1000c2c:	02079063          	bnez	a5,1000c4c <alt_io_redirect+0xe8>
  {
    setvbuf(stderr, NULL, _IONBF, 0);
 1000c30:	8201a783          	lw	a5,-2016(gp) # 10065f8 <_impure_ptr>
 1000c34:	00c7a783          	lw	a5,12(a5)
 1000c38:	00000693          	li	a3,0
 1000c3c:	00200613          	li	a2,2
 1000c40:	00000593          	li	a1,0
 1000c44:	00078513          	mv	a0,a5
 1000c48:	441000ef          	jal	1001888 <setvbuf>
  }
#endif
}  
 1000c4c:	00000013          	nop
 1000c50:	01c12083          	lw	ra,28(sp)
 1000c54:	01812403          	lw	s0,24(sp)
 1000c58:	02010113          	add	sp,sp,32
 1000c5c:	00008067          	ret

01000c60 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1000c60:	fe010113          	add	sp,sp,-32
 1000c64:	00812e23          	sw	s0,28(sp)
 1000c68:	02010413          	add	s0,sp,32
 1000c6c:	fea42623          	sw	a0,-20(s0)
  if (fd > 2)
 1000c70:	fec42703          	lw	a4,-20(s0)
 1000c74:	00200793          	li	a5,2
 1000c78:	04e7d663          	bge	a5,a4,1000cc4 <alt_release_fd+0x64>
  {
    alt_fd_list[fd].fd_flags = 0;
 1000c7c:	010067b7          	lui	a5,0x1006
 1000c80:	f2478693          	add	a3,a5,-220 # 1005f24 <alt_fd_list>
 1000c84:	fec42703          	lw	a4,-20(s0)
 1000c88:	00070793          	mv	a5,a4
 1000c8c:	00179793          	sll	a5,a5,0x1
 1000c90:	00e787b3          	add	a5,a5,a4
 1000c94:	00279793          	sll	a5,a5,0x2
 1000c98:	00f687b3          	add	a5,a3,a5
 1000c9c:	0007a423          	sw	zero,8(a5)
    alt_fd_list[fd].dev      = 0;
 1000ca0:	010067b7          	lui	a5,0x1006
 1000ca4:	f2478693          	add	a3,a5,-220 # 1005f24 <alt_fd_list>
 1000ca8:	fec42703          	lw	a4,-20(s0)
 1000cac:	00070793          	mv	a5,a4
 1000cb0:	00179793          	sll	a5,a5,0x1
 1000cb4:	00e787b3          	add	a5,a5,a4
 1000cb8:	00279793          	sll	a5,a5,0x2
 1000cbc:	00f687b3          	add	a5,a3,a5
 1000cc0:	0007a023          	sw	zero,0(a5)
  }
}
 1000cc4:	00000013          	nop
 1000cc8:	01c12403          	lw	s0,28(sp)
 1000ccc:	02010113          	add	sp,sp,32
 1000cd0:	00008067          	ret

01000cd4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1000cd4:	fd010113          	add	sp,sp,-48
 1000cd8:	02812623          	sw	s0,44(sp)
 1000cdc:	03010413          	add	s0,sp,48
 1000ce0:	fca42e23          	sw	a0,-36(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 1000ce4:	00800793          	li	a5,8
 1000ce8:	3007b7f3          	csrrc	a5,mstatus,a5
 1000cec:	fef42623          	sw	a5,-20(s0)
    return context;
 1000cf0:	fec42783          	lw	a5,-20(s0)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1000cf4:	fef42023          	sw	a5,-32(s0)
  alt_llist_remove (&alarm->llist);
 1000cf8:	fdc42783          	lw	a5,-36(s0)
 1000cfc:	fef42423          	sw	a5,-24(s0)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1000d00:	fe842783          	lw	a5,-24(s0)
 1000d04:	0007a783          	lw	a5,0(a5)
 1000d08:	fe842703          	lw	a4,-24(s0)
 1000d0c:	00472703          	lw	a4,4(a4)
 1000d10:	00e7a223          	sw	a4,4(a5)
  entry->previous->next = entry->next;
 1000d14:	fe842783          	lw	a5,-24(s0)
 1000d18:	0047a783          	lw	a5,4(a5)
 1000d1c:	fe842703          	lw	a4,-24(s0)
 1000d20:	00072703          	lw	a4,0(a4)
 1000d24:	00e7a023          	sw	a4,0(a5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1000d28:	fe842783          	lw	a5,-24(s0)
 1000d2c:	fe842703          	lw	a4,-24(s0)
 1000d30:	00e7a223          	sw	a4,4(a5)
  entry->next     = entry;
 1000d34:	fe842783          	lw	a5,-24(s0)
 1000d38:	fe842703          	lw	a4,-24(s0)
 1000d3c:	00e7a023          	sw	a4,0(a5)
} 
 1000d40:	00000013          	nop
 1000d44:	fe042783          	lw	a5,-32(s0)
 1000d48:	fef42223          	sw	a5,-28(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 1000d4c:	fe442783          	lw	a5,-28(s0)
 1000d50:	0087f793          	and	a5,a5,8
 1000d54:	3007a073          	csrs	mstatus,a5
}
 1000d58:	00000013          	nop
  alt_irq_enable_all (irq_context);
}
 1000d5c:	00000013          	nop
 1000d60:	02c12403          	lw	s0,44(sp)
 1000d64:	03010113          	add	sp,sp,48
 1000d68:	00008067          	ret

01000d6c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1000d6c:	fe010113          	add	sp,sp,-32
 1000d70:	00112e23          	sw	ra,28(sp)
 1000d74:	00812c23          	sw	s0,24(sp)
 1000d78:	01212a23          	sw	s2,20(sp)
 1000d7c:	01312823          	sw	s3,16(sp)
 1000d80:	02010413          	add	s0,sp,32
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1000d84:	81818793          	add	a5,gp,-2024 # 10065f0 <alt_alarm_list>
 1000d88:	0007a783          	lw	a5,0(a5)
 1000d8c:	fef42223          	sw	a5,-28(s0)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1000d90:	f901a703          	lw	a4,-112(gp) # 1006d68 <_alt_nticks>
 1000d94:	f941a783          	lw	a5,-108(gp) # 1006d6c <_alt_nticks+0x4>
 1000d98:	00100513          	li	a0,1
 1000d9c:	00000593          	li	a1,0
 1000da0:	00a70633          	add	a2,a4,a0
 1000da4:	00060813          	mv	a6,a2
 1000da8:	00e83833          	sltu	a6,a6,a4
 1000dac:	00b786b3          	add	a3,a5,a1
 1000db0:	00d807b3          	add	a5,a6,a3
 1000db4:	00078693          	mv	a3,a5
 1000db8:	00060713          	mv	a4,a2
 1000dbc:	00068793          	mv	a5,a3
 1000dc0:	f8e1a823          	sw	a4,-112(gp) # 1006d68 <_alt_nticks>
 1000dc4:	f8f1aa23          	sw	a5,-108(gp) # 1006d6c <_alt_nticks+0x4>
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1000dc8:	0c40006f          	j	1000e8c <alt_tick+0x120>
  {
    next = (alt_alarm*) alarm->llist.next;
 1000dcc:	fe442783          	lw	a5,-28(s0)
 1000dd0:	0007a783          	lw	a5,0(a5)
 1000dd4:	fef42423          	sw	a5,-24(s0)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
 1000dd8:	fe442783          	lw	a5,-28(s0)
 1000ddc:	0087a603          	lw	a2,8(a5)
 1000de0:	00c7a683          	lw	a3,12(a5)
 1000de4:	f901a703          	lw	a4,-112(gp) # 1006d68 <_alt_nticks>
 1000de8:	f941a783          	lw	a5,-108(gp) # 1006d6c <_alt_nticks+0x4>
 1000dec:	00068513          	mv	a0,a3
 1000df0:	00078593          	mv	a1,a5
 1000df4:	08a5e863          	bltu	a1,a0,1000e84 <alt_tick+0x118>
 1000df8:	00068513          	mv	a0,a3
 1000dfc:	00078593          	mv	a1,a5
 1000e00:	00b51863          	bne	a0,a1,1000e10 <alt_tick+0xa4>
 1000e04:	00060693          	mv	a3,a2
 1000e08:	00070793          	mv	a5,a4
 1000e0c:	06d7ec63          	bltu	a5,a3,1000e84 <alt_tick+0x118>
    {
      next_callback = alarm->callback (alarm->context);
 1000e10:	fe442783          	lw	a5,-28(s0)
 1000e14:	0107a783          	lw	a5,16(a5)
 1000e18:	fe442703          	lw	a4,-28(s0)
 1000e1c:	01472703          	lw	a4,20(a4)
 1000e20:	00070513          	mv	a0,a4
 1000e24:	000780e7          	jalr	a5
 1000e28:	fea42623          	sw	a0,-20(s0)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1000e2c:	fec42783          	lw	a5,-20(s0)
 1000e30:	00079863          	bnez	a5,1000e40 <alt_tick+0xd4>
      {
        alt_alarm_stop (alarm);
 1000e34:	fe442503          	lw	a0,-28(s0)
 1000e38:	e9dff0ef          	jal	1000cd4 <alt_alarm_stop>
 1000e3c:	0480006f          	j	1000e84 <alt_tick+0x118>
      }
      else
      {
        alarm->time += next_callback;
 1000e40:	fe442783          	lw	a5,-28(s0)
 1000e44:	0087a703          	lw	a4,8(a5)
 1000e48:	00c7a783          	lw	a5,12(a5)
 1000e4c:	fec42683          	lw	a3,-20(s0)
 1000e50:	00068913          	mv	s2,a3
 1000e54:	00000993          	li	s3,0
 1000e58:	01270633          	add	a2,a4,s2
 1000e5c:	00060593          	mv	a1,a2
 1000e60:	00e5b5b3          	sltu	a1,a1,a4
 1000e64:	013786b3          	add	a3,a5,s3
 1000e68:	00d587b3          	add	a5,a1,a3
 1000e6c:	00078693          	mv	a3,a5
 1000e70:	00060713          	mv	a4,a2
 1000e74:	00068793          	mv	a5,a3
 1000e78:	fe442683          	lw	a3,-28(s0)
 1000e7c:	00e6a423          	sw	a4,8(a3)
 1000e80:	00f6a623          	sw	a5,12(a3)
      }
    }
    alarm = next;
 1000e84:	fe842783          	lw	a5,-24(s0)
 1000e88:	fef42223          	sw	a5,-28(s0)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 1000e8c:	fe442703          	lw	a4,-28(s0)
 1000e90:	81818793          	add	a5,gp,-2024 # 10065f0 <alt_alarm_list>
 1000e94:	f2f71ce3          	bne	a4,a5,1000dcc <alt_tick+0x60>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1000e98:	00000013          	nop
}
 1000e9c:	00000013          	nop
 1000ea0:	01c12083          	lw	ra,28(sp)
 1000ea4:	01812403          	lw	s0,24(sp)
 1000ea8:	01412903          	lw	s2,20(sp)
 1000eac:	01012983          	lw	s3,16(sp)
 1000eb0:	02010113          	add	sp,sp,32
 1000eb4:	00008067          	ret

01000eb8 <intel_niosv_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the mie
 * register so that all possible IRQs are disabled.
 */
void intel_niosv_irq_init(void) 
{
 1000eb8:	ff010113          	add	sp,sp,-16
 1000ebc:	00812623          	sw	s0,12(sp)
 1000ec0:	01010413          	add	s0,sp,16
#if ALT_HAS_IRQ_SUPPORT
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, NIOSV_MIE_MASK);
 1000ec4:	fff00793          	li	a5,-1
 1000ec8:	3047b073          	csrc	mie,a5
    NIOSV_WRITE_CSR(NIOSV_MTVEC_CSR, (alt_u32) &VIC_VECTOR_TABLE | ALT_CPU_INT_MODE_VIC);
#endif /* ALT_CPU_INT_MODE == ALT_CPU_INT_MODE_VIC */
#endif /* ALT_CPU_INT_MODE */

#endif
}
 1000ecc:	00000013          	nop
 1000ed0:	00c12403          	lw	s0,12(sp)
 1000ed4:	01010113          	add	sp,sp,16
 1000ed8:	00008067          	ret

01000edc <alt_timestamp_start>:
#define INTEL_NIOSV_TIMER_DEVICE_TYPE 2

#if (ALT_TIMESTAMP_CLK_TIMER_DEVICE_TYPE == INTEL_NIOSV_TIMER_DEVICE_TYPE)
alt_u64 alt_niosv_timestamp_offset = 0;

int alt_timestamp_start() {
 1000edc:	ff010113          	add	sp,sp,-16
 1000ee0:	00112623          	sw	ra,12(sp)
 1000ee4:	00812423          	sw	s0,8(sp)
 1000ee8:	01010413          	add	s0,sp,16
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval);

extern alt_u64 alt_niosv_timestamp_offset;

static ALT_INLINE int ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_start() {
    alt_niosv_timestamp_offset = alt_niosv_mtime_get();
 1000eec:	0a0000ef          	jal	1000f8c <alt_niosv_mtime_get>
 1000ef0:	00050713          	mv	a4,a0
 1000ef4:	00058793          	mv	a5,a1
 1000ef8:	f8e1ac23          	sw	a4,-104(gp) # 1006d70 <alt_niosv_timestamp_offset>
 1000efc:	f8f1ae23          	sw	a5,-100(gp) # 1006d74 <alt_niosv_timestamp_offset+0x4>
    return 0;
 1000f00:	00000793          	li	a5,0
    return alt_niosv_timer_timestamp_start();
}
 1000f04:	00078513          	mv	a0,a5
 1000f08:	00c12083          	lw	ra,12(sp)
 1000f0c:	00812403          	lw	s0,8(sp)
 1000f10:	01010113          	add	sp,sp,16
 1000f14:	00008067          	ret

01000f18 <alt_timestamp>:

alt_timestamp_type alt_timestamp() {
 1000f18:	ff010113          	add	sp,sp,-16
 1000f1c:	00112623          	sw	ra,12(sp)
 1000f20:	00812423          	sw	s0,8(sp)
 1000f24:	01010413          	add	s0,sp,16
}

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp() {
    return alt_niosv_mtime_get() - alt_niosv_timestamp_offset;
 1000f28:	064000ef          	jal	1000f8c <alt_niosv_mtime_get>
 1000f2c:	00050613          	mv	a2,a0
 1000f30:	00058693          	mv	a3,a1
 1000f34:	f981a503          	lw	a0,-104(gp) # 1006d70 <alt_niosv_timestamp_offset>
 1000f38:	f9c1a583          	lw	a1,-100(gp) # 1006d74 <alt_niosv_timestamp_offset+0x4>
 1000f3c:	40a60733          	sub	a4,a2,a0
 1000f40:	00070813          	mv	a6,a4
 1000f44:	01063833          	sltu	a6,a2,a6
 1000f48:	40b687b3          	sub	a5,a3,a1
 1000f4c:	410786b3          	sub	a3,a5,a6
 1000f50:	00068793          	mv	a5,a3
    return alt_niosv_timer_timestamp();
}
 1000f54:	00070513          	mv	a0,a4
 1000f58:	00078593          	mv	a1,a5
 1000f5c:	00c12083          	lw	ra,12(sp)
 1000f60:	00812403          	lw	s0,8(sp)
 1000f64:	01010113          	add	sp,sp,16
 1000f68:	00008067          	ret

01000f6c <alt_timestamp_freq>:

alt_u32 alt_timestamp_freq() {
 1000f6c:	ff010113          	add	sp,sp,-16
 1000f70:	00812623          	sw	s0,12(sp)
 1000f74:	01010413          	add	s0,sp,16
}

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_freq() {
    return ALT_CPU_CPU_FREQ;
 1000f78:	00000793          	li	a5,0
    return alt_niosv_timer_timestamp_freq();
}
 1000f7c:	00078513          	mv	a0,a5
 1000f80:	00c12403          	lw	s0,12(sp)
 1000f84:	01010113          	add	sp,sp,16
 1000f88:	00008067          	ret

01000f8c <alt_niosv_mtime_get>:
#endif

alt_u64 alt_niosv_mtime_get() {
 1000f8c:	fe010113          	add	sp,sp,-32
 1000f90:	00812e23          	sw	s0,28(sp)
 1000f94:	02010413          	add	s0,sp,32
    alt_u32 lowbits;
    alt_u32 highbits;

    // Guard against rollover while acquiring each word
    do {
        highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4));
 1000f98:	02031337          	lui	t1,0x2031
 1000f9c:	00430313          	add	t1,t1,4 # 2031004 <__alt_mem_onchip_memory2_0+0x9004>
 1000fa0:	00032303          	lw	t1,0(t1)
 1000fa4:	fe642423          	sw	t1,-24(s0)
        lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIME_ADDR);
 1000fa8:	02031337          	lui	t1,0x2031
 1000fac:	00032303          	lw	t1,0(t1) # 2031000 <__alt_mem_onchip_memory2_0+0x9000>
 1000fb0:	fe642623          	sw	t1,-20(s0)
    } while (ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4)) != highbits);
 1000fb4:	02031337          	lui	t1,0x2031
 1000fb8:	00430313          	add	t1,t1,4 # 2031004 <__alt_mem_onchip_memory2_0+0x9004>
 1000fbc:	00032303          	lw	t1,0(t1)
 1000fc0:	fe842e03          	lw	t3,-24(s0)
 1000fc4:	fc6e1ae3          	bne	t3,t1,1000f98 <alt_niosv_mtime_get+0xc>

    return (((alt_u64)highbits) << 32) | lowbits;
 1000fc8:	fe842303          	lw	t1,-24(s0)
 1000fcc:	00030813          	mv	a6,t1
 1000fd0:	00000893          	li	a7,0
 1000fd4:	00081793          	sll	a5,a6,0x0
 1000fd8:	00000713          	li	a4,0
 1000fdc:	fec42803          	lw	a6,-20(s0)
 1000fe0:	00080613          	mv	a2,a6
 1000fe4:	00000693          	li	a3,0
 1000fe8:	00c76533          	or	a0,a4,a2
 1000fec:	00d7e5b3          	or	a1,a5,a3
 1000ff0:	00050713          	mv	a4,a0
 1000ff4:	00058793          	mv	a5,a1
}
 1000ff8:	00070513          	mv	a0,a4
 1000ffc:	00078593          	mv	a1,a5
 1001000:	01c12403          	lw	s0,28(sp)
 1001004:	02010113          	add	sp,sp,32
 1001008:	00008067          	ret

0100100c <alt_niosv_mtimecmp_set>:

void alt_niosv_mtimecmp_set(alt_u64 time) {
 100100c:	fd010113          	add	sp,sp,-48
 1001010:	02812623          	sw	s0,44(sp)
 1001014:	03010413          	add	s0,sp,48
 1001018:	fca42c23          	sw	a0,-40(s0)
 100101c:	fcb42e23          	sw	a1,-36(s0)
    NIOSV_READ_CSR(NIOSV_MHARTID_CSR, mhartid_val);
 1001020:	f14026f3          	csrr	a3,mhartid
 1001024:	fed42623          	sw	a3,-20(s0)
    return mhartid_val;
 1001028:	fec42603          	lw	a2,-20(s0)
    return (alt_u32 *)(NIOSV_MTIMECMP_ADDR + (8 * alt_niosv_read_mhartid()));
 100102c:	004066b7          	lui	a3,0x406
 1001030:	20168693          	add	a3,a3,513 # 406201 <__reset-0xbf9dff>
 1001034:	00d606b3          	add	a3,a2,a3
 1001038:	00369693          	sll	a3,a3,0x3
    volatile alt_u32 *const mtimecmp_addr = alt_niosv_get_mtimecmp_addr();
 100103c:	fed42423          	sw	a3,-24(s0)

    // Make sure to set the high word to a max value first to prevent triggering inadvertently
    ALT_VOLATILE_ACCESS((alt_u32 *)(mtimecmp_addr + 1)) = 0xFFFFFFFF;
 1001040:	fe842683          	lw	a3,-24(s0)
 1001044:	00468693          	add	a3,a3,4
 1001048:	fff00613          	li	a2,-1
 100104c:	00c6a023          	sw	a2,0(a3)
    ALT_VOLATILE_ACCESS(mtimecmp_addr) = (alt_u32)time;
 1001050:	fd842603          	lw	a2,-40(s0)
 1001054:	fe842683          	lw	a3,-24(s0)
 1001058:	00c6a023          	sw	a2,0(a3)
    ALT_VOLATILE_ACCESS((alt_u32 *)(mtimecmp_addr + 1)) = (alt_u32)(time >> 32);
 100105c:	fdc42683          	lw	a3,-36(s0)
 1001060:	0006d713          	srl	a4,a3,0x0
 1001064:	00000793          	li	a5,0
 1001068:	fe842683          	lw	a3,-24(s0)
 100106c:	00468693          	add	a3,a3,4
 1001070:	00070793          	mv	a5,a4
 1001074:	00f6a023          	sw	a5,0(a3)
}
 1001078:	00000013          	nop
 100107c:	02c12403          	lw	s0,44(sp)
 1001080:	03010113          	add	sp,sp,48
 1001084:	00008067          	ret

01001088 <alt_niosv_mtimecmp_get>:

alt_u64 alt_niosv_mtimecmp_get() {
 1001088:	fe010113          	add	sp,sp,-32
 100108c:	00812e23          	sw	s0,28(sp)
 1001090:	02010413          	add	s0,sp,32
    NIOSV_READ_CSR(NIOSV_MHARTID_CSR, mhartid_val);
 1001094:	f1402373          	csrr	t1,mhartid
 1001098:	fe642623          	sw	t1,-20(s0)
    return mhartid_val;
 100109c:	fec42e03          	lw	t3,-20(s0)
    return (alt_u32 *)(NIOSV_MTIMECMP_ADDR + (8 * alt_niosv_read_mhartid()));
 10010a0:	00406337          	lui	t1,0x406
 10010a4:	20130313          	add	t1,t1,513 # 406201 <__reset-0xbf9dff>
 10010a8:	006e0333          	add	t1,t3,t1
 10010ac:	00331313          	sll	t1,t1,0x3
    volatile alt_u32 *const mtimecmp_addr = alt_niosv_get_mtimecmp_addr();
 10010b0:	fe642023          	sw	t1,-32(s0)

    alt_u32 lowbits = ALT_VOLATILE_ACCESS(mtimecmp_addr);
 10010b4:	fe042303          	lw	t1,-32(s0)
 10010b8:	00032303          	lw	t1,0(t1)
 10010bc:	fe642223          	sw	t1,-28(s0)
    alt_u32 highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(mtimecmp_addr + 1));
 10010c0:	fe042303          	lw	t1,-32(s0)
 10010c4:	00430313          	add	t1,t1,4
 10010c8:	00032303          	lw	t1,0(t1)
 10010cc:	fe642423          	sw	t1,-24(s0)
    return (((alt_u64)highbits) << 32) | lowbits;
 10010d0:	fe842303          	lw	t1,-24(s0)
 10010d4:	00030813          	mv	a6,t1
 10010d8:	00000893          	li	a7,0
 10010dc:	00081793          	sll	a5,a6,0x0
 10010e0:	00000713          	li	a4,0
 10010e4:	fe442803          	lw	a6,-28(s0)
 10010e8:	00080613          	mv	a2,a6
 10010ec:	00000693          	li	a3,0
 10010f0:	00c76533          	or	a0,a4,a2
 10010f4:	00d7e5b3          	or	a1,a5,a3
 10010f8:	00050713          	mv	a4,a0
 10010fc:	00058793          	mv	a5,a1
}
 1001100:	00070513          	mv	a0,a4
 1001104:	00078593          	mv	a1,a5
 1001108:	01c12403          	lw	s0,28(sp)
 100110c:	02010113          	add	sp,sp,32
 1001110:	00008067          	ret

01001114 <alt_niosv_timer_sc_isr>:
// Let's the OS port handles the machine timer configuration and interrupt if
// the OS port has it (ex: FreeRTOS).
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {}
void alt_niosv_mtimecmp_interrupt_init() {}
#else
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {
 1001114:	fc010113          	add	sp,sp,-64
 1001118:	02112e23          	sw	ra,60(sp)
 100111c:	02812c23          	sw	s0,56(sp)
 1001120:	04010413          	add	s0,sp,64
 1001124:	fca42623          	sw	a0,-52(s0)
 1001128:	fcb42423          	sw	a1,-56(s0)
 100112c:	fcc42223          	sw	a2,-60(s0)
    // Schedule the next interrupt.  This is done first since who knows how long
    // the following code takes, and the contract is ticks per second, irrespective
    // of how long a given clock tick may take.

    alt_u64 curr_time = alt_niosv_mtime_get();
 1001130:	e5dff0ef          	jal	1000f8c <alt_niosv_mtime_get>
 1001134:	fea42423          	sw	a0,-24(s0)
 1001138:	feb42623          	sw	a1,-20(s0)
    alt_niosv_mtimecmp_set(curr_time + MTIMECMP_DELTA_AMT);
 100113c:	fe842503          	lw	a0,-24(s0)
 1001140:	fec42583          	lw	a1,-20(s0)
 1001144:	ec9ff0ef          	jal	100100c <alt_niosv_mtimecmp_set>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 1001148:	00800793          	li	a5,8
 100114c:	3007b7f3          	csrrc	a5,mstatus,a5
 1001150:	fef42223          	sw	a5,-28(s0)
    return context;
 1001154:	fe442783          	lw	a5,-28(s0)

    /* 
    * Notify the system of a clock tick. disable interrupts 
    * during this time to safely support ISR preemption
    */
    alt_irq_context cpu_sr = alt_irq_disable_all();
 1001158:	fcf42e23          	sw	a5,-36(s0)
    alt_tick();
 100115c:	c11ff0ef          	jal	1000d6c <alt_tick>
 1001160:	fdc42783          	lw	a5,-36(s0)
 1001164:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 1001168:	fe042783          	lw	a5,-32(s0)
 100116c:	0087f793          	and	a5,a5,8
 1001170:	3007a073          	csrs	mstatus,a5
}
 1001174:	00000013          	nop
    alt_irq_enable_all(cpu_sr);
}
 1001178:	00000013          	nop
 100117c:	03c12083          	lw	ra,60(sp)
 1001180:	03812403          	lw	s0,56(sp)
 1001184:	04010113          	add	sp,sp,64
 1001188:	00008067          	ret

0100118c <alt_niosv_mtimecmp_interrupt_init>:

void alt_niosv_mtimecmp_interrupt_init() {
 100118c:	fe010113          	add	sp,sp,-32
 1001190:	00112e23          	sw	ra,28(sp)
 1001194:	00812c23          	sw	s0,24(sp)
 1001198:	02010413          	add	s0,sp,32
    alt_u64 curr_time = alt_niosv_mtime_get();
 100119c:	df1ff0ef          	jal	1000f8c <alt_niosv_mtime_get>
 10011a0:	fea42423          	sw	a0,-24(s0)
 10011a4:	feb42623          	sw	a1,-20(s0)
    alt_niosv_mtimecmp_set(curr_time + MTIMECMP_DELTA_AMT);
 10011a8:	fe842503          	lw	a0,-24(s0)
 10011ac:	fec42583          	lw	a1,-20(s0)
 10011b0:	e5dff0ef          	jal	100100c <alt_niosv_mtimecmp_set>
    NIOSV_SET_CSR(NIOSV_MIE_CSR, (0x1 << NIOSV_TIMER_IRQ));
 10011b4:	08000793          	li	a5,128
 10011b8:	3047a073          	csrs	mie,a5
}
 10011bc:	00000013          	nop
    alt_niosv_enable_timer_interrupt();
}
 10011c0:	00000013          	nop
 10011c4:	01c12083          	lw	ra,28(sp)
 10011c8:	01812403          	lw	s0,24(sp)
 10011cc:	02010113          	add	sp,sp,32
 10011d0:	00008067          	ret

010011d4 <atexit>:
 10011d4:	00050593          	mv	a1,a0
 10011d8:	00000693          	li	a3,0
 10011dc:	00000613          	li	a2,0
 10011e0:	00000513          	li	a0,0
 10011e4:	6dd0006f          	j	10020c0 <__register_exitproc>

010011e8 <exit>:
 10011e8:	ff010113          	add	sp,sp,-16
 10011ec:	00000593          	li	a1,0
 10011f0:	00812423          	sw	s0,8(sp)
 10011f4:	00112623          	sw	ra,12(sp)
 10011f8:	00050413          	mv	s0,a0
 10011fc:	7a9000ef          	jal	10021a4 <__call_exitprocs>
 1001200:	fa01a783          	lw	a5,-96(gp) # 1006d78 <__stdio_exit_handler>
 1001204:	00078463          	beqz	a5,100120c <exit+0x24>
 1001208:	000780e7          	jalr	a5
 100120c:	00040513          	mv	a0,s0
 1001210:	7f0030ef          	jal	1004a00 <_exit>

01001214 <stdio_exit_handler>:
 1001214:	00005617          	auipc	a2,0x5
 1001218:	e9060613          	add	a2,a2,-368 # 10060a4 <__sglue>
 100121c:	00002597          	auipc	a1,0x2
 1001220:	d1c58593          	add	a1,a1,-740 # 1002f38 <_fclose_r>
 1001224:	00005517          	auipc	a0,0x5
 1001228:	e8c50513          	add	a0,a0,-372 # 10060b0 <_impure_data>
 100122c:	4680006f          	j	1001694 <_fwalk_sglue>

01001230 <cleanup_stdio>:
 1001230:	00452583          	lw	a1,4(a0)
 1001234:	ff010113          	add	sp,sp,-16
 1001238:	00812423          	sw	s0,8(sp)
 100123c:	00112623          	sw	ra,12(sp)
 1001240:	05c18793          	add	a5,gp,92 # 1006e34 <__sf>
 1001244:	00050413          	mv	s0,a0
 1001248:	00f58463          	beq	a1,a5,1001250 <cleanup_stdio+0x20>
 100124c:	4ed010ef          	jal	1002f38 <_fclose_r>
 1001250:	00842583          	lw	a1,8(s0)
 1001254:	0c418793          	add	a5,gp,196 # 1006e9c <__sf+0x68>
 1001258:	00f58663          	beq	a1,a5,1001264 <cleanup_stdio+0x34>
 100125c:	00040513          	mv	a0,s0
 1001260:	4d9010ef          	jal	1002f38 <_fclose_r>
 1001264:	00c42583          	lw	a1,12(s0)
 1001268:	12c18793          	add	a5,gp,300 # 1006f04 <__sf+0xd0>
 100126c:	00f58c63          	beq	a1,a5,1001284 <cleanup_stdio+0x54>
 1001270:	00040513          	mv	a0,s0
 1001274:	00812403          	lw	s0,8(sp)
 1001278:	00c12083          	lw	ra,12(sp)
 100127c:	01010113          	add	sp,sp,16
 1001280:	4b90106f          	j	1002f38 <_fclose_r>
 1001284:	00c12083          	lw	ra,12(sp)
 1001288:	00812403          	lw	s0,8(sp)
 100128c:	01010113          	add	sp,sp,16
 1001290:	00008067          	ret

01001294 <__fp_lock>:
 1001294:	0645a783          	lw	a5,100(a1)
 1001298:	0017f793          	and	a5,a5,1
 100129c:	00079863          	bnez	a5,10012ac <__fp_lock+0x18>
 10012a0:	00c5d783          	lhu	a5,12(a1)
 10012a4:	2007f793          	and	a5,a5,512
 10012a8:	00078663          	beqz	a5,10012b4 <__fp_lock+0x20>
 10012ac:	00000513          	li	a0,0
 10012b0:	00008067          	ret
 10012b4:	0585a503          	lw	a0,88(a1)
 10012b8:	ff010113          	add	sp,sp,-16
 10012bc:	00112623          	sw	ra,12(sp)
 10012c0:	429000ef          	jal	1001ee8 <__retarget_lock_acquire_recursive>
 10012c4:	00c12083          	lw	ra,12(sp)
 10012c8:	00000513          	li	a0,0
 10012cc:	01010113          	add	sp,sp,16
 10012d0:	00008067          	ret

010012d4 <__fp_unlock>:
 10012d4:	0645a783          	lw	a5,100(a1)
 10012d8:	0017f793          	and	a5,a5,1
 10012dc:	00079863          	bnez	a5,10012ec <__fp_unlock+0x18>
 10012e0:	00c5d783          	lhu	a5,12(a1)
 10012e4:	2007f793          	and	a5,a5,512
 10012e8:	00078663          	beqz	a5,10012f4 <__fp_unlock+0x20>
 10012ec:	00000513          	li	a0,0
 10012f0:	00008067          	ret
 10012f4:	0585a503          	lw	a0,88(a1)
 10012f8:	ff010113          	add	sp,sp,-16
 10012fc:	00112623          	sw	ra,12(sp)
 1001300:	401000ef          	jal	1001f00 <__retarget_lock_release_recursive>
 1001304:	00c12083          	lw	ra,12(sp)
 1001308:	00000513          	li	a0,0
 100130c:	01010113          	add	sp,sp,16
 1001310:	00008067          	ret

01001314 <global_stdio_init.part.0>:
 1001314:	fe010113          	add	sp,sp,-32
 1001318:	00000797          	auipc	a5,0x0
 100131c:	efc78793          	add	a5,a5,-260 # 1001214 <stdio_exit_handler>
 1001320:	00112e23          	sw	ra,28(sp)
 1001324:	00812c23          	sw	s0,24(sp)
 1001328:	00912a23          	sw	s1,20(sp)
 100132c:	05c18413          	add	s0,gp,92 # 1006e34 <__sf>
 1001330:	01212823          	sw	s2,16(sp)
 1001334:	01312623          	sw	s3,12(sp)
 1001338:	01412423          	sw	s4,8(sp)
 100133c:	00800613          	li	a2,8
 1001340:	00000593          	li	a1,0
 1001344:	faf1a023          	sw	a5,-96(gp) # 1006d78 <__stdio_exit_handler>
 1001348:	0b818513          	add	a0,gp,184 # 1006e90 <__sf+0x5c>
 100134c:	00400793          	li	a5,4
 1001350:	00f42623          	sw	a5,12(s0)
 1001354:	00042023          	sw	zero,0(s0)
 1001358:	00042223          	sw	zero,4(s0)
 100135c:	00042423          	sw	zero,8(s0)
 1001360:	06042223          	sw	zero,100(s0)
 1001364:	00042823          	sw	zero,16(s0)
 1001368:	00042a23          	sw	zero,20(s0)
 100136c:	00042c23          	sw	zero,24(s0)
 1001370:	3e9000ef          	jal	1001f58 <memset>
 1001374:	00000a17          	auipc	s4,0x0
 1001378:	7aca0a13          	add	s4,s4,1964 # 1001b20 <__sread>
 100137c:	00001997          	auipc	s3,0x1
 1001380:	80898993          	add	s3,s3,-2040 # 1001b84 <__swrite>
 1001384:	00001917          	auipc	s2,0x1
 1001388:	88890913          	add	s2,s2,-1912 # 1001c0c <__sseek>
 100138c:	00001497          	auipc	s1,0x1
 1001390:	8f848493          	add	s1,s1,-1800 # 1001c84 <__sclose>
 1001394:	0b418513          	add	a0,gp,180 # 1006e8c <__sf+0x58>
 1001398:	03442023          	sw	s4,32(s0)
 100139c:	03342223          	sw	s3,36(s0)
 10013a0:	03242423          	sw	s2,40(s0)
 10013a4:	02942623          	sw	s1,44(s0)
 10013a8:	00842e23          	sw	s0,28(s0)
 10013ac:	32d000ef          	jal	1001ed8 <__retarget_lock_init_recursive>
 10013b0:	000107b7          	lui	a5,0x10
 10013b4:	00878793          	add	a5,a5,8 # 10008 <__reset-0xfefff8>
 10013b8:	00800613          	li	a2,8
 10013bc:	00000593          	li	a1,0
 10013c0:	12018513          	add	a0,gp,288 # 1006ef8 <__sf+0xc4>
 10013c4:	06f42a23          	sw	a5,116(s0)
 10013c8:	06042423          	sw	zero,104(s0)
 10013cc:	06042623          	sw	zero,108(s0)
 10013d0:	06042823          	sw	zero,112(s0)
 10013d4:	0c042623          	sw	zero,204(s0)
 10013d8:	06042c23          	sw	zero,120(s0)
 10013dc:	06042e23          	sw	zero,124(s0)
 10013e0:	08042023          	sw	zero,128(s0)
 10013e4:	375000ef          	jal	1001f58 <memset>
 10013e8:	0c418793          	add	a5,gp,196 # 1006e9c <__sf+0x68>
 10013ec:	11c18513          	add	a0,gp,284 # 1006ef4 <__sf+0xc0>
 10013f0:	08f42223          	sw	a5,132(s0)
 10013f4:	09442423          	sw	s4,136(s0)
 10013f8:	09342623          	sw	s3,140(s0)
 10013fc:	09242823          	sw	s2,144(s0)
 1001400:	08942a23          	sw	s1,148(s0)
 1001404:	2d5000ef          	jal	1001ed8 <__retarget_lock_init_recursive>
 1001408:	000207b7          	lui	a5,0x20
 100140c:	01278793          	add	a5,a5,18 # 20012 <__reset-0xfdffee>
 1001410:	00800613          	li	a2,8
 1001414:	00000593          	li	a1,0
 1001418:	18818513          	add	a0,gp,392 # 1006f60 <__sf+0x12c>
 100141c:	0cf42e23          	sw	a5,220(s0)
 1001420:	0c042823          	sw	zero,208(s0)
 1001424:	0c042a23          	sw	zero,212(s0)
 1001428:	0c042c23          	sw	zero,216(s0)
 100142c:	12042a23          	sw	zero,308(s0)
 1001430:	0e042023          	sw	zero,224(s0)
 1001434:	0e042223          	sw	zero,228(s0)
 1001438:	0e042423          	sw	zero,232(s0)
 100143c:	31d000ef          	jal	1001f58 <memset>
 1001440:	12c18793          	add	a5,gp,300 # 1006f04 <__sf+0xd0>
 1001444:	0f442823          	sw	s4,240(s0)
 1001448:	0f342a23          	sw	s3,244(s0)
 100144c:	0f242c23          	sw	s2,248(s0)
 1001450:	0e942e23          	sw	s1,252(s0)
 1001454:	0ef42623          	sw	a5,236(s0)
 1001458:	01812403          	lw	s0,24(sp)
 100145c:	01c12083          	lw	ra,28(sp)
 1001460:	01412483          	lw	s1,20(sp)
 1001464:	01012903          	lw	s2,16(sp)
 1001468:	00c12983          	lw	s3,12(sp)
 100146c:	00812a03          	lw	s4,8(sp)
 1001470:	18418513          	add	a0,gp,388 # 1006f5c <__sf+0x128>
 1001474:	02010113          	add	sp,sp,32
 1001478:	2610006f          	j	1001ed8 <__retarget_lock_init_recursive>

0100147c <__sfp>:
 100147c:	fe010113          	add	sp,sp,-32
 1001480:	01312623          	sw	s3,12(sp)
 1001484:	00050993          	mv	s3,a0
 1001488:	fc418513          	add	a0,gp,-60 # 1006d9c <__lock___sfp_recursive_mutex>
 100148c:	00112e23          	sw	ra,28(sp)
 1001490:	00812c23          	sw	s0,24(sp)
 1001494:	00912a23          	sw	s1,20(sp)
 1001498:	01212823          	sw	s2,16(sp)
 100149c:	24d000ef          	jal	1001ee8 <__retarget_lock_acquire_recursive>
 10014a0:	fa01a783          	lw	a5,-96(gp) # 1006d78 <__stdio_exit_handler>
 10014a4:	10078063          	beqz	a5,10015a4 <__sfp+0x128>
 10014a8:	00005917          	auipc	s2,0x5
 10014ac:	bfc90913          	add	s2,s2,-1028 # 10060a4 <__sglue>
 10014b0:	fff00493          	li	s1,-1
 10014b4:	00492783          	lw	a5,4(s2)
 10014b8:	00892403          	lw	s0,8(s2)
 10014bc:	fff78793          	add	a5,a5,-1
 10014c0:	0007d863          	bgez	a5,10014d0 <__sfp+0x54>
 10014c4:	0900006f          	j	1001554 <__sfp+0xd8>
 10014c8:	06840413          	add	s0,s0,104
 10014cc:	08978463          	beq	a5,s1,1001554 <__sfp+0xd8>
 10014d0:	00c41703          	lh	a4,12(s0)
 10014d4:	fff78793          	add	a5,a5,-1
 10014d8:	fe0718e3          	bnez	a4,10014c8 <__sfp+0x4c>
 10014dc:	ffff07b7          	lui	a5,0xffff0
 10014e0:	00178793          	add	a5,a5,1 # ffff0001 <__alt_mem_onchip_memory2_0+0xfdfc8001>
 10014e4:	00f42623          	sw	a5,12(s0)
 10014e8:	05840513          	add	a0,s0,88
 10014ec:	06042223          	sw	zero,100(s0)
 10014f0:	1e9000ef          	jal	1001ed8 <__retarget_lock_init_recursive>
 10014f4:	fc418513          	add	a0,gp,-60 # 1006d9c <__lock___sfp_recursive_mutex>
 10014f8:	209000ef          	jal	1001f00 <__retarget_lock_release_recursive>
 10014fc:	00800613          	li	a2,8
 1001500:	00042023          	sw	zero,0(s0)
 1001504:	00042423          	sw	zero,8(s0)
 1001508:	00042223          	sw	zero,4(s0)
 100150c:	00042823          	sw	zero,16(s0)
 1001510:	00042a23          	sw	zero,20(s0)
 1001514:	00042c23          	sw	zero,24(s0)
 1001518:	00000593          	li	a1,0
 100151c:	05c40513          	add	a0,s0,92
 1001520:	239000ef          	jal	1001f58 <memset>
 1001524:	02042823          	sw	zero,48(s0)
 1001528:	02042a23          	sw	zero,52(s0)
 100152c:	04042223          	sw	zero,68(s0)
 1001530:	04042423          	sw	zero,72(s0)
 1001534:	01c12083          	lw	ra,28(sp)
 1001538:	00040513          	mv	a0,s0
 100153c:	01812403          	lw	s0,24(sp)
 1001540:	01412483          	lw	s1,20(sp)
 1001544:	01012903          	lw	s2,16(sp)
 1001548:	00c12983          	lw	s3,12(sp)
 100154c:	02010113          	add	sp,sp,32
 1001550:	00008067          	ret
 1001554:	00092403          	lw	s0,0(s2)
 1001558:	00040663          	beqz	s0,1001564 <__sfp+0xe8>
 100155c:	00040913          	mv	s2,s0
 1001560:	f55ff06f          	j	10014b4 <__sfp+0x38>
 1001564:	1ac00593          	li	a1,428
 1001568:	00098513          	mv	a0,s3
 100156c:	1f4010ef          	jal	1002760 <_malloc_r>
 1001570:	00050413          	mv	s0,a0
 1001574:	02050c63          	beqz	a0,10015ac <__sfp+0x130>
 1001578:	00c50513          	add	a0,a0,12
 100157c:	00400793          	li	a5,4
 1001580:	00042023          	sw	zero,0(s0)
 1001584:	00f42223          	sw	a5,4(s0)
 1001588:	00a42423          	sw	a0,8(s0)
 100158c:	1a000613          	li	a2,416
 1001590:	00000593          	li	a1,0
 1001594:	1c5000ef          	jal	1001f58 <memset>
 1001598:	00892023          	sw	s0,0(s2)
 100159c:	00040913          	mv	s2,s0
 10015a0:	f15ff06f          	j	10014b4 <__sfp+0x38>
 10015a4:	d71ff0ef          	jal	1001314 <global_stdio_init.part.0>
 10015a8:	f01ff06f          	j	10014a8 <__sfp+0x2c>
 10015ac:	00092023          	sw	zero,0(s2)
 10015b0:	fc418513          	add	a0,gp,-60 # 1006d9c <__lock___sfp_recursive_mutex>
 10015b4:	14d000ef          	jal	1001f00 <__retarget_lock_release_recursive>
 10015b8:	00c00793          	li	a5,12
 10015bc:	00f9a023          	sw	a5,0(s3)
 10015c0:	f75ff06f          	j	1001534 <__sfp+0xb8>

010015c4 <__sinit>:
 10015c4:	ff010113          	add	sp,sp,-16
 10015c8:	00812423          	sw	s0,8(sp)
 10015cc:	00050413          	mv	s0,a0
 10015d0:	fc418513          	add	a0,gp,-60 # 1006d9c <__lock___sfp_recursive_mutex>
 10015d4:	00112623          	sw	ra,12(sp)
 10015d8:	111000ef          	jal	1001ee8 <__retarget_lock_acquire_recursive>
 10015dc:	03442783          	lw	a5,52(s0)
 10015e0:	00079c63          	bnez	a5,10015f8 <__sinit+0x34>
 10015e4:	00000797          	auipc	a5,0x0
 10015e8:	c4c78793          	add	a5,a5,-948 # 1001230 <cleanup_stdio>
 10015ec:	02f42a23          	sw	a5,52(s0)
 10015f0:	fa01a783          	lw	a5,-96(gp) # 1006d78 <__stdio_exit_handler>
 10015f4:	00078c63          	beqz	a5,100160c <__sinit+0x48>
 10015f8:	00812403          	lw	s0,8(sp)
 10015fc:	00c12083          	lw	ra,12(sp)
 1001600:	fc418513          	add	a0,gp,-60 # 1006d9c <__lock___sfp_recursive_mutex>
 1001604:	01010113          	add	sp,sp,16
 1001608:	0f90006f          	j	1001f00 <__retarget_lock_release_recursive>
 100160c:	d09ff0ef          	jal	1001314 <global_stdio_init.part.0>
 1001610:	00812403          	lw	s0,8(sp)
 1001614:	00c12083          	lw	ra,12(sp)
 1001618:	fc418513          	add	a0,gp,-60 # 1006d9c <__lock___sfp_recursive_mutex>
 100161c:	01010113          	add	sp,sp,16
 1001620:	0e10006f          	j	1001f00 <__retarget_lock_release_recursive>

01001624 <__sfp_lock_acquire>:
 1001624:	fc418513          	add	a0,gp,-60 # 1006d9c <__lock___sfp_recursive_mutex>
 1001628:	0c10006f          	j	1001ee8 <__retarget_lock_acquire_recursive>

0100162c <__sfp_lock_release>:
 100162c:	fc418513          	add	a0,gp,-60 # 1006d9c <__lock___sfp_recursive_mutex>
 1001630:	0d10006f          	j	1001f00 <__retarget_lock_release_recursive>

01001634 <__fp_lock_all>:
 1001634:	ff010113          	add	sp,sp,-16
 1001638:	fc418513          	add	a0,gp,-60 # 1006d9c <__lock___sfp_recursive_mutex>
 100163c:	00112623          	sw	ra,12(sp)
 1001640:	0a9000ef          	jal	1001ee8 <__retarget_lock_acquire_recursive>
 1001644:	00c12083          	lw	ra,12(sp)
 1001648:	00005617          	auipc	a2,0x5
 100164c:	a5c60613          	add	a2,a2,-1444 # 10060a4 <__sglue>
 1001650:	00000597          	auipc	a1,0x0
 1001654:	c4458593          	add	a1,a1,-956 # 1001294 <__fp_lock>
 1001658:	00000513          	li	a0,0
 100165c:	01010113          	add	sp,sp,16
 1001660:	0340006f          	j	1001694 <_fwalk_sglue>

01001664 <__fp_unlock_all>:
 1001664:	ff010113          	add	sp,sp,-16
 1001668:	00005617          	auipc	a2,0x5
 100166c:	a3c60613          	add	a2,a2,-1476 # 10060a4 <__sglue>
 1001670:	00000597          	auipc	a1,0x0
 1001674:	c6458593          	add	a1,a1,-924 # 10012d4 <__fp_unlock>
 1001678:	00000513          	li	a0,0
 100167c:	00112623          	sw	ra,12(sp)
 1001680:	014000ef          	jal	1001694 <_fwalk_sglue>
 1001684:	00c12083          	lw	ra,12(sp)
 1001688:	fc418513          	add	a0,gp,-60 # 1006d9c <__lock___sfp_recursive_mutex>
 100168c:	01010113          	add	sp,sp,16
 1001690:	0710006f          	j	1001f00 <__retarget_lock_release_recursive>

01001694 <_fwalk_sglue>:
 1001694:	fd010113          	add	sp,sp,-48
 1001698:	03212023          	sw	s2,32(sp)
 100169c:	01312e23          	sw	s3,28(sp)
 10016a0:	01412c23          	sw	s4,24(sp)
 10016a4:	01512a23          	sw	s5,20(sp)
 10016a8:	01612823          	sw	s6,16(sp)
 10016ac:	01712623          	sw	s7,12(sp)
 10016b0:	02112623          	sw	ra,44(sp)
 10016b4:	02812423          	sw	s0,40(sp)
 10016b8:	02912223          	sw	s1,36(sp)
 10016bc:	00050b13          	mv	s6,a0
 10016c0:	00058b93          	mv	s7,a1
 10016c4:	00060a93          	mv	s5,a2
 10016c8:	00000a13          	li	s4,0
 10016cc:	00100993          	li	s3,1
 10016d0:	fff00913          	li	s2,-1
 10016d4:	004aa483          	lw	s1,4(s5)
 10016d8:	008aa403          	lw	s0,8(s5)
 10016dc:	fff48493          	add	s1,s1,-1
 10016e0:	0204c863          	bltz	s1,1001710 <_fwalk_sglue+0x7c>
 10016e4:	00c45783          	lhu	a5,12(s0)
 10016e8:	00f9fe63          	bgeu	s3,a5,1001704 <_fwalk_sglue+0x70>
 10016ec:	00e41783          	lh	a5,14(s0)
 10016f0:	00040593          	mv	a1,s0
 10016f4:	000b0513          	mv	a0,s6
 10016f8:	01278663          	beq	a5,s2,1001704 <_fwalk_sglue+0x70>
 10016fc:	000b80e7          	jalr	s7
 1001700:	00aa6a33          	or	s4,s4,a0
 1001704:	fff48493          	add	s1,s1,-1
 1001708:	06840413          	add	s0,s0,104
 100170c:	fd249ce3          	bne	s1,s2,10016e4 <_fwalk_sglue+0x50>
 1001710:	000aaa83          	lw	s5,0(s5)
 1001714:	fc0a90e3          	bnez	s5,10016d4 <_fwalk_sglue+0x40>
 1001718:	02c12083          	lw	ra,44(sp)
 100171c:	02812403          	lw	s0,40(sp)
 1001720:	02412483          	lw	s1,36(sp)
 1001724:	02012903          	lw	s2,32(sp)
 1001728:	01c12983          	lw	s3,28(sp)
 100172c:	01412a83          	lw	s5,20(sp)
 1001730:	01012b03          	lw	s6,16(sp)
 1001734:	00c12b83          	lw	s7,12(sp)
 1001738:	000a0513          	mv	a0,s4
 100173c:	01812a03          	lw	s4,24(sp)
 1001740:	03010113          	add	sp,sp,48
 1001744:	00008067          	ret

01001748 <_puts_r>:
 1001748:	fd010113          	add	sp,sp,-48
 100174c:	02912223          	sw	s1,36(sp)
 1001750:	00050493          	mv	s1,a0
 1001754:	00058513          	mv	a0,a1
 1001758:	02812423          	sw	s0,40(sp)
 100175c:	02112623          	sw	ra,44(sp)
 1001760:	00058413          	mv	s0,a1
 1001764:	0d1000ef          	jal	1002034 <strlen>
 1001768:	00150713          	add	a4,a0,1
 100176c:	00004697          	auipc	a3,0x4
 1001770:	73068693          	add	a3,a3,1840 # 1005e9c <__fini_array_end+0x44>
 1001774:	00e12623          	sw	a4,12(sp)
 1001778:	0344a783          	lw	a5,52(s1)
 100177c:	01010713          	add	a4,sp,16
 1001780:	00d12c23          	sw	a3,24(sp)
 1001784:	00e12223          	sw	a4,4(sp)
 1001788:	00100693          	li	a3,1
 100178c:	00200713          	li	a4,2
 1001790:	00812823          	sw	s0,16(sp)
 1001794:	00a12a23          	sw	a0,20(sp)
 1001798:	00d12e23          	sw	a3,28(sp)
 100179c:	00e12423          	sw	a4,8(sp)
 10017a0:	0084a403          	lw	s0,8(s1)
 10017a4:	0c078263          	beqz	a5,1001868 <_puts_r+0x120>
 10017a8:	06442783          	lw	a5,100(s0)
 10017ac:	00c41703          	lh	a4,12(s0)
 10017b0:	0017f693          	and	a3,a5,1
 10017b4:	00069663          	bnez	a3,10017c0 <_puts_r+0x78>
 10017b8:	20077693          	and	a3,a4,512
 10017bc:	08068c63          	beqz	a3,1001854 <_puts_r+0x10c>
 10017c0:	01271693          	sll	a3,a4,0x12
 10017c4:	0206c063          	bltz	a3,10017e4 <_puts_r+0x9c>
 10017c8:	ffffe6b7          	lui	a3,0xffffe
 10017cc:	fff68693          	add	a3,a3,-1 # ffffdfff <__alt_mem_onchip_memory2_0+0xfdfd5fff>
 10017d0:	00002637          	lui	a2,0x2
 10017d4:	00c76733          	or	a4,a4,a2
 10017d8:	00d7f7b3          	and	a5,a5,a3
 10017dc:	00e41623          	sh	a4,12(s0)
 10017e0:	06f42223          	sw	a5,100(s0)
 10017e4:	01279713          	sll	a4,a5,0x12
 10017e8:	08074663          	bltz	a4,1001874 <_puts_r+0x12c>
 10017ec:	00410613          	add	a2,sp,4
 10017f0:	00040593          	mv	a1,s0
 10017f4:	00048513          	mv	a0,s1
 10017f8:	4b9010ef          	jal	10034b0 <__sfvwrite_r>
 10017fc:	06442783          	lw	a5,100(s0)
 1001800:	06051a63          	bnez	a0,1001874 <_puts_r+0x12c>
 1001804:	00a00493          	li	s1,10
 1001808:	0017f793          	and	a5,a5,1
 100180c:	00079863          	bnez	a5,100181c <_puts_r+0xd4>
 1001810:	00c45783          	lhu	a5,12(s0)
 1001814:	2007f793          	and	a5,a5,512
 1001818:	00078e63          	beqz	a5,1001834 <_puts_r+0xec>
 100181c:	02c12083          	lw	ra,44(sp)
 1001820:	02812403          	lw	s0,40(sp)
 1001824:	00048513          	mv	a0,s1
 1001828:	02412483          	lw	s1,36(sp)
 100182c:	03010113          	add	sp,sp,48
 1001830:	00008067          	ret
 1001834:	05842503          	lw	a0,88(s0)
 1001838:	6c8000ef          	jal	1001f00 <__retarget_lock_release_recursive>
 100183c:	02c12083          	lw	ra,44(sp)
 1001840:	02812403          	lw	s0,40(sp)
 1001844:	00048513          	mv	a0,s1
 1001848:	02412483          	lw	s1,36(sp)
 100184c:	03010113          	add	sp,sp,48
 1001850:	00008067          	ret
 1001854:	05842503          	lw	a0,88(s0)
 1001858:	690000ef          	jal	1001ee8 <__retarget_lock_acquire_recursive>
 100185c:	00c41703          	lh	a4,12(s0)
 1001860:	06442783          	lw	a5,100(s0)
 1001864:	f5dff06f          	j	10017c0 <_puts_r+0x78>
 1001868:	00048513          	mv	a0,s1
 100186c:	d59ff0ef          	jal	10015c4 <__sinit>
 1001870:	f39ff06f          	j	10017a8 <_puts_r+0x60>
 1001874:	fff00493          	li	s1,-1
 1001878:	f91ff06f          	j	1001808 <_puts_r+0xc0>

0100187c <puts>:
 100187c:	00050593          	mv	a1,a0
 1001880:	8201a503          	lw	a0,-2016(gp) # 10065f8 <_impure_ptr>
 1001884:	ec5ff06f          	j	1001748 <_puts_r>

01001888 <setvbuf>:
 1001888:	fd010113          	add	sp,sp,-48
 100188c:	02812423          	sw	s0,40(sp)
 1001890:	02912223          	sw	s1,36(sp)
 1001894:	03212023          	sw	s2,32(sp)
 1001898:	01312e23          	sw	s3,28(sp)
 100189c:	01412c23          	sw	s4,24(sp)
 10018a0:	02112623          	sw	ra,44(sp)
 10018a4:	8201aa03          	lw	s4,-2016(gp) # 10065f8 <_impure_ptr>
 10018a8:	00050413          	mv	s0,a0
 10018ac:	00058913          	mv	s2,a1
 10018b0:	00060993          	mv	s3,a2
 10018b4:	00068493          	mv	s1,a3
 10018b8:	000a0663          	beqz	s4,10018c4 <setvbuf+0x3c>
 10018bc:	034a2783          	lw	a5,52(s4)
 10018c0:	20078a63          	beqz	a5,1001ad4 <setvbuf+0x24c>
 10018c4:	00200793          	li	a5,2
 10018c8:	00f98863          	beq	s3,a5,10018d8 <setvbuf+0x50>
 10018cc:	00100793          	li	a5,1
 10018d0:	2137e863          	bltu	a5,s3,1001ae0 <setvbuf+0x258>
 10018d4:	2004c663          	bltz	s1,1001ae0 <setvbuf+0x258>
 10018d8:	06442783          	lw	a5,100(s0)
 10018dc:	0017f793          	and	a5,a5,1
 10018e0:	10078863          	beqz	a5,10019f0 <setvbuf+0x168>
 10018e4:	00040593          	mv	a1,s0
 10018e8:	000a0513          	mv	a0,s4
 10018ec:	215010ef          	jal	1003300 <_fflush_r>
 10018f0:	03042583          	lw	a1,48(s0)
 10018f4:	00058c63          	beqz	a1,100190c <setvbuf+0x84>
 10018f8:	04040793          	add	a5,s0,64
 10018fc:	00f58663          	beq	a1,a5,1001908 <setvbuf+0x80>
 1001900:	000a0513          	mv	a0,s4
 1001904:	341000ef          	jal	1002444 <_free_r>
 1001908:	02042823          	sw	zero,48(s0)
 100190c:	00c41783          	lh	a5,12(s0)
 1001910:	00042c23          	sw	zero,24(s0)
 1001914:	00042223          	sw	zero,4(s0)
 1001918:	0807f713          	and	a4,a5,128
 100191c:	14071263          	bnez	a4,1001a60 <setvbuf+0x1d8>
 1001920:	fffff737          	lui	a4,0xfffff
 1001924:	35c70713          	add	a4,a4,860 # fffff35c <__alt_mem_onchip_memory2_0+0xfdfd735c>
 1001928:	00e7f7b3          	and	a5,a5,a4
 100192c:	00f41623          	sh	a5,12(s0)
 1001930:	00200713          	li	a4,2
 1001934:	14e98a63          	beq	s3,a4,1001a88 <setvbuf+0x200>
 1001938:	00c10693          	add	a3,sp,12
 100193c:	00810613          	add	a2,sp,8
 1001940:	00040593          	mv	a1,s0
 1001944:	000a0513          	mv	a0,s4
 1001948:	214020ef          	jal	1003b5c <__swhatbuf_r>
 100194c:	00c45783          	lhu	a5,12(s0)
 1001950:	00a7e7b3          	or	a5,a5,a0
 1001954:	00f41623          	sh	a5,12(s0)
 1001958:	0a048863          	beqz	s1,1001a08 <setvbuf+0x180>
 100195c:	0a090863          	beqz	s2,1001a0c <setvbuf+0x184>
 1001960:	034a2783          	lw	a5,52(s4)
 1001964:	0c078663          	beqz	a5,1001a30 <setvbuf+0x1a8>
 1001968:	00812703          	lw	a4,8(sp)
 100196c:	00c41783          	lh	a5,12(s0)
 1001970:	00970a63          	beq	a4,s1,1001984 <setvbuf+0xfc>
 1001974:	00001737          	lui	a4,0x1
 1001978:	80070713          	add	a4,a4,-2048 # 800 <__reset-0xfff800>
 100197c:	00e7e7b3          	or	a5,a5,a4
 1001980:	00f41623          	sh	a5,12(s0)
 1001984:	00100713          	li	a4,1
 1001988:	00e99663          	bne	s3,a4,1001994 <setvbuf+0x10c>
 100198c:	0017e793          	or	a5,a5,1
 1001990:	00f41623          	sh	a5,12(s0)
 1001994:	01242023          	sw	s2,0(s0)
 1001998:	01242823          	sw	s2,16(s0)
 100199c:	00942a23          	sw	s1,20(s0)
 10019a0:	0087f713          	and	a4,a5,8
 10019a4:	08070c63          	beqz	a4,1001a3c <setvbuf+0x1b4>
 10019a8:	0017f713          	and	a4,a5,1
 10019ac:	12070063          	beqz	a4,1001acc <setvbuf+0x244>
 10019b0:	06442703          	lw	a4,100(s0)
 10019b4:	409004b3          	neg	s1,s1
 10019b8:	00042423          	sw	zero,8(s0)
 10019bc:	00942c23          	sw	s1,24(s0)
 10019c0:	00177713          	and	a4,a4,1
 10019c4:	08070463          	beqz	a4,1001a4c <setvbuf+0x1c4>
 10019c8:	00000493          	li	s1,0
 10019cc:	02c12083          	lw	ra,44(sp)
 10019d0:	02812403          	lw	s0,40(sp)
 10019d4:	02012903          	lw	s2,32(sp)
 10019d8:	01c12983          	lw	s3,28(sp)
 10019dc:	01812a03          	lw	s4,24(sp)
 10019e0:	00048513          	mv	a0,s1
 10019e4:	02412483          	lw	s1,36(sp)
 10019e8:	03010113          	add	sp,sp,48
 10019ec:	00008067          	ret
 10019f0:	00c45783          	lhu	a5,12(s0)
 10019f4:	2007f793          	and	a5,a5,512
 10019f8:	ee0796e3          	bnez	a5,10018e4 <setvbuf+0x5c>
 10019fc:	05842503          	lw	a0,88(s0)
 1001a00:	4e8000ef          	jal	1001ee8 <__retarget_lock_acquire_recursive>
 1001a04:	ee1ff06f          	j	10018e4 <setvbuf+0x5c>
 1001a08:	00812483          	lw	s1,8(sp)
 1001a0c:	00048513          	mv	a0,s1
 1001a10:	539000ef          	jal	1002748 <malloc>
 1001a14:	00050913          	mv	s2,a0
 1001a18:	0c050863          	beqz	a0,1001ae8 <setvbuf+0x260>
 1001a1c:	00c45783          	lhu	a5,12(s0)
 1001a20:	0807e793          	or	a5,a5,128
 1001a24:	00f41623          	sh	a5,12(s0)
 1001a28:	034a2783          	lw	a5,52(s4)
 1001a2c:	f2079ee3          	bnez	a5,1001968 <setvbuf+0xe0>
 1001a30:	000a0513          	mv	a0,s4
 1001a34:	b91ff0ef          	jal	10015c4 <__sinit>
 1001a38:	f31ff06f          	j	1001968 <setvbuf+0xe0>
 1001a3c:	00042423          	sw	zero,8(s0)
 1001a40:	06442703          	lw	a4,100(s0)
 1001a44:	00177713          	and	a4,a4,1
 1001a48:	f80710e3          	bnez	a4,10019c8 <setvbuf+0x140>
 1001a4c:	2007f793          	and	a5,a5,512
 1001a50:	f6079ce3          	bnez	a5,10019c8 <setvbuf+0x140>
 1001a54:	05842503          	lw	a0,88(s0)
 1001a58:	4a8000ef          	jal	1001f00 <__retarget_lock_release_recursive>
 1001a5c:	f6dff06f          	j	10019c8 <setvbuf+0x140>
 1001a60:	01042583          	lw	a1,16(s0)
 1001a64:	000a0513          	mv	a0,s4
 1001a68:	1dd000ef          	jal	1002444 <_free_r>
 1001a6c:	00c41783          	lh	a5,12(s0)
 1001a70:	fffff737          	lui	a4,0xfffff
 1001a74:	35c70713          	add	a4,a4,860 # fffff35c <__alt_mem_onchip_memory2_0+0xfdfd735c>
 1001a78:	00e7f7b3          	and	a5,a5,a4
 1001a7c:	00f41623          	sh	a5,12(s0)
 1001a80:	00200713          	li	a4,2
 1001a84:	eae99ae3          	bne	s3,a4,1001938 <setvbuf+0xb0>
 1001a88:	00000493          	li	s1,0
 1001a8c:	06442703          	lw	a4,100(s0)
 1001a90:	04340693          	add	a3,s0,67
 1001a94:	0027e613          	or	a2,a5,2
 1001a98:	00d42023          	sw	a3,0(s0)
 1001a9c:	00d42823          	sw	a3,16(s0)
 1001aa0:	00100693          	li	a3,1
 1001aa4:	00c41623          	sh	a2,12(s0)
 1001aa8:	00042423          	sw	zero,8(s0)
 1001aac:	00d42a23          	sw	a3,20(s0)
 1001ab0:	00177713          	and	a4,a4,1
 1001ab4:	f0071ce3          	bnez	a4,10019cc <setvbuf+0x144>
 1001ab8:	2007f793          	and	a5,a5,512
 1001abc:	f00798e3          	bnez	a5,10019cc <setvbuf+0x144>
 1001ac0:	05842503          	lw	a0,88(s0)
 1001ac4:	43c000ef          	jal	1001f00 <__retarget_lock_release_recursive>
 1001ac8:	f05ff06f          	j	10019cc <setvbuf+0x144>
 1001acc:	00942423          	sw	s1,8(s0)
 1001ad0:	f71ff06f          	j	1001a40 <setvbuf+0x1b8>
 1001ad4:	000a0513          	mv	a0,s4
 1001ad8:	aedff0ef          	jal	10015c4 <__sinit>
 1001adc:	de9ff06f          	j	10018c4 <setvbuf+0x3c>
 1001ae0:	fff00493          	li	s1,-1
 1001ae4:	ee9ff06f          	j	10019cc <setvbuf+0x144>
 1001ae8:	01512a23          	sw	s5,20(sp)
 1001aec:	00812a83          	lw	s5,8(sp)
 1001af0:	029a8063          	beq	s5,s1,1001b10 <setvbuf+0x288>
 1001af4:	000a8513          	mv	a0,s5
 1001af8:	451000ef          	jal	1002748 <malloc>
 1001afc:	00050913          	mv	s2,a0
 1001b00:	000a8493          	mv	s1,s5
 1001b04:	00050663          	beqz	a0,1001b10 <setvbuf+0x288>
 1001b08:	01412a83          	lw	s5,20(sp)
 1001b0c:	f11ff06f          	j	1001a1c <setvbuf+0x194>
 1001b10:	00c41783          	lh	a5,12(s0)
 1001b14:	01412a83          	lw	s5,20(sp)
 1001b18:	fff00493          	li	s1,-1
 1001b1c:	f71ff06f          	j	1001a8c <setvbuf+0x204>

01001b20 <__sread>:
 1001b20:	ff010113          	add	sp,sp,-16
 1001b24:	00812423          	sw	s0,8(sp)
 1001b28:	00058413          	mv	s0,a1
 1001b2c:	00e59583          	lh	a1,14(a1)
 1001b30:	00112623          	sw	ra,12(sp)
 1001b34:	2e8000ef          	jal	1001e1c <_read_r>
 1001b38:	02054063          	bltz	a0,1001b58 <__sread+0x38>
 1001b3c:	05042783          	lw	a5,80(s0)
 1001b40:	00c12083          	lw	ra,12(sp)
 1001b44:	00a787b3          	add	a5,a5,a0
 1001b48:	04f42823          	sw	a5,80(s0)
 1001b4c:	00812403          	lw	s0,8(sp)
 1001b50:	01010113          	add	sp,sp,16
 1001b54:	00008067          	ret
 1001b58:	00c45783          	lhu	a5,12(s0)
 1001b5c:	fffff737          	lui	a4,0xfffff
 1001b60:	fff70713          	add	a4,a4,-1 # ffffefff <__alt_mem_onchip_memory2_0+0xfdfd6fff>
 1001b64:	00e7f7b3          	and	a5,a5,a4
 1001b68:	00c12083          	lw	ra,12(sp)
 1001b6c:	00f41623          	sh	a5,12(s0)
 1001b70:	00812403          	lw	s0,8(sp)
 1001b74:	01010113          	add	sp,sp,16
 1001b78:	00008067          	ret

01001b7c <__seofread>:
 1001b7c:	00000513          	li	a0,0
 1001b80:	00008067          	ret

01001b84 <__swrite>:
 1001b84:	00c59783          	lh	a5,12(a1)
 1001b88:	fe010113          	add	sp,sp,-32
 1001b8c:	00812c23          	sw	s0,24(sp)
 1001b90:	00912a23          	sw	s1,20(sp)
 1001b94:	01212823          	sw	s2,16(sp)
 1001b98:	01312623          	sw	s3,12(sp)
 1001b9c:	00112e23          	sw	ra,28(sp)
 1001ba0:	1007f713          	and	a4,a5,256
 1001ba4:	00058413          	mv	s0,a1
 1001ba8:	00050493          	mv	s1,a0
 1001bac:	00060913          	mv	s2,a2
 1001bb0:	00068993          	mv	s3,a3
 1001bb4:	04071063          	bnez	a4,1001bf4 <__swrite+0x70>
 1001bb8:	fffff737          	lui	a4,0xfffff
 1001bbc:	fff70713          	add	a4,a4,-1 # ffffefff <__alt_mem_onchip_memory2_0+0xfdfd6fff>
 1001bc0:	00e7f7b3          	and	a5,a5,a4
 1001bc4:	00e41583          	lh	a1,14(s0)
 1001bc8:	00f41623          	sh	a5,12(s0)
 1001bcc:	01812403          	lw	s0,24(sp)
 1001bd0:	01c12083          	lw	ra,28(sp)
 1001bd4:	00098693          	mv	a3,s3
 1001bd8:	00090613          	mv	a2,s2
 1001bdc:	00c12983          	lw	s3,12(sp)
 1001be0:	01012903          	lw	s2,16(sp)
 1001be4:	00048513          	mv	a0,s1
 1001be8:	01412483          	lw	s1,20(sp)
 1001bec:	02010113          	add	sp,sp,32
 1001bf0:	2880006f          	j	1001e78 <_write_r>
 1001bf4:	00e59583          	lh	a1,14(a1)
 1001bf8:	00200693          	li	a3,2
 1001bfc:	00000613          	li	a2,0
 1001c00:	1c0000ef          	jal	1001dc0 <_lseek_r>
 1001c04:	00c41783          	lh	a5,12(s0)
 1001c08:	fb1ff06f          	j	1001bb8 <__swrite+0x34>

01001c0c <__sseek>:
 1001c0c:	ff010113          	add	sp,sp,-16
 1001c10:	00812423          	sw	s0,8(sp)
 1001c14:	00058413          	mv	s0,a1
 1001c18:	00e59583          	lh	a1,14(a1)
 1001c1c:	00112623          	sw	ra,12(sp)
 1001c20:	1a0000ef          	jal	1001dc0 <_lseek_r>
 1001c24:	fff00793          	li	a5,-1
 1001c28:	02f50863          	beq	a0,a5,1001c58 <__sseek+0x4c>
 1001c2c:	00c45783          	lhu	a5,12(s0)
 1001c30:	00001737          	lui	a4,0x1
 1001c34:	00c12083          	lw	ra,12(sp)
 1001c38:	00e7e7b3          	or	a5,a5,a4
 1001c3c:	01079793          	sll	a5,a5,0x10
 1001c40:	4107d793          	sra	a5,a5,0x10
 1001c44:	04a42823          	sw	a0,80(s0)
 1001c48:	00f41623          	sh	a5,12(s0)
 1001c4c:	00812403          	lw	s0,8(sp)
 1001c50:	01010113          	add	sp,sp,16
 1001c54:	00008067          	ret
 1001c58:	00c45783          	lhu	a5,12(s0)
 1001c5c:	fffff737          	lui	a4,0xfffff
 1001c60:	fff70713          	add	a4,a4,-1 # ffffefff <__alt_mem_onchip_memory2_0+0xfdfd6fff>
 1001c64:	00e7f7b3          	and	a5,a5,a4
 1001c68:	01079793          	sll	a5,a5,0x10
 1001c6c:	4107d793          	sra	a5,a5,0x10
 1001c70:	00c12083          	lw	ra,12(sp)
 1001c74:	00f41623          	sh	a5,12(s0)
 1001c78:	00812403          	lw	s0,8(sp)
 1001c7c:	01010113          	add	sp,sp,16
 1001c80:	00008067          	ret

01001c84 <__sclose>:
 1001c84:	00e59583          	lh	a1,14(a1)
 1001c88:	0040006f          	j	1001c8c <_close_r>

01001c8c <_close_r>:
 1001c8c:	ff010113          	add	sp,sp,-16
 1001c90:	00812423          	sw	s0,8(sp)
 1001c94:	00050413          	mv	s0,a0
 1001c98:	00058513          	mv	a0,a1
 1001c9c:	fa01a223          	sw	zero,-92(gp) # 1006d7c <errno>
 1001ca0:	00112623          	sw	ra,12(sp)
 1001ca4:	47d020ef          	jal	1004920 <_close>
 1001ca8:	fff00793          	li	a5,-1
 1001cac:	00f50a63          	beq	a0,a5,1001cc0 <_close_r+0x34>
 1001cb0:	00c12083          	lw	ra,12(sp)
 1001cb4:	00812403          	lw	s0,8(sp)
 1001cb8:	01010113          	add	sp,sp,16
 1001cbc:	00008067          	ret
 1001cc0:	fa41a783          	lw	a5,-92(gp) # 1006d7c <errno>
 1001cc4:	fe0786e3          	beqz	a5,1001cb0 <_close_r+0x24>
 1001cc8:	00c12083          	lw	ra,12(sp)
 1001ccc:	00f42023          	sw	a5,0(s0)
 1001cd0:	00812403          	lw	s0,8(sp)
 1001cd4:	01010113          	add	sp,sp,16
 1001cd8:	00008067          	ret

01001cdc <_reclaim_reent>:
 1001cdc:	8201a783          	lw	a5,-2016(gp) # 10065f8 <_impure_ptr>
 1001ce0:	0ca78e63          	beq	a5,a0,1001dbc <_reclaim_reent+0xe0>
 1001ce4:	04452583          	lw	a1,68(a0)
 1001ce8:	fe010113          	add	sp,sp,-32
 1001cec:	00912a23          	sw	s1,20(sp)
 1001cf0:	00112e23          	sw	ra,28(sp)
 1001cf4:	00812c23          	sw	s0,24(sp)
 1001cf8:	00050493          	mv	s1,a0
 1001cfc:	04058863          	beqz	a1,1001d4c <_reclaim_reent+0x70>
 1001d00:	01212823          	sw	s2,16(sp)
 1001d04:	01312623          	sw	s3,12(sp)
 1001d08:	00000913          	li	s2,0
 1001d0c:	08000993          	li	s3,128
 1001d10:	012587b3          	add	a5,a1,s2
 1001d14:	0007a403          	lw	s0,0(a5)
 1001d18:	00040e63          	beqz	s0,1001d34 <_reclaim_reent+0x58>
 1001d1c:	00040593          	mv	a1,s0
 1001d20:	00042403          	lw	s0,0(s0)
 1001d24:	00048513          	mv	a0,s1
 1001d28:	71c000ef          	jal	1002444 <_free_r>
 1001d2c:	fe0418e3          	bnez	s0,1001d1c <_reclaim_reent+0x40>
 1001d30:	0444a583          	lw	a1,68(s1)
 1001d34:	00490913          	add	s2,s2,4
 1001d38:	fd391ce3          	bne	s2,s3,1001d10 <_reclaim_reent+0x34>
 1001d3c:	00048513          	mv	a0,s1
 1001d40:	704000ef          	jal	1002444 <_free_r>
 1001d44:	01012903          	lw	s2,16(sp)
 1001d48:	00c12983          	lw	s3,12(sp)
 1001d4c:	0384a583          	lw	a1,56(s1)
 1001d50:	00058663          	beqz	a1,1001d5c <_reclaim_reent+0x80>
 1001d54:	00048513          	mv	a0,s1
 1001d58:	6ec000ef          	jal	1002444 <_free_r>
 1001d5c:	0404a403          	lw	s0,64(s1)
 1001d60:	00040c63          	beqz	s0,1001d78 <_reclaim_reent+0x9c>
 1001d64:	00040593          	mv	a1,s0
 1001d68:	00042403          	lw	s0,0(s0)
 1001d6c:	00048513          	mv	a0,s1
 1001d70:	6d4000ef          	jal	1002444 <_free_r>
 1001d74:	fe0418e3          	bnez	s0,1001d64 <_reclaim_reent+0x88>
 1001d78:	04c4a583          	lw	a1,76(s1)
 1001d7c:	00058663          	beqz	a1,1001d88 <_reclaim_reent+0xac>
 1001d80:	00048513          	mv	a0,s1
 1001d84:	6c0000ef          	jal	1002444 <_free_r>
 1001d88:	0344a783          	lw	a5,52(s1)
 1001d8c:	00078e63          	beqz	a5,1001da8 <_reclaim_reent+0xcc>
 1001d90:	01812403          	lw	s0,24(sp)
 1001d94:	01c12083          	lw	ra,28(sp)
 1001d98:	00048513          	mv	a0,s1
 1001d9c:	01412483          	lw	s1,20(sp)
 1001da0:	02010113          	add	sp,sp,32
 1001da4:	00078067          	jr	a5
 1001da8:	01c12083          	lw	ra,28(sp)
 1001dac:	01812403          	lw	s0,24(sp)
 1001db0:	01412483          	lw	s1,20(sp)
 1001db4:	02010113          	add	sp,sp,32
 1001db8:	00008067          	ret
 1001dbc:	00008067          	ret

01001dc0 <_lseek_r>:
 1001dc0:	ff010113          	add	sp,sp,-16
 1001dc4:	00058713          	mv	a4,a1
 1001dc8:	00812423          	sw	s0,8(sp)
 1001dcc:	00060593          	mv	a1,a2
 1001dd0:	00050413          	mv	s0,a0
 1001dd4:	00068613          	mv	a2,a3
 1001dd8:	00070513          	mv	a0,a4
 1001ddc:	fa01a223          	sw	zero,-92(gp) # 1006d7c <errno>
 1001de0:	00112623          	sw	ra,12(sp)
 1001de4:	6d1020ef          	jal	1004cb4 <_lseek>
 1001de8:	fff00793          	li	a5,-1
 1001dec:	00f50a63          	beq	a0,a5,1001e00 <_lseek_r+0x40>
 1001df0:	00c12083          	lw	ra,12(sp)
 1001df4:	00812403          	lw	s0,8(sp)
 1001df8:	01010113          	add	sp,sp,16
 1001dfc:	00008067          	ret
 1001e00:	fa41a783          	lw	a5,-92(gp) # 1006d7c <errno>
 1001e04:	fe0786e3          	beqz	a5,1001df0 <_lseek_r+0x30>
 1001e08:	00c12083          	lw	ra,12(sp)
 1001e0c:	00f42023          	sw	a5,0(s0)
 1001e10:	00812403          	lw	s0,8(sp)
 1001e14:	01010113          	add	sp,sp,16
 1001e18:	00008067          	ret

01001e1c <_read_r>:
 1001e1c:	ff010113          	add	sp,sp,-16
 1001e20:	00058713          	mv	a4,a1
 1001e24:	00812423          	sw	s0,8(sp)
 1001e28:	00060593          	mv	a1,a2
 1001e2c:	00050413          	mv	s0,a0
 1001e30:	00068613          	mv	a2,a3
 1001e34:	00070513          	mv	a0,a4
 1001e38:	fa01a223          	sw	zero,-92(gp) # 1006d7c <errno>
 1001e3c:	00112623          	sw	ra,12(sp)
 1001e40:	224030ef          	jal	1005064 <_read>
 1001e44:	fff00793          	li	a5,-1
 1001e48:	00f50a63          	beq	a0,a5,1001e5c <_read_r+0x40>
 1001e4c:	00c12083          	lw	ra,12(sp)
 1001e50:	00812403          	lw	s0,8(sp)
 1001e54:	01010113          	add	sp,sp,16
 1001e58:	00008067          	ret
 1001e5c:	fa41a783          	lw	a5,-92(gp) # 1006d7c <errno>
 1001e60:	fe0786e3          	beqz	a5,1001e4c <_read_r+0x30>
 1001e64:	00c12083          	lw	ra,12(sp)
 1001e68:	00f42023          	sw	a5,0(s0)
 1001e6c:	00812403          	lw	s0,8(sp)
 1001e70:	01010113          	add	sp,sp,16
 1001e74:	00008067          	ret

01001e78 <_write_r>:
 1001e78:	ff010113          	add	sp,sp,-16
 1001e7c:	00058713          	mv	a4,a1
 1001e80:	00812423          	sw	s0,8(sp)
 1001e84:	00060593          	mv	a1,a2
 1001e88:	00050413          	mv	s0,a0
 1001e8c:	00068613          	mv	a2,a3
 1001e90:	00070513          	mv	a0,a4
 1001e94:	fa01a223          	sw	zero,-92(gp) # 1006d7c <errno>
 1001e98:	00112623          	sw	ra,12(sp)
 1001e9c:	3c4030ef          	jal	1005260 <_write>
 1001ea0:	fff00793          	li	a5,-1
 1001ea4:	00f50a63          	beq	a0,a5,1001eb8 <_write_r+0x40>
 1001ea8:	00c12083          	lw	ra,12(sp)
 1001eac:	00812403          	lw	s0,8(sp)
 1001eb0:	01010113          	add	sp,sp,16
 1001eb4:	00008067          	ret
 1001eb8:	fa41a783          	lw	a5,-92(gp) # 1006d7c <errno>
 1001ebc:	fe0786e3          	beqz	a5,1001ea8 <_write_r+0x30>
 1001ec0:	00c12083          	lw	ra,12(sp)
 1001ec4:	00f42023          	sw	a5,0(s0)
 1001ec8:	00812403          	lw	s0,8(sp)
 1001ecc:	01010113          	add	sp,sp,16
 1001ed0:	00008067          	ret

01001ed4 <__retarget_lock_init>:
 1001ed4:	00008067          	ret

01001ed8 <__retarget_lock_init_recursive>:
 1001ed8:	00008067          	ret

01001edc <__retarget_lock_close>:
 1001edc:	00008067          	ret

01001ee0 <__retarget_lock_close_recursive>:
 1001ee0:	00008067          	ret

01001ee4 <__retarget_lock_acquire>:
 1001ee4:	00008067          	ret

01001ee8 <__retarget_lock_acquire_recursive>:
 1001ee8:	00008067          	ret

01001eec <__retarget_lock_try_acquire>:
 1001eec:	00100513          	li	a0,1
 1001ef0:	00008067          	ret

01001ef4 <__retarget_lock_try_acquire_recursive>:
 1001ef4:	00100513          	li	a0,1
 1001ef8:	00008067          	ret

01001efc <__retarget_lock_release>:
 1001efc:	00008067          	ret

01001f00 <__retarget_lock_release_recursive>:
 1001f00:	00008067          	ret

01001f04 <close>:
 1001f04:	00050593          	mv	a1,a0
 1001f08:	8201a503          	lw	a0,-2016(gp) # 10065f8 <_impure_ptr>
 1001f0c:	d81ff06f          	j	1001c8c <_close_r>

01001f10 <open>:
 1001f10:	fc010113          	add	sp,sp,-64
 1001f14:	02c12423          	sw	a2,40(sp)
 1001f18:	02d12623          	sw	a3,44(sp)
 1001f1c:	02f12a23          	sw	a5,52(sp)
 1001f20:	00060693          	mv	a3,a2
 1001f24:	02810793          	add	a5,sp,40
 1001f28:	00058613          	mv	a2,a1
 1001f2c:	00050593          	mv	a1,a0
 1001f30:	8201a503          	lw	a0,-2016(gp) # 10065f8 <_impure_ptr>
 1001f34:	00112e23          	sw	ra,28(sp)
 1001f38:	02e12823          	sw	a4,48(sp)
 1001f3c:	03012c23          	sw	a6,56(sp)
 1001f40:	03112e23          	sw	a7,60(sp)
 1001f44:	00f12623          	sw	a5,12(sp)
 1001f48:	799010ef          	jal	1003ee0 <_open_r>
 1001f4c:	01c12083          	lw	ra,28(sp)
 1001f50:	04010113          	add	sp,sp,64
 1001f54:	00008067          	ret

01001f58 <memset>:
 1001f58:	00f00313          	li	t1,15
 1001f5c:	00050713          	mv	a4,a0
 1001f60:	02c37e63          	bgeu	t1,a2,1001f9c <memset+0x44>
 1001f64:	00f77793          	and	a5,a4,15
 1001f68:	0a079063          	bnez	a5,1002008 <memset+0xb0>
 1001f6c:	08059263          	bnez	a1,1001ff0 <memset+0x98>
 1001f70:	ff067693          	and	a3,a2,-16
 1001f74:	00f67613          	and	a2,a2,15
 1001f78:	00e686b3          	add	a3,a3,a4
 1001f7c:	00b72023          	sw	a1,0(a4)
 1001f80:	00b72223          	sw	a1,4(a4)
 1001f84:	00b72423          	sw	a1,8(a4)
 1001f88:	00b72623          	sw	a1,12(a4)
 1001f8c:	01070713          	add	a4,a4,16
 1001f90:	fed766e3          	bltu	a4,a3,1001f7c <memset+0x24>
 1001f94:	00061463          	bnez	a2,1001f9c <memset+0x44>
 1001f98:	00008067          	ret
 1001f9c:	40c306b3          	sub	a3,t1,a2
 1001fa0:	00269693          	sll	a3,a3,0x2
 1001fa4:	00000297          	auipc	t0,0x0
 1001fa8:	005686b3          	add	a3,a3,t0
 1001fac:	00c68067          	jr	12(a3)
 1001fb0:	00b70723          	sb	a1,14(a4)
 1001fb4:	00b706a3          	sb	a1,13(a4)
 1001fb8:	00b70623          	sb	a1,12(a4)
 1001fbc:	00b705a3          	sb	a1,11(a4)
 1001fc0:	00b70523          	sb	a1,10(a4)
 1001fc4:	00b704a3          	sb	a1,9(a4)
 1001fc8:	00b70423          	sb	a1,8(a4)
 1001fcc:	00b703a3          	sb	a1,7(a4)
 1001fd0:	00b70323          	sb	a1,6(a4)
 1001fd4:	00b702a3          	sb	a1,5(a4)
 1001fd8:	00b70223          	sb	a1,4(a4)
 1001fdc:	00b701a3          	sb	a1,3(a4)
 1001fe0:	00b70123          	sb	a1,2(a4)
 1001fe4:	00b700a3          	sb	a1,1(a4)
 1001fe8:	00b70023          	sb	a1,0(a4)
 1001fec:	00008067          	ret
 1001ff0:	0ff5f593          	zext.b	a1,a1
 1001ff4:	00859693          	sll	a3,a1,0x8
 1001ff8:	00d5e5b3          	or	a1,a1,a3
 1001ffc:	01059693          	sll	a3,a1,0x10
 1002000:	00d5e5b3          	or	a1,a1,a3
 1002004:	f6dff06f          	j	1001f70 <memset+0x18>
 1002008:	00279693          	sll	a3,a5,0x2
 100200c:	00000297          	auipc	t0,0x0
 1002010:	005686b3          	add	a3,a3,t0
 1002014:	00008293          	mv	t0,ra
 1002018:	fa0680e7          	jalr	-96(a3)
 100201c:	00028093          	mv	ra,t0
 1002020:	ff078793          	add	a5,a5,-16
 1002024:	40f70733          	sub	a4,a4,a5
 1002028:	00f60633          	add	a2,a2,a5
 100202c:	f6c378e3          	bgeu	t1,a2,1001f9c <memset+0x44>
 1002030:	f3dff06f          	j	1001f6c <memset+0x14>

01002034 <strlen>:
 1002034:	00357793          	and	a5,a0,3
 1002038:	00050713          	mv	a4,a0
 100203c:	04079c63          	bnez	a5,1002094 <strlen+0x60>
 1002040:	7f7f86b7          	lui	a3,0x7f7f8
 1002044:	f7f68693          	add	a3,a3,-129 # 7f7f7f7f <__alt_mem_onchip_memory2_0+0x7d7cff7f>
 1002048:	fff00593          	li	a1,-1
 100204c:	00072603          	lw	a2,0(a4)
 1002050:	00470713          	add	a4,a4,4
 1002054:	00d677b3          	and	a5,a2,a3
 1002058:	00d787b3          	add	a5,a5,a3
 100205c:	00c7e7b3          	or	a5,a5,a2
 1002060:	00d7e7b3          	or	a5,a5,a3
 1002064:	feb784e3          	beq	a5,a1,100204c <strlen+0x18>
 1002068:	ffc74683          	lbu	a3,-4(a4)
 100206c:	40a707b3          	sub	a5,a4,a0
 1002070:	04068463          	beqz	a3,10020b8 <strlen+0x84>
 1002074:	ffd74683          	lbu	a3,-3(a4)
 1002078:	02068c63          	beqz	a3,10020b0 <strlen+0x7c>
 100207c:	ffe74503          	lbu	a0,-2(a4)
 1002080:	00a03533          	snez	a0,a0
 1002084:	00f50533          	add	a0,a0,a5
 1002088:	ffe50513          	add	a0,a0,-2
 100208c:	00008067          	ret
 1002090:	fa0688e3          	beqz	a3,1002040 <strlen+0xc>
 1002094:	00074783          	lbu	a5,0(a4)
 1002098:	00170713          	add	a4,a4,1
 100209c:	00377693          	and	a3,a4,3
 10020a0:	fe0798e3          	bnez	a5,1002090 <strlen+0x5c>
 10020a4:	40a70733          	sub	a4,a4,a0
 10020a8:	fff70513          	add	a0,a4,-1
 10020ac:	00008067          	ret
 10020b0:	ffd78513          	add	a0,a5,-3
 10020b4:	00008067          	ret
 10020b8:	ffc78513          	add	a0,a5,-4
 10020bc:	00008067          	ret

010020c0 <__register_exitproc>:
 10020c0:	fe010113          	add	sp,sp,-32
 10020c4:	01212823          	sw	s2,16(sp)
 10020c8:	82418913          	add	s2,gp,-2012 # 10065fc <__atexit_recursive_mutex>
 10020cc:	00812c23          	sw	s0,24(sp)
 10020d0:	00050413          	mv	s0,a0
 10020d4:	00092503          	lw	a0,0(s2)
 10020d8:	00912a23          	sw	s1,20(sp)
 10020dc:	01312623          	sw	s3,12(sp)
 10020e0:	01412423          	sw	s4,8(sp)
 10020e4:	00112e23          	sw	ra,28(sp)
 10020e8:	00058493          	mv	s1,a1
 10020ec:	00060a13          	mv	s4,a2
 10020f0:	00068993          	mv	s3,a3
 10020f4:	df5ff0ef          	jal	1001ee8 <__retarget_lock_acquire_recursive>
 10020f8:	fc818713          	add	a4,gp,-56 # 1006da0 <__atexit>
 10020fc:	00072783          	lw	a5,0(a4)
 1002100:	08078663          	beqz	a5,100218c <__register_exitproc+0xcc>
 1002104:	0047a703          	lw	a4,4(a5)
 1002108:	01f00593          	li	a1,31
 100210c:	00092503          	lw	a0,0(s2)
 1002110:	08e5c463          	blt	a1,a4,1002198 <__register_exitproc+0xd8>
 1002114:	00271593          	sll	a1,a4,0x2
 1002118:	02041e63          	bnez	s0,1002154 <__register_exitproc+0x94>
 100211c:	00170713          	add	a4,a4,1
 1002120:	00e7a223          	sw	a4,4(a5)
 1002124:	00b787b3          	add	a5,a5,a1
 1002128:	0097a423          	sw	s1,8(a5)
 100212c:	dd5ff0ef          	jal	1001f00 <__retarget_lock_release_recursive>
 1002130:	00000513          	li	a0,0
 1002134:	01c12083          	lw	ra,28(sp)
 1002138:	01812403          	lw	s0,24(sp)
 100213c:	01412483          	lw	s1,20(sp)
 1002140:	01012903          	lw	s2,16(sp)
 1002144:	00c12983          	lw	s3,12(sp)
 1002148:	00812a03          	lw	s4,8(sp)
 100214c:	02010113          	add	sp,sp,32
 1002150:	00008067          	ret
 1002154:	00b78833          	add	a6,a5,a1
 1002158:	09482423          	sw	s4,136(a6)
 100215c:	1887a683          	lw	a3,392(a5)
 1002160:	00100613          	li	a2,1
 1002164:	00e61633          	sll	a2,a2,a4
 1002168:	00c6e6b3          	or	a3,a3,a2
 100216c:	18d7a423          	sw	a3,392(a5)
 1002170:	11382423          	sw	s3,264(a6)
 1002174:	00200693          	li	a3,2
 1002178:	fad412e3          	bne	s0,a3,100211c <__register_exitproc+0x5c>
 100217c:	18c7a683          	lw	a3,396(a5)
 1002180:	00c6e6b3          	or	a3,a3,a2
 1002184:	18d7a623          	sw	a3,396(a5)
 1002188:	f95ff06f          	j	100211c <__register_exitproc+0x5c>
 100218c:	19418793          	add	a5,gp,404 # 1006f6c <__atexit0>
 1002190:	00f72023          	sw	a5,0(a4)
 1002194:	f71ff06f          	j	1002104 <__register_exitproc+0x44>
 1002198:	d69ff0ef          	jal	1001f00 <__retarget_lock_release_recursive>
 100219c:	fff00513          	li	a0,-1
 10021a0:	f95ff06f          	j	1002134 <__register_exitproc+0x74>

010021a4 <__call_exitprocs>:
 10021a4:	fd010113          	add	sp,sp,-48
 10021a8:	01712623          	sw	s7,12(sp)
 10021ac:	82418b93          	add	s7,gp,-2012 # 10065fc <__atexit_recursive_mutex>
 10021b0:	01612823          	sw	s6,16(sp)
 10021b4:	00050b13          	mv	s6,a0
 10021b8:	000ba503          	lw	a0,0(s7)
 10021bc:	01412c23          	sw	s4,24(sp)
 10021c0:	fc818a13          	add	s4,gp,-56 # 1006da0 <__atexit>
 10021c4:	03212023          	sw	s2,32(sp)
 10021c8:	01812423          	sw	s8,8(sp)
 10021cc:	02112623          	sw	ra,44(sp)
 10021d0:	00058c13          	mv	s8,a1
 10021d4:	d15ff0ef          	jal	1001ee8 <__retarget_lock_acquire_recursive>
 10021d8:	000a2903          	lw	s2,0(s4)
 10021dc:	08090c63          	beqz	s2,1002274 <__call_exitprocs+0xd0>
 10021e0:	01312e23          	sw	s3,28(sp)
 10021e4:	01512a23          	sw	s5,20(sp)
 10021e8:	02812423          	sw	s0,40(sp)
 10021ec:	02912223          	sw	s1,36(sp)
 10021f0:	01912223          	sw	s9,4(sp)
 10021f4:	fff00993          	li	s3,-1
 10021f8:	00100a93          	li	s5,1
 10021fc:	00492483          	lw	s1,4(s2)
 1002200:	fff48413          	add	s0,s1,-1
 1002204:	04044e63          	bltz	s0,1002260 <__call_exitprocs+0xbc>
 1002208:	00249493          	sll	s1,s1,0x2
 100220c:	009904b3          	add	s1,s2,s1
 1002210:	080c1463          	bnez	s8,1002298 <__call_exitprocs+0xf4>
 1002214:	00492783          	lw	a5,4(s2)
 1002218:	0044a683          	lw	a3,4(s1)
 100221c:	fff78793          	add	a5,a5,-1
 1002220:	0c878063          	beq	a5,s0,10022e0 <__call_exitprocs+0x13c>
 1002224:	0004a223          	sw	zero,4(s1)
 1002228:	02068663          	beqz	a3,1002254 <__call_exitprocs+0xb0>
 100222c:	18892783          	lw	a5,392(s2)
 1002230:	008a9733          	sll	a4,s5,s0
 1002234:	00492c83          	lw	s9,4(s2)
 1002238:	00f777b3          	and	a5,a4,a5
 100223c:	06079a63          	bnez	a5,10022b0 <__call_exitprocs+0x10c>
 1002240:	000680e7          	jalr	a3
 1002244:	00492703          	lw	a4,4(s2)
 1002248:	000a2783          	lw	a5,0(s4)
 100224c:	09971463          	bne	a4,s9,10022d4 <__call_exitprocs+0x130>
 1002250:	09279263          	bne	a5,s2,10022d4 <__call_exitprocs+0x130>
 1002254:	fff40413          	add	s0,s0,-1
 1002258:	ffc48493          	add	s1,s1,-4
 100225c:	fb341ae3          	bne	s0,s3,1002210 <__call_exitprocs+0x6c>
 1002260:	02812403          	lw	s0,40(sp)
 1002264:	02412483          	lw	s1,36(sp)
 1002268:	01c12983          	lw	s3,28(sp)
 100226c:	01412a83          	lw	s5,20(sp)
 1002270:	00412c83          	lw	s9,4(sp)
 1002274:	000ba503          	lw	a0,0(s7)
 1002278:	02c12083          	lw	ra,44(sp)
 100227c:	02012903          	lw	s2,32(sp)
 1002280:	01812a03          	lw	s4,24(sp)
 1002284:	01012b03          	lw	s6,16(sp)
 1002288:	00c12b83          	lw	s7,12(sp)
 100228c:	00812c03          	lw	s8,8(sp)
 1002290:	03010113          	add	sp,sp,48
 1002294:	c6dff06f          	j	1001f00 <__retarget_lock_release_recursive>
 1002298:	1044a783          	lw	a5,260(s1)
 100229c:	f7878ce3          	beq	a5,s8,1002214 <__call_exitprocs+0x70>
 10022a0:	fff40413          	add	s0,s0,-1
 10022a4:	ffc48493          	add	s1,s1,-4
 10022a8:	ff3418e3          	bne	s0,s3,1002298 <__call_exitprocs+0xf4>
 10022ac:	fb5ff06f          	j	1002260 <__call_exitprocs+0xbc>
 10022b0:	18c92783          	lw	a5,396(s2)
 10022b4:	0844a583          	lw	a1,132(s1)
 10022b8:	00f77733          	and	a4,a4,a5
 10022bc:	02071663          	bnez	a4,10022e8 <__call_exitprocs+0x144>
 10022c0:	000b0513          	mv	a0,s6
 10022c4:	000680e7          	jalr	a3
 10022c8:	00492703          	lw	a4,4(s2)
 10022cc:	000a2783          	lw	a5,0(s4)
 10022d0:	f99700e3          	beq	a4,s9,1002250 <__call_exitprocs+0xac>
 10022d4:	f80786e3          	beqz	a5,1002260 <__call_exitprocs+0xbc>
 10022d8:	00078913          	mv	s2,a5
 10022dc:	f21ff06f          	j	10021fc <__call_exitprocs+0x58>
 10022e0:	00892223          	sw	s0,4(s2)
 10022e4:	f45ff06f          	j	1002228 <__call_exitprocs+0x84>
 10022e8:	00058513          	mv	a0,a1
 10022ec:	000680e7          	jalr	a3
 10022f0:	f55ff06f          	j	1002244 <__call_exitprocs+0xa0>

010022f4 <register_fini>:
 10022f4:	00000793          	li	a5,0
 10022f8:	00078863          	beqz	a5,1002308 <register_fini+0x14>
 10022fc:	00002517          	auipc	a0,0x2
 1002300:	c9050513          	add	a0,a0,-880 # 1003f8c <__libc_fini_array>
 1002304:	ed1fe06f          	j	10011d4 <atexit>
 1002308:	00008067          	ret

0100230c <_malloc_trim_r>:
 100230c:	fe010113          	add	sp,sp,-32
 1002310:	00812c23          	sw	s0,24(sp)
 1002314:	00912a23          	sw	s1,20(sp)
 1002318:	01212823          	sw	s2,16(sp)
 100231c:	01312623          	sw	s3,12(sp)
 1002320:	01412423          	sw	s4,8(sp)
 1002324:	00058993          	mv	s3,a1
 1002328:	00112e23          	sw	ra,28(sp)
 100232c:	00050913          	mv	s2,a0
 1002330:	00004a17          	auipc	s4,0x4
 1002334:	ea0a0a13          	add	s4,s4,-352 # 10061d0 <__malloc_av_>
 1002338:	3f1000ef          	jal	1002f28 <__malloc_lock>
 100233c:	008a2703          	lw	a4,8(s4)
 1002340:	000017b7          	lui	a5,0x1
 1002344:	fef78793          	add	a5,a5,-17 # fef <__reset-0xfff011>
 1002348:	00472483          	lw	s1,4(a4)
 100234c:	00001737          	lui	a4,0x1
 1002350:	ffc4f493          	and	s1,s1,-4
 1002354:	00f48433          	add	s0,s1,a5
 1002358:	41340433          	sub	s0,s0,s3
 100235c:	00c45413          	srl	s0,s0,0xc
 1002360:	fff40413          	add	s0,s0,-1
 1002364:	00c41413          	sll	s0,s0,0xc
 1002368:	00e44e63          	blt	s0,a4,1002384 <_malloc_trim_r+0x78>
 100236c:	00000593          	li	a1,0
 1002370:	00090513          	mv	a0,s2
 1002374:	3c9010ef          	jal	1003f3c <_sbrk_r>
 1002378:	008a2783          	lw	a5,8(s4)
 100237c:	009787b3          	add	a5,a5,s1
 1002380:	02f50863          	beq	a0,a5,10023b0 <_malloc_trim_r+0xa4>
 1002384:	00090513          	mv	a0,s2
 1002388:	3a9000ef          	jal	1002f30 <__malloc_unlock>
 100238c:	01c12083          	lw	ra,28(sp)
 1002390:	01812403          	lw	s0,24(sp)
 1002394:	01412483          	lw	s1,20(sp)
 1002398:	01012903          	lw	s2,16(sp)
 100239c:	00c12983          	lw	s3,12(sp)
 10023a0:	00812a03          	lw	s4,8(sp)
 10023a4:	00000513          	li	a0,0
 10023a8:	02010113          	add	sp,sp,32
 10023ac:	00008067          	ret
 10023b0:	408005b3          	neg	a1,s0
 10023b4:	00090513          	mv	a0,s2
 10023b8:	385010ef          	jal	1003f3c <_sbrk_r>
 10023bc:	fff00793          	li	a5,-1
 10023c0:	04f50863          	beq	a0,a5,1002410 <_malloc_trim_r+0x104>
 10023c4:	32418713          	add	a4,gp,804 # 10070fc <__malloc_current_mallinfo>
 10023c8:	00072783          	lw	a5,0(a4) # 1000 <__reset-0xfff000>
 10023cc:	008a2683          	lw	a3,8(s4)
 10023d0:	408484b3          	sub	s1,s1,s0
 10023d4:	0014e493          	or	s1,s1,1
 10023d8:	408787b3          	sub	a5,a5,s0
 10023dc:	00090513          	mv	a0,s2
 10023e0:	0096a223          	sw	s1,4(a3)
 10023e4:	00f72023          	sw	a5,0(a4)
 10023e8:	349000ef          	jal	1002f30 <__malloc_unlock>
 10023ec:	01c12083          	lw	ra,28(sp)
 10023f0:	01812403          	lw	s0,24(sp)
 10023f4:	01412483          	lw	s1,20(sp)
 10023f8:	01012903          	lw	s2,16(sp)
 10023fc:	00c12983          	lw	s3,12(sp)
 1002400:	00812a03          	lw	s4,8(sp)
 1002404:	00100513          	li	a0,1
 1002408:	02010113          	add	sp,sp,32
 100240c:	00008067          	ret
 1002410:	00000593          	li	a1,0
 1002414:	00090513          	mv	a0,s2
 1002418:	325010ef          	jal	1003f3c <_sbrk_r>
 100241c:	008a2703          	lw	a4,8(s4)
 1002420:	00f00693          	li	a3,15
 1002424:	40e507b3          	sub	a5,a0,a4
 1002428:	f4f6dee3          	bge	a3,a5,1002384 <_malloc_trim_r+0x78>
 100242c:	8281a683          	lw	a3,-2008(gp) # 1006600 <__malloc_sbrk_base>
 1002430:	40d50533          	sub	a0,a0,a3
 1002434:	0017e793          	or	a5,a5,1
 1002438:	32a1a223          	sw	a0,804(gp) # 10070fc <__malloc_current_mallinfo>
 100243c:	00f72223          	sw	a5,4(a4)
 1002440:	f45ff06f          	j	1002384 <_malloc_trim_r+0x78>

01002444 <_free_r>:
 1002444:	18058263          	beqz	a1,10025c8 <_free_r+0x184>
 1002448:	ff010113          	add	sp,sp,-16
 100244c:	00812423          	sw	s0,8(sp)
 1002450:	00912223          	sw	s1,4(sp)
 1002454:	00058413          	mv	s0,a1
 1002458:	00050493          	mv	s1,a0
 100245c:	00112623          	sw	ra,12(sp)
 1002460:	2c9000ef          	jal	1002f28 <__malloc_lock>
 1002464:	ffc42583          	lw	a1,-4(s0)
 1002468:	ff840713          	add	a4,s0,-8
 100246c:	00004517          	auipc	a0,0x4
 1002470:	d6450513          	add	a0,a0,-668 # 10061d0 <__malloc_av_>
 1002474:	ffe5f793          	and	a5,a1,-2
 1002478:	00f70633          	add	a2,a4,a5
 100247c:	00462683          	lw	a3,4(a2) # 2004 <__reset-0xffdffc>
 1002480:	00852803          	lw	a6,8(a0)
 1002484:	ffc6f693          	and	a3,a3,-4
 1002488:	1ac80263          	beq	a6,a2,100262c <_free_r+0x1e8>
 100248c:	00d62223          	sw	a3,4(a2)
 1002490:	0015f593          	and	a1,a1,1
 1002494:	00d60833          	add	a6,a2,a3
 1002498:	0a059063          	bnez	a1,1002538 <_free_r+0xf4>
 100249c:	ff842303          	lw	t1,-8(s0)
 10024a0:	00482583          	lw	a1,4(a6)
 10024a4:	00004897          	auipc	a7,0x4
 10024a8:	d3488893          	add	a7,a7,-716 # 10061d8 <__malloc_av_+0x8>
 10024ac:	40670733          	sub	a4,a4,t1
 10024b0:	00872803          	lw	a6,8(a4)
 10024b4:	006787b3          	add	a5,a5,t1
 10024b8:	0015f593          	and	a1,a1,1
 10024bc:	15180263          	beq	a6,a7,1002600 <_free_r+0x1bc>
 10024c0:	00c72303          	lw	t1,12(a4)
 10024c4:	00682623          	sw	t1,12(a6)
 10024c8:	01032423          	sw	a6,8(t1)
 10024cc:	1a058663          	beqz	a1,1002678 <_free_r+0x234>
 10024d0:	0017e693          	or	a3,a5,1
 10024d4:	00d72223          	sw	a3,4(a4)
 10024d8:	00f62023          	sw	a5,0(a2)
 10024dc:	1ff00693          	li	a3,511
 10024e0:	06f6ec63          	bltu	a3,a5,1002558 <_free_r+0x114>
 10024e4:	ff87f693          	and	a3,a5,-8
 10024e8:	00868693          	add	a3,a3,8
 10024ec:	00452583          	lw	a1,4(a0)
 10024f0:	00d506b3          	add	a3,a0,a3
 10024f4:	0006a603          	lw	a2,0(a3)
 10024f8:	0057d813          	srl	a6,a5,0x5
 10024fc:	00100793          	li	a5,1
 1002500:	010797b3          	sll	a5,a5,a6
 1002504:	00b7e7b3          	or	a5,a5,a1
 1002508:	ff868593          	add	a1,a3,-8
 100250c:	00b72623          	sw	a1,12(a4)
 1002510:	00c72423          	sw	a2,8(a4)
 1002514:	00f52223          	sw	a5,4(a0)
 1002518:	00e6a023          	sw	a4,0(a3)
 100251c:	00e62623          	sw	a4,12(a2)
 1002520:	00812403          	lw	s0,8(sp)
 1002524:	00c12083          	lw	ra,12(sp)
 1002528:	00048513          	mv	a0,s1
 100252c:	00412483          	lw	s1,4(sp)
 1002530:	01010113          	add	sp,sp,16
 1002534:	1fd0006f          	j	1002f30 <__malloc_unlock>
 1002538:	00482583          	lw	a1,4(a6)
 100253c:	0015f593          	and	a1,a1,1
 1002540:	08058663          	beqz	a1,10025cc <_free_r+0x188>
 1002544:	0017e693          	or	a3,a5,1
 1002548:	fed42e23          	sw	a3,-4(s0)
 100254c:	00f62023          	sw	a5,0(a2)
 1002550:	1ff00693          	li	a3,511
 1002554:	f8f6f8e3          	bgeu	a3,a5,10024e4 <_free_r+0xa0>
 1002558:	0097d693          	srl	a3,a5,0x9
 100255c:	00400613          	li	a2,4
 1002560:	12d66063          	bltu	a2,a3,1002680 <_free_r+0x23c>
 1002564:	0067d693          	srl	a3,a5,0x6
 1002568:	03968593          	add	a1,a3,57
 100256c:	03868613          	add	a2,a3,56
 1002570:	00359593          	sll	a1,a1,0x3
 1002574:	00b505b3          	add	a1,a0,a1
 1002578:	0005a683          	lw	a3,0(a1)
 100257c:	ff858593          	add	a1,a1,-8
 1002580:	00d59863          	bne	a1,a3,1002590 <_free_r+0x14c>
 1002584:	1540006f          	j	10026d8 <_free_r+0x294>
 1002588:	0086a683          	lw	a3,8(a3)
 100258c:	00d58863          	beq	a1,a3,100259c <_free_r+0x158>
 1002590:	0046a603          	lw	a2,4(a3)
 1002594:	ffc67613          	and	a2,a2,-4
 1002598:	fec7e8e3          	bltu	a5,a2,1002588 <_free_r+0x144>
 100259c:	00c6a583          	lw	a1,12(a3)
 10025a0:	00b72623          	sw	a1,12(a4)
 10025a4:	00d72423          	sw	a3,8(a4)
 10025a8:	00812403          	lw	s0,8(sp)
 10025ac:	00c12083          	lw	ra,12(sp)
 10025b0:	00e5a423          	sw	a4,8(a1)
 10025b4:	00048513          	mv	a0,s1
 10025b8:	00412483          	lw	s1,4(sp)
 10025bc:	00e6a623          	sw	a4,12(a3)
 10025c0:	01010113          	add	sp,sp,16
 10025c4:	16d0006f          	j	1002f30 <__malloc_unlock>
 10025c8:	00008067          	ret
 10025cc:	00d787b3          	add	a5,a5,a3
 10025d0:	00004897          	auipc	a7,0x4
 10025d4:	c0888893          	add	a7,a7,-1016 # 10061d8 <__malloc_av_+0x8>
 10025d8:	00862683          	lw	a3,8(a2)
 10025dc:	0d168c63          	beq	a3,a7,10026b4 <_free_r+0x270>
 10025e0:	00c62803          	lw	a6,12(a2)
 10025e4:	0017e593          	or	a1,a5,1
 10025e8:	00f70633          	add	a2,a4,a5
 10025ec:	0106a623          	sw	a6,12(a3)
 10025f0:	00d82423          	sw	a3,8(a6)
 10025f4:	00b72223          	sw	a1,4(a4)
 10025f8:	00f62023          	sw	a5,0(a2)
 10025fc:	ee1ff06f          	j	10024dc <_free_r+0x98>
 1002600:	12059c63          	bnez	a1,1002738 <_free_r+0x2f4>
 1002604:	00862583          	lw	a1,8(a2)
 1002608:	00c62603          	lw	a2,12(a2)
 100260c:	00f686b3          	add	a3,a3,a5
 1002610:	0016e793          	or	a5,a3,1
 1002614:	00c5a623          	sw	a2,12(a1)
 1002618:	00b62423          	sw	a1,8(a2)
 100261c:	00f72223          	sw	a5,4(a4)
 1002620:	00d70733          	add	a4,a4,a3
 1002624:	00d72023          	sw	a3,0(a4)
 1002628:	ef9ff06f          	j	1002520 <_free_r+0xdc>
 100262c:	0015f593          	and	a1,a1,1
 1002630:	00d786b3          	add	a3,a5,a3
 1002634:	02059063          	bnez	a1,1002654 <_free_r+0x210>
 1002638:	ff842583          	lw	a1,-8(s0)
 100263c:	40b70733          	sub	a4,a4,a1
 1002640:	00c72783          	lw	a5,12(a4)
 1002644:	00872603          	lw	a2,8(a4)
 1002648:	00b686b3          	add	a3,a3,a1
 100264c:	00f62623          	sw	a5,12(a2)
 1002650:	00c7a423          	sw	a2,8(a5)
 1002654:	0016e793          	or	a5,a3,1
 1002658:	00f72223          	sw	a5,4(a4)
 100265c:	00e52423          	sw	a4,8(a0)
 1002660:	82c1a783          	lw	a5,-2004(gp) # 1006604 <__malloc_trim_threshold>
 1002664:	eaf6eee3          	bltu	a3,a5,1002520 <_free_r+0xdc>
 1002668:	fd41a583          	lw	a1,-44(gp) # 1006dac <__malloc_top_pad>
 100266c:	00048513          	mv	a0,s1
 1002670:	c9dff0ef          	jal	100230c <_malloc_trim_r>
 1002674:	eadff06f          	j	1002520 <_free_r+0xdc>
 1002678:	00d787b3          	add	a5,a5,a3
 100267c:	f5dff06f          	j	10025d8 <_free_r+0x194>
 1002680:	01400613          	li	a2,20
 1002684:	02d67063          	bgeu	a2,a3,10026a4 <_free_r+0x260>
 1002688:	05400613          	li	a2,84
 100268c:	06d66463          	bltu	a2,a3,10026f4 <_free_r+0x2b0>
 1002690:	00c7d693          	srl	a3,a5,0xc
 1002694:	06f68593          	add	a1,a3,111
 1002698:	06e68613          	add	a2,a3,110
 100269c:	00359593          	sll	a1,a1,0x3
 10026a0:	ed5ff06f          	j	1002574 <_free_r+0x130>
 10026a4:	05c68593          	add	a1,a3,92
 10026a8:	05b68613          	add	a2,a3,91
 10026ac:	00359593          	sll	a1,a1,0x3
 10026b0:	ec5ff06f          	j	1002574 <_free_r+0x130>
 10026b4:	00e52a23          	sw	a4,20(a0)
 10026b8:	00e52823          	sw	a4,16(a0)
 10026bc:	0017e693          	or	a3,a5,1
 10026c0:	01172623          	sw	a7,12(a4)
 10026c4:	01172423          	sw	a7,8(a4)
 10026c8:	00d72223          	sw	a3,4(a4)
 10026cc:	00f70733          	add	a4,a4,a5
 10026d0:	00f72023          	sw	a5,0(a4)
 10026d4:	e4dff06f          	j	1002520 <_free_r+0xdc>
 10026d8:	00452803          	lw	a6,4(a0)
 10026dc:	40265613          	sra	a2,a2,0x2
 10026e0:	00100793          	li	a5,1
 10026e4:	00c797b3          	sll	a5,a5,a2
 10026e8:	0107e7b3          	or	a5,a5,a6
 10026ec:	00f52223          	sw	a5,4(a0)
 10026f0:	eb1ff06f          	j	10025a0 <_free_r+0x15c>
 10026f4:	15400613          	li	a2,340
 10026f8:	00d66c63          	bltu	a2,a3,1002710 <_free_r+0x2cc>
 10026fc:	00f7d693          	srl	a3,a5,0xf
 1002700:	07868593          	add	a1,a3,120
 1002704:	07768613          	add	a2,a3,119
 1002708:	00359593          	sll	a1,a1,0x3
 100270c:	e69ff06f          	j	1002574 <_free_r+0x130>
 1002710:	55400613          	li	a2,1364
 1002714:	00d66c63          	bltu	a2,a3,100272c <_free_r+0x2e8>
 1002718:	0127d693          	srl	a3,a5,0x12
 100271c:	07d68593          	add	a1,a3,125
 1002720:	07c68613          	add	a2,a3,124
 1002724:	00359593          	sll	a1,a1,0x3
 1002728:	e4dff06f          	j	1002574 <_free_r+0x130>
 100272c:	3f800593          	li	a1,1016
 1002730:	07e00613          	li	a2,126
 1002734:	e41ff06f          	j	1002574 <_free_r+0x130>
 1002738:	0017e693          	or	a3,a5,1
 100273c:	00d72223          	sw	a3,4(a4)
 1002740:	00f62023          	sw	a5,0(a2)
 1002744:	dddff06f          	j	1002520 <_free_r+0xdc>

01002748 <malloc>:
 1002748:	00050593          	mv	a1,a0
 100274c:	8201a503          	lw	a0,-2016(gp) # 10065f8 <_impure_ptr>
 1002750:	0100006f          	j	1002760 <_malloc_r>

01002754 <free>:
 1002754:	00050593          	mv	a1,a0
 1002758:	8201a503          	lw	a0,-2016(gp) # 10065f8 <_impure_ptr>
 100275c:	ce9ff06f          	j	1002444 <_free_r>

01002760 <_malloc_r>:
 1002760:	fd010113          	add	sp,sp,-48
 1002764:	03212023          	sw	s2,32(sp)
 1002768:	02112623          	sw	ra,44(sp)
 100276c:	02812423          	sw	s0,40(sp)
 1002770:	02912223          	sw	s1,36(sp)
 1002774:	01312e23          	sw	s3,28(sp)
 1002778:	00b58793          	add	a5,a1,11
 100277c:	01600713          	li	a4,22
 1002780:	00050913          	mv	s2,a0
 1002784:	08f76263          	bltu	a4,a5,1002808 <_malloc_r+0xa8>
 1002788:	01000793          	li	a5,16
 100278c:	20b7e663          	bltu	a5,a1,1002998 <_malloc_r+0x238>
 1002790:	798000ef          	jal	1002f28 <__malloc_lock>
 1002794:	01800793          	li	a5,24
 1002798:	00200593          	li	a1,2
 100279c:	01000493          	li	s1,16
 10027a0:	00004997          	auipc	s3,0x4
 10027a4:	a3098993          	add	s3,s3,-1488 # 10061d0 <__malloc_av_>
 10027a8:	00f987b3          	add	a5,s3,a5
 10027ac:	0047a403          	lw	s0,4(a5)
 10027b0:	ff878713          	add	a4,a5,-8
 10027b4:	34e40a63          	beq	s0,a4,1002b08 <_malloc_r+0x3a8>
 10027b8:	00442783          	lw	a5,4(s0)
 10027bc:	00c42683          	lw	a3,12(s0)
 10027c0:	00842603          	lw	a2,8(s0)
 10027c4:	ffc7f793          	and	a5,a5,-4
 10027c8:	00f407b3          	add	a5,s0,a5
 10027cc:	0047a703          	lw	a4,4(a5)
 10027d0:	00d62623          	sw	a3,12(a2)
 10027d4:	00c6a423          	sw	a2,8(a3)
 10027d8:	00176713          	or	a4,a4,1
 10027dc:	00090513          	mv	a0,s2
 10027e0:	00e7a223          	sw	a4,4(a5)
 10027e4:	74c000ef          	jal	1002f30 <__malloc_unlock>
 10027e8:	00840513          	add	a0,s0,8
 10027ec:	02c12083          	lw	ra,44(sp)
 10027f0:	02812403          	lw	s0,40(sp)
 10027f4:	02412483          	lw	s1,36(sp)
 10027f8:	02012903          	lw	s2,32(sp)
 10027fc:	01c12983          	lw	s3,28(sp)
 1002800:	03010113          	add	sp,sp,48
 1002804:	00008067          	ret
 1002808:	ff87f493          	and	s1,a5,-8
 100280c:	1807c663          	bltz	a5,1002998 <_malloc_r+0x238>
 1002810:	18b4e463          	bltu	s1,a1,1002998 <_malloc_r+0x238>
 1002814:	714000ef          	jal	1002f28 <__malloc_lock>
 1002818:	1f700793          	li	a5,503
 100281c:	4097f063          	bgeu	a5,s1,1002c1c <_malloc_r+0x4bc>
 1002820:	0094d793          	srl	a5,s1,0x9
 1002824:	18078263          	beqz	a5,10029a8 <_malloc_r+0x248>
 1002828:	00400713          	li	a4,4
 100282c:	34f76663          	bltu	a4,a5,1002b78 <_malloc_r+0x418>
 1002830:	0064d793          	srl	a5,s1,0x6
 1002834:	03978593          	add	a1,a5,57
 1002838:	03878813          	add	a6,a5,56
 100283c:	00359613          	sll	a2,a1,0x3
 1002840:	00004997          	auipc	s3,0x4
 1002844:	99098993          	add	s3,s3,-1648 # 10061d0 <__malloc_av_>
 1002848:	00c98633          	add	a2,s3,a2
 100284c:	00462403          	lw	s0,4(a2)
 1002850:	ff860613          	add	a2,a2,-8
 1002854:	02860863          	beq	a2,s0,1002884 <_malloc_r+0x124>
 1002858:	00f00513          	li	a0,15
 100285c:	0140006f          	j	1002870 <_malloc_r+0x110>
 1002860:	00c42683          	lw	a3,12(s0)
 1002864:	28075e63          	bgez	a4,1002b00 <_malloc_r+0x3a0>
 1002868:	00d60e63          	beq	a2,a3,1002884 <_malloc_r+0x124>
 100286c:	00068413          	mv	s0,a3
 1002870:	00442783          	lw	a5,4(s0)
 1002874:	ffc7f793          	and	a5,a5,-4
 1002878:	40978733          	sub	a4,a5,s1
 100287c:	fee552e3          	bge	a0,a4,1002860 <_malloc_r+0x100>
 1002880:	00080593          	mv	a1,a6
 1002884:	0109a403          	lw	s0,16(s3)
 1002888:	00004897          	auipc	a7,0x4
 100288c:	95088893          	add	a7,a7,-1712 # 10061d8 <__malloc_av_+0x8>
 1002890:	27140463          	beq	s0,a7,1002af8 <_malloc_r+0x398>
 1002894:	00442783          	lw	a5,4(s0)
 1002898:	00f00693          	li	a3,15
 100289c:	ffc7f793          	and	a5,a5,-4
 10028a0:	40978733          	sub	a4,a5,s1
 10028a4:	38e6c263          	blt	a3,a4,1002c28 <_malloc_r+0x4c8>
 10028a8:	0119aa23          	sw	a7,20(s3)
 10028ac:	0119a823          	sw	a7,16(s3)
 10028b0:	34075663          	bgez	a4,1002bfc <_malloc_r+0x49c>
 10028b4:	1ff00713          	li	a4,511
 10028b8:	0049a503          	lw	a0,4(s3)
 10028bc:	24f76e63          	bltu	a4,a5,1002b18 <_malloc_r+0x3b8>
 10028c0:	ff87f713          	and	a4,a5,-8
 10028c4:	00870713          	add	a4,a4,8
 10028c8:	00e98733          	add	a4,s3,a4
 10028cc:	00072683          	lw	a3,0(a4)
 10028d0:	0057d613          	srl	a2,a5,0x5
 10028d4:	00100793          	li	a5,1
 10028d8:	00c797b3          	sll	a5,a5,a2
 10028dc:	00f56533          	or	a0,a0,a5
 10028e0:	ff870793          	add	a5,a4,-8
 10028e4:	00f42623          	sw	a5,12(s0)
 10028e8:	00d42423          	sw	a3,8(s0)
 10028ec:	00a9a223          	sw	a0,4(s3)
 10028f0:	00872023          	sw	s0,0(a4)
 10028f4:	0086a623          	sw	s0,12(a3)
 10028f8:	4025d793          	sra	a5,a1,0x2
 10028fc:	00100613          	li	a2,1
 1002900:	00f61633          	sll	a2,a2,a5
 1002904:	0ac56a63          	bltu	a0,a2,10029b8 <_malloc_r+0x258>
 1002908:	00a677b3          	and	a5,a2,a0
 100290c:	02079463          	bnez	a5,1002934 <_malloc_r+0x1d4>
 1002910:	00161613          	sll	a2,a2,0x1
 1002914:	ffc5f593          	and	a1,a1,-4
 1002918:	00a677b3          	and	a5,a2,a0
 100291c:	00458593          	add	a1,a1,4
 1002920:	00079a63          	bnez	a5,1002934 <_malloc_r+0x1d4>
 1002924:	00161613          	sll	a2,a2,0x1
 1002928:	00a677b3          	and	a5,a2,a0
 100292c:	00458593          	add	a1,a1,4
 1002930:	fe078ae3          	beqz	a5,1002924 <_malloc_r+0x1c4>
 1002934:	00f00813          	li	a6,15
 1002938:	00359313          	sll	t1,a1,0x3
 100293c:	00698333          	add	t1,s3,t1
 1002940:	00030513          	mv	a0,t1
 1002944:	00c52783          	lw	a5,12(a0)
 1002948:	00058e13          	mv	t3,a1
 100294c:	24f50863          	beq	a0,a5,1002b9c <_malloc_r+0x43c>
 1002950:	0047a703          	lw	a4,4(a5)
 1002954:	00078413          	mv	s0,a5
 1002958:	00c7a783          	lw	a5,12(a5)
 100295c:	ffc77713          	and	a4,a4,-4
 1002960:	409706b3          	sub	a3,a4,s1
 1002964:	24d84863          	blt	a6,a3,1002bb4 <_malloc_r+0x454>
 1002968:	fe06c2e3          	bltz	a3,100294c <_malloc_r+0x1ec>
 100296c:	00e40733          	add	a4,s0,a4
 1002970:	00472683          	lw	a3,4(a4)
 1002974:	00842603          	lw	a2,8(s0)
 1002978:	00090513          	mv	a0,s2
 100297c:	0016e693          	or	a3,a3,1
 1002980:	00d72223          	sw	a3,4(a4)
 1002984:	00f62623          	sw	a5,12(a2)
 1002988:	00c7a423          	sw	a2,8(a5)
 100298c:	5a4000ef          	jal	1002f30 <__malloc_unlock>
 1002990:	00840513          	add	a0,s0,8
 1002994:	e59ff06f          	j	10027ec <_malloc_r+0x8c>
 1002998:	00c00793          	li	a5,12
 100299c:	00f92023          	sw	a5,0(s2)
 10029a0:	00000513          	li	a0,0
 10029a4:	e49ff06f          	j	10027ec <_malloc_r+0x8c>
 10029a8:	20000613          	li	a2,512
 10029ac:	04000593          	li	a1,64
 10029b0:	03f00813          	li	a6,63
 10029b4:	e8dff06f          	j	1002840 <_malloc_r+0xe0>
 10029b8:	0089a403          	lw	s0,8(s3)
 10029bc:	01612823          	sw	s6,16(sp)
 10029c0:	00442783          	lw	a5,4(s0)
 10029c4:	ffc7fb13          	and	s6,a5,-4
 10029c8:	009b6863          	bltu	s6,s1,10029d8 <_malloc_r+0x278>
 10029cc:	409b0733          	sub	a4,s6,s1
 10029d0:	00f00793          	li	a5,15
 10029d4:	0ee7c063          	blt	a5,a4,1002ab4 <_malloc_r+0x354>
 10029d8:	01912223          	sw	s9,4(sp)
 10029dc:	82818c93          	add	s9,gp,-2008 # 1006600 <__malloc_sbrk_base>
 10029e0:	000ca703          	lw	a4,0(s9)
 10029e4:	01412c23          	sw	s4,24(sp)
 10029e8:	01512a23          	sw	s5,20(sp)
 10029ec:	01712623          	sw	s7,12(sp)
 10029f0:	fd41aa83          	lw	s5,-44(gp) # 1006dac <__malloc_top_pad>
 10029f4:	fff00793          	li	a5,-1
 10029f8:	01640a33          	add	s4,s0,s6
 10029fc:	01548ab3          	add	s5,s1,s5
 1002a00:	3cf70a63          	beq	a4,a5,1002dd4 <_malloc_r+0x674>
 1002a04:	000017b7          	lui	a5,0x1
 1002a08:	00f78793          	add	a5,a5,15 # 100f <__reset-0xffeff1>
 1002a0c:	00fa8ab3          	add	s5,s5,a5
 1002a10:	fffff7b7          	lui	a5,0xfffff
 1002a14:	00fafab3          	and	s5,s5,a5
 1002a18:	000a8593          	mv	a1,s5
 1002a1c:	00090513          	mv	a0,s2
 1002a20:	51c010ef          	jal	1003f3c <_sbrk_r>
 1002a24:	fff00793          	li	a5,-1
 1002a28:	00050b93          	mv	s7,a0
 1002a2c:	44f50e63          	beq	a0,a5,1002e88 <_malloc_r+0x728>
 1002a30:	01812423          	sw	s8,8(sp)
 1002a34:	25456263          	bltu	a0,s4,1002c78 <_malloc_r+0x518>
 1002a38:	32418c13          	add	s8,gp,804 # 10070fc <__malloc_current_mallinfo>
 1002a3c:	000c2583          	lw	a1,0(s8)
 1002a40:	00ba85b3          	add	a1,s5,a1
 1002a44:	00bc2023          	sw	a1,0(s8)
 1002a48:	00058713          	mv	a4,a1
 1002a4c:	2aaa1a63          	bne	s4,a0,1002d00 <_malloc_r+0x5a0>
 1002a50:	01451793          	sll	a5,a0,0x14
 1002a54:	2a079663          	bnez	a5,1002d00 <_malloc_r+0x5a0>
 1002a58:	0089ab83          	lw	s7,8(s3)
 1002a5c:	015b07b3          	add	a5,s6,s5
 1002a60:	0017e793          	or	a5,a5,1
 1002a64:	00fba223          	sw	a5,4(s7)
 1002a68:	fd018713          	add	a4,gp,-48 # 1006da8 <__malloc_max_sbrked_mem>
 1002a6c:	00072683          	lw	a3,0(a4)
 1002a70:	00b6f463          	bgeu	a3,a1,1002a78 <_malloc_r+0x318>
 1002a74:	00b72023          	sw	a1,0(a4)
 1002a78:	fcc18713          	add	a4,gp,-52 # 1006da4 <__malloc_max_total_mem>
 1002a7c:	00072683          	lw	a3,0(a4)
 1002a80:	00b6f463          	bgeu	a3,a1,1002a88 <_malloc_r+0x328>
 1002a84:	00b72023          	sw	a1,0(a4)
 1002a88:	00812c03          	lw	s8,8(sp)
 1002a8c:	000b8413          	mv	s0,s7
 1002a90:	ffc7f793          	and	a5,a5,-4
 1002a94:	40978733          	sub	a4,a5,s1
 1002a98:	3897ea63          	bltu	a5,s1,1002e2c <_malloc_r+0x6cc>
 1002a9c:	00f00793          	li	a5,15
 1002aa0:	38e7d663          	bge	a5,a4,1002e2c <_malloc_r+0x6cc>
 1002aa4:	01812a03          	lw	s4,24(sp)
 1002aa8:	01412a83          	lw	s5,20(sp)
 1002aac:	00c12b83          	lw	s7,12(sp)
 1002ab0:	00412c83          	lw	s9,4(sp)
 1002ab4:	0014e793          	or	a5,s1,1
 1002ab8:	00f42223          	sw	a5,4(s0)
 1002abc:	009404b3          	add	s1,s0,s1
 1002ac0:	0099a423          	sw	s1,8(s3)
 1002ac4:	00176713          	or	a4,a4,1
 1002ac8:	00090513          	mv	a0,s2
 1002acc:	00e4a223          	sw	a4,4(s1)
 1002ad0:	460000ef          	jal	1002f30 <__malloc_unlock>
 1002ad4:	02c12083          	lw	ra,44(sp)
 1002ad8:	00840513          	add	a0,s0,8
 1002adc:	02812403          	lw	s0,40(sp)
 1002ae0:	01012b03          	lw	s6,16(sp)
 1002ae4:	02412483          	lw	s1,36(sp)
 1002ae8:	02012903          	lw	s2,32(sp)
 1002aec:	01c12983          	lw	s3,28(sp)
 1002af0:	03010113          	add	sp,sp,48
 1002af4:	00008067          	ret
 1002af8:	0049a503          	lw	a0,4(s3)
 1002afc:	dfdff06f          	j	10028f8 <_malloc_r+0x198>
 1002b00:	00842603          	lw	a2,8(s0)
 1002b04:	cc5ff06f          	j	10027c8 <_malloc_r+0x68>
 1002b08:	00c7a403          	lw	s0,12(a5) # fffff00c <__alt_mem_onchip_memory2_0+0xfdfd700c>
 1002b0c:	00258593          	add	a1,a1,2
 1002b10:	d6878ae3          	beq	a5,s0,1002884 <_malloc_r+0x124>
 1002b14:	ca5ff06f          	j	10027b8 <_malloc_r+0x58>
 1002b18:	0097d713          	srl	a4,a5,0x9
 1002b1c:	00400693          	li	a3,4
 1002b20:	14e6f263          	bgeu	a3,a4,1002c64 <_malloc_r+0x504>
 1002b24:	01400693          	li	a3,20
 1002b28:	32e6e463          	bltu	a3,a4,1002e50 <_malloc_r+0x6f0>
 1002b2c:	05c70613          	add	a2,a4,92
 1002b30:	05b70693          	add	a3,a4,91
 1002b34:	00361613          	sll	a2,a2,0x3
 1002b38:	00c98633          	add	a2,s3,a2
 1002b3c:	00062703          	lw	a4,0(a2)
 1002b40:	ff860613          	add	a2,a2,-8
 1002b44:	00e61863          	bne	a2,a4,1002b54 <_malloc_r+0x3f4>
 1002b48:	2940006f          	j	1002ddc <_malloc_r+0x67c>
 1002b4c:	00872703          	lw	a4,8(a4)
 1002b50:	00e60863          	beq	a2,a4,1002b60 <_malloc_r+0x400>
 1002b54:	00472683          	lw	a3,4(a4)
 1002b58:	ffc6f693          	and	a3,a3,-4
 1002b5c:	fed7e8e3          	bltu	a5,a3,1002b4c <_malloc_r+0x3ec>
 1002b60:	00c72603          	lw	a2,12(a4)
 1002b64:	00c42623          	sw	a2,12(s0)
 1002b68:	00e42423          	sw	a4,8(s0)
 1002b6c:	00862423          	sw	s0,8(a2)
 1002b70:	00872623          	sw	s0,12(a4)
 1002b74:	d85ff06f          	j	10028f8 <_malloc_r+0x198>
 1002b78:	01400713          	li	a4,20
 1002b7c:	10f77863          	bgeu	a4,a5,1002c8c <_malloc_r+0x52c>
 1002b80:	05400713          	li	a4,84
 1002b84:	2ef76463          	bltu	a4,a5,1002e6c <_malloc_r+0x70c>
 1002b88:	00c4d793          	srl	a5,s1,0xc
 1002b8c:	06f78593          	add	a1,a5,111
 1002b90:	06e78813          	add	a6,a5,110
 1002b94:	00359613          	sll	a2,a1,0x3
 1002b98:	ca9ff06f          	j	1002840 <_malloc_r+0xe0>
 1002b9c:	001e0e13          	add	t3,t3,1
 1002ba0:	003e7793          	and	a5,t3,3
 1002ba4:	00850513          	add	a0,a0,8
 1002ba8:	10078063          	beqz	a5,1002ca8 <_malloc_r+0x548>
 1002bac:	00c52783          	lw	a5,12(a0)
 1002bb0:	d9dff06f          	j	100294c <_malloc_r+0x1ec>
 1002bb4:	00842603          	lw	a2,8(s0)
 1002bb8:	0014e593          	or	a1,s1,1
 1002bbc:	00b42223          	sw	a1,4(s0)
 1002bc0:	00f62623          	sw	a5,12(a2)
 1002bc4:	00c7a423          	sw	a2,8(a5)
 1002bc8:	009404b3          	add	s1,s0,s1
 1002bcc:	0099aa23          	sw	s1,20(s3)
 1002bd0:	0099a823          	sw	s1,16(s3)
 1002bd4:	0016e793          	or	a5,a3,1
 1002bd8:	0114a623          	sw	a7,12(s1)
 1002bdc:	0114a423          	sw	a7,8(s1)
 1002be0:	00f4a223          	sw	a5,4(s1)
 1002be4:	00e40733          	add	a4,s0,a4
 1002be8:	00090513          	mv	a0,s2
 1002bec:	00d72023          	sw	a3,0(a4)
 1002bf0:	340000ef          	jal	1002f30 <__malloc_unlock>
 1002bf4:	00840513          	add	a0,s0,8
 1002bf8:	bf5ff06f          	j	10027ec <_malloc_r+0x8c>
 1002bfc:	00f407b3          	add	a5,s0,a5
 1002c00:	0047a703          	lw	a4,4(a5)
 1002c04:	00090513          	mv	a0,s2
 1002c08:	00176713          	or	a4,a4,1
 1002c0c:	00e7a223          	sw	a4,4(a5)
 1002c10:	320000ef          	jal	1002f30 <__malloc_unlock>
 1002c14:	00840513          	add	a0,s0,8
 1002c18:	bd5ff06f          	j	10027ec <_malloc_r+0x8c>
 1002c1c:	0034d593          	srl	a1,s1,0x3
 1002c20:	00848793          	add	a5,s1,8
 1002c24:	b7dff06f          	j	10027a0 <_malloc_r+0x40>
 1002c28:	0014e693          	or	a3,s1,1
 1002c2c:	00d42223          	sw	a3,4(s0)
 1002c30:	009404b3          	add	s1,s0,s1
 1002c34:	0099aa23          	sw	s1,20(s3)
 1002c38:	0099a823          	sw	s1,16(s3)
 1002c3c:	00176693          	or	a3,a4,1
 1002c40:	0114a623          	sw	a7,12(s1)
 1002c44:	0114a423          	sw	a7,8(s1)
 1002c48:	00d4a223          	sw	a3,4(s1)
 1002c4c:	00f407b3          	add	a5,s0,a5
 1002c50:	00090513          	mv	a0,s2
 1002c54:	00e7a023          	sw	a4,0(a5)
 1002c58:	2d8000ef          	jal	1002f30 <__malloc_unlock>
 1002c5c:	00840513          	add	a0,s0,8
 1002c60:	b8dff06f          	j	10027ec <_malloc_r+0x8c>
 1002c64:	0067d713          	srl	a4,a5,0x6
 1002c68:	03970613          	add	a2,a4,57
 1002c6c:	03870693          	add	a3,a4,56
 1002c70:	00361613          	sll	a2,a2,0x3
 1002c74:	ec5ff06f          	j	1002b38 <_malloc_r+0x3d8>
 1002c78:	07340c63          	beq	s0,s3,1002cf0 <_malloc_r+0x590>
 1002c7c:	0089a403          	lw	s0,8(s3)
 1002c80:	00812c03          	lw	s8,8(sp)
 1002c84:	00442783          	lw	a5,4(s0)
 1002c88:	e09ff06f          	j	1002a90 <_malloc_r+0x330>
 1002c8c:	05c78593          	add	a1,a5,92
 1002c90:	05b78813          	add	a6,a5,91
 1002c94:	00359613          	sll	a2,a1,0x3
 1002c98:	ba9ff06f          	j	1002840 <_malloc_r+0xe0>
 1002c9c:	00832783          	lw	a5,8(t1)
 1002ca0:	fff58593          	add	a1,a1,-1
 1002ca4:	26679e63          	bne	a5,t1,1002f20 <_malloc_r+0x7c0>
 1002ca8:	0035f793          	and	a5,a1,3
 1002cac:	ff830313          	add	t1,t1,-8
 1002cb0:	fe0796e3          	bnez	a5,1002c9c <_malloc_r+0x53c>
 1002cb4:	0049a703          	lw	a4,4(s3)
 1002cb8:	fff64793          	not	a5,a2
 1002cbc:	00e7f7b3          	and	a5,a5,a4
 1002cc0:	00f9a223          	sw	a5,4(s3)
 1002cc4:	00161613          	sll	a2,a2,0x1
 1002cc8:	cec7e8e3          	bltu	a5,a2,10029b8 <_malloc_r+0x258>
 1002ccc:	ce0606e3          	beqz	a2,10029b8 <_malloc_r+0x258>
 1002cd0:	00f67733          	and	a4,a2,a5
 1002cd4:	00071a63          	bnez	a4,1002ce8 <_malloc_r+0x588>
 1002cd8:	00161613          	sll	a2,a2,0x1
 1002cdc:	00f67733          	and	a4,a2,a5
 1002ce0:	004e0e13          	add	t3,t3,4
 1002ce4:	fe070ae3          	beqz	a4,1002cd8 <_malloc_r+0x578>
 1002ce8:	000e0593          	mv	a1,t3
 1002cec:	c4dff06f          	j	1002938 <_malloc_r+0x1d8>
 1002cf0:	32418c13          	add	s8,gp,804 # 10070fc <__malloc_current_mallinfo>
 1002cf4:	000c2703          	lw	a4,0(s8)
 1002cf8:	00ea8733          	add	a4,s5,a4
 1002cfc:	00ec2023          	sw	a4,0(s8)
 1002d00:	000ca683          	lw	a3,0(s9)
 1002d04:	fff00793          	li	a5,-1
 1002d08:	18f68663          	beq	a3,a5,1002e94 <_malloc_r+0x734>
 1002d0c:	414b87b3          	sub	a5,s7,s4
 1002d10:	00e787b3          	add	a5,a5,a4
 1002d14:	00fc2023          	sw	a5,0(s8)
 1002d18:	007bfc93          	and	s9,s7,7
 1002d1c:	0c0c8c63          	beqz	s9,1002df4 <_malloc_r+0x694>
 1002d20:	419b8bb3          	sub	s7,s7,s9
 1002d24:	000017b7          	lui	a5,0x1
 1002d28:	00878793          	add	a5,a5,8 # 1008 <__reset-0xffeff8>
 1002d2c:	008b8b93          	add	s7,s7,8
 1002d30:	419785b3          	sub	a1,a5,s9
 1002d34:	015b8ab3          	add	s5,s7,s5
 1002d38:	415585b3          	sub	a1,a1,s5
 1002d3c:	01459593          	sll	a1,a1,0x14
 1002d40:	0145da13          	srl	s4,a1,0x14
 1002d44:	000a0593          	mv	a1,s4
 1002d48:	00090513          	mv	a0,s2
 1002d4c:	1f0010ef          	jal	1003f3c <_sbrk_r>
 1002d50:	fff00793          	li	a5,-1
 1002d54:	18f50063          	beq	a0,a5,1002ed4 <_malloc_r+0x774>
 1002d58:	41750533          	sub	a0,a0,s7
 1002d5c:	01450ab3          	add	s5,a0,s4
 1002d60:	000c2703          	lw	a4,0(s8)
 1002d64:	0179a423          	sw	s7,8(s3)
 1002d68:	001ae793          	or	a5,s5,1
 1002d6c:	00ea05b3          	add	a1,s4,a4
 1002d70:	00bc2023          	sw	a1,0(s8)
 1002d74:	00fba223          	sw	a5,4(s7)
 1002d78:	cf3408e3          	beq	s0,s3,1002a68 <_malloc_r+0x308>
 1002d7c:	00f00693          	li	a3,15
 1002d80:	0b66f063          	bgeu	a3,s6,1002e20 <_malloc_r+0x6c0>
 1002d84:	00442703          	lw	a4,4(s0)
 1002d88:	ff4b0793          	add	a5,s6,-12
 1002d8c:	ff87f793          	and	a5,a5,-8
 1002d90:	00177713          	and	a4,a4,1
 1002d94:	00f76733          	or	a4,a4,a5
 1002d98:	00e42223          	sw	a4,4(s0)
 1002d9c:	00500613          	li	a2,5
 1002da0:	00f40733          	add	a4,s0,a5
 1002da4:	00c72223          	sw	a2,4(a4)
 1002da8:	00c72423          	sw	a2,8(a4)
 1002dac:	00f6e663          	bltu	a3,a5,1002db8 <_malloc_r+0x658>
 1002db0:	004ba783          	lw	a5,4(s7)
 1002db4:	cb5ff06f          	j	1002a68 <_malloc_r+0x308>
 1002db8:	00840593          	add	a1,s0,8
 1002dbc:	00090513          	mv	a0,s2
 1002dc0:	e84ff0ef          	jal	1002444 <_free_r>
 1002dc4:	0089ab83          	lw	s7,8(s3)
 1002dc8:	000c2583          	lw	a1,0(s8)
 1002dcc:	004ba783          	lw	a5,4(s7)
 1002dd0:	c99ff06f          	j	1002a68 <_malloc_r+0x308>
 1002dd4:	010a8a93          	add	s5,s5,16
 1002dd8:	c41ff06f          	j	1002a18 <_malloc_r+0x2b8>
 1002ddc:	4026d693          	sra	a3,a3,0x2
 1002de0:	00100793          	li	a5,1
 1002de4:	00d797b3          	sll	a5,a5,a3
 1002de8:	00f56533          	or	a0,a0,a5
 1002dec:	00a9a223          	sw	a0,4(s3)
 1002df0:	d75ff06f          	j	1002b64 <_malloc_r+0x404>
 1002df4:	015b85b3          	add	a1,s7,s5
 1002df8:	40b005b3          	neg	a1,a1
 1002dfc:	01459593          	sll	a1,a1,0x14
 1002e00:	0145da13          	srl	s4,a1,0x14
 1002e04:	000a0593          	mv	a1,s4
 1002e08:	00090513          	mv	a0,s2
 1002e0c:	130010ef          	jal	1003f3c <_sbrk_r>
 1002e10:	fff00793          	li	a5,-1
 1002e14:	f4f512e3          	bne	a0,a5,1002d58 <_malloc_r+0x5f8>
 1002e18:	00000a13          	li	s4,0
 1002e1c:	f45ff06f          	j	1002d60 <_malloc_r+0x600>
 1002e20:	00812c03          	lw	s8,8(sp)
 1002e24:	00100793          	li	a5,1
 1002e28:	00fba223          	sw	a5,4(s7)
 1002e2c:	00090513          	mv	a0,s2
 1002e30:	100000ef          	jal	1002f30 <__malloc_unlock>
 1002e34:	00000513          	li	a0,0
 1002e38:	01812a03          	lw	s4,24(sp)
 1002e3c:	01412a83          	lw	s5,20(sp)
 1002e40:	01012b03          	lw	s6,16(sp)
 1002e44:	00c12b83          	lw	s7,12(sp)
 1002e48:	00412c83          	lw	s9,4(sp)
 1002e4c:	9a1ff06f          	j	10027ec <_malloc_r+0x8c>
 1002e50:	05400693          	li	a3,84
 1002e54:	04e6e463          	bltu	a3,a4,1002e9c <_malloc_r+0x73c>
 1002e58:	00c7d713          	srl	a4,a5,0xc
 1002e5c:	06f70613          	add	a2,a4,111
 1002e60:	06e70693          	add	a3,a4,110
 1002e64:	00361613          	sll	a2,a2,0x3
 1002e68:	cd1ff06f          	j	1002b38 <_malloc_r+0x3d8>
 1002e6c:	15400713          	li	a4,340
 1002e70:	04f76463          	bltu	a4,a5,1002eb8 <_malloc_r+0x758>
 1002e74:	00f4d793          	srl	a5,s1,0xf
 1002e78:	07878593          	add	a1,a5,120
 1002e7c:	07778813          	add	a6,a5,119
 1002e80:	00359613          	sll	a2,a1,0x3
 1002e84:	9bdff06f          	j	1002840 <_malloc_r+0xe0>
 1002e88:	0089a403          	lw	s0,8(s3)
 1002e8c:	00442783          	lw	a5,4(s0)
 1002e90:	c01ff06f          	j	1002a90 <_malloc_r+0x330>
 1002e94:	017ca023          	sw	s7,0(s9)
 1002e98:	e81ff06f          	j	1002d18 <_malloc_r+0x5b8>
 1002e9c:	15400693          	li	a3,340
 1002ea0:	04e6e463          	bltu	a3,a4,1002ee8 <_malloc_r+0x788>
 1002ea4:	00f7d713          	srl	a4,a5,0xf
 1002ea8:	07870613          	add	a2,a4,120
 1002eac:	07770693          	add	a3,a4,119
 1002eb0:	00361613          	sll	a2,a2,0x3
 1002eb4:	c85ff06f          	j	1002b38 <_malloc_r+0x3d8>
 1002eb8:	55400713          	li	a4,1364
 1002ebc:	04f76463          	bltu	a4,a5,1002f04 <_malloc_r+0x7a4>
 1002ec0:	0124d793          	srl	a5,s1,0x12
 1002ec4:	07d78593          	add	a1,a5,125
 1002ec8:	07c78813          	add	a6,a5,124
 1002ecc:	00359613          	sll	a2,a1,0x3
 1002ed0:	971ff06f          	j	1002840 <_malloc_r+0xe0>
 1002ed4:	ff8c8c93          	add	s9,s9,-8
 1002ed8:	019a8ab3          	add	s5,s5,s9
 1002edc:	417a8ab3          	sub	s5,s5,s7
 1002ee0:	00000a13          	li	s4,0
 1002ee4:	e7dff06f          	j	1002d60 <_malloc_r+0x600>
 1002ee8:	55400693          	li	a3,1364
 1002eec:	02e6e463          	bltu	a3,a4,1002f14 <_malloc_r+0x7b4>
 1002ef0:	0127d713          	srl	a4,a5,0x12
 1002ef4:	07d70613          	add	a2,a4,125
 1002ef8:	07c70693          	add	a3,a4,124
 1002efc:	00361613          	sll	a2,a2,0x3
 1002f00:	c39ff06f          	j	1002b38 <_malloc_r+0x3d8>
 1002f04:	3f800613          	li	a2,1016
 1002f08:	07f00593          	li	a1,127
 1002f0c:	07e00813          	li	a6,126
 1002f10:	931ff06f          	j	1002840 <_malloc_r+0xe0>
 1002f14:	3f800613          	li	a2,1016
 1002f18:	07e00693          	li	a3,126
 1002f1c:	c1dff06f          	j	1002b38 <_malloc_r+0x3d8>
 1002f20:	0049a783          	lw	a5,4(s3)
 1002f24:	da1ff06f          	j	1002cc4 <_malloc_r+0x564>

01002f28 <__malloc_lock>:
 1002f28:	fb818513          	add	a0,gp,-72 # 1006d90 <__lock___malloc_recursive_mutex>
 1002f2c:	fbdfe06f          	j	1001ee8 <__retarget_lock_acquire_recursive>

01002f30 <__malloc_unlock>:
 1002f30:	fb818513          	add	a0,gp,-72 # 1006d90 <__lock___malloc_recursive_mutex>
 1002f34:	fcdfe06f          	j	1001f00 <__retarget_lock_release_recursive>

01002f38 <_fclose_r>:
 1002f38:	ff010113          	add	sp,sp,-16
 1002f3c:	00112623          	sw	ra,12(sp)
 1002f40:	01212023          	sw	s2,0(sp)
 1002f44:	0e058263          	beqz	a1,1003028 <_fclose_r+0xf0>
 1002f48:	00812423          	sw	s0,8(sp)
 1002f4c:	00912223          	sw	s1,4(sp)
 1002f50:	00058413          	mv	s0,a1
 1002f54:	00050493          	mv	s1,a0
 1002f58:	00050663          	beqz	a0,1002f64 <_fclose_r+0x2c>
 1002f5c:	03452783          	lw	a5,52(a0)
 1002f60:	10078063          	beqz	a5,1003060 <_fclose_r+0x128>
 1002f64:	06442783          	lw	a5,100(s0)
 1002f68:	00c41703          	lh	a4,12(s0)
 1002f6c:	0017f793          	and	a5,a5,1
 1002f70:	0a079663          	bnez	a5,100301c <_fclose_r+0xe4>
 1002f74:	20077713          	and	a4,a4,512
 1002f78:	0e070863          	beqz	a4,1003068 <_fclose_r+0x130>
 1002f7c:	00040593          	mv	a1,s0
 1002f80:	00048513          	mv	a0,s1
 1002f84:	130000ef          	jal	10030b4 <__sflush_r>
 1002f88:	02c42783          	lw	a5,44(s0)
 1002f8c:	00050913          	mv	s2,a0
 1002f90:	00078a63          	beqz	a5,1002fa4 <_fclose_r+0x6c>
 1002f94:	01c42583          	lw	a1,28(s0)
 1002f98:	00048513          	mv	a0,s1
 1002f9c:	000780e7          	jalr	a5
 1002fa0:	0a054063          	bltz	a0,1003040 <_fclose_r+0x108>
 1002fa4:	00c45783          	lhu	a5,12(s0)
 1002fa8:	0807f793          	and	a5,a5,128
 1002fac:	0a079263          	bnez	a5,1003050 <_fclose_r+0x118>
 1002fb0:	03042583          	lw	a1,48(s0)
 1002fb4:	00058c63          	beqz	a1,1002fcc <_fclose_r+0x94>
 1002fb8:	04040793          	add	a5,s0,64
 1002fbc:	00f58663          	beq	a1,a5,1002fc8 <_fclose_r+0x90>
 1002fc0:	00048513          	mv	a0,s1
 1002fc4:	c80ff0ef          	jal	1002444 <_free_r>
 1002fc8:	02042823          	sw	zero,48(s0)
 1002fcc:	04442583          	lw	a1,68(s0)
 1002fd0:	00058863          	beqz	a1,1002fe0 <_fclose_r+0xa8>
 1002fd4:	00048513          	mv	a0,s1
 1002fd8:	c6cff0ef          	jal	1002444 <_free_r>
 1002fdc:	04042223          	sw	zero,68(s0)
 1002fe0:	e44fe0ef          	jal	1001624 <__sfp_lock_acquire>
 1002fe4:	06442783          	lw	a5,100(s0)
 1002fe8:	00041623          	sh	zero,12(s0)
 1002fec:	0017f793          	and	a5,a5,1
 1002ff0:	0a078663          	beqz	a5,100309c <_fclose_r+0x164>
 1002ff4:	05842503          	lw	a0,88(s0)
 1002ff8:	ee9fe0ef          	jal	1001ee0 <__retarget_lock_close_recursive>
 1002ffc:	e30fe0ef          	jal	100162c <__sfp_lock_release>
 1003000:	00c12083          	lw	ra,12(sp)
 1003004:	00812403          	lw	s0,8(sp)
 1003008:	00412483          	lw	s1,4(sp)
 100300c:	00090513          	mv	a0,s2
 1003010:	00012903          	lw	s2,0(sp)
 1003014:	01010113          	add	sp,sp,16
 1003018:	00008067          	ret
 100301c:	f60710e3          	bnez	a4,1002f7c <_fclose_r+0x44>
 1003020:	00812403          	lw	s0,8(sp)
 1003024:	00412483          	lw	s1,4(sp)
 1003028:	00000913          	li	s2,0
 100302c:	00c12083          	lw	ra,12(sp)
 1003030:	00090513          	mv	a0,s2
 1003034:	00012903          	lw	s2,0(sp)
 1003038:	01010113          	add	sp,sp,16
 100303c:	00008067          	ret
 1003040:	00c45783          	lhu	a5,12(s0)
 1003044:	fff00913          	li	s2,-1
 1003048:	0807f793          	and	a5,a5,128
 100304c:	f60782e3          	beqz	a5,1002fb0 <_fclose_r+0x78>
 1003050:	01042583          	lw	a1,16(s0)
 1003054:	00048513          	mv	a0,s1
 1003058:	becff0ef          	jal	1002444 <_free_r>
 100305c:	f55ff06f          	j	1002fb0 <_fclose_r+0x78>
 1003060:	d64fe0ef          	jal	10015c4 <__sinit>
 1003064:	f01ff06f          	j	1002f64 <_fclose_r+0x2c>
 1003068:	05842503          	lw	a0,88(s0)
 100306c:	e7dfe0ef          	jal	1001ee8 <__retarget_lock_acquire_recursive>
 1003070:	00c41783          	lh	a5,12(s0)
 1003074:	f00794e3          	bnez	a5,1002f7c <_fclose_r+0x44>
 1003078:	06442783          	lw	a5,100(s0)
 100307c:	0017f793          	and	a5,a5,1
 1003080:	fa0790e3          	bnez	a5,1003020 <_fclose_r+0xe8>
 1003084:	05842503          	lw	a0,88(s0)
 1003088:	00000913          	li	s2,0
 100308c:	e75fe0ef          	jal	1001f00 <__retarget_lock_release_recursive>
 1003090:	00812403          	lw	s0,8(sp)
 1003094:	00412483          	lw	s1,4(sp)
 1003098:	f95ff06f          	j	100302c <_fclose_r+0xf4>
 100309c:	05842503          	lw	a0,88(s0)
 10030a0:	e61fe0ef          	jal	1001f00 <__retarget_lock_release_recursive>
 10030a4:	f51ff06f          	j	1002ff4 <_fclose_r+0xbc>

010030a8 <fclose>:
 10030a8:	00050593          	mv	a1,a0
 10030ac:	8201a503          	lw	a0,-2016(gp) # 10065f8 <_impure_ptr>
 10030b0:	e89ff06f          	j	1002f38 <_fclose_r>

010030b4 <__sflush_r>:
 10030b4:	00c59703          	lh	a4,12(a1)
 10030b8:	fe010113          	add	sp,sp,-32
 10030bc:	00812c23          	sw	s0,24(sp)
 10030c0:	01312623          	sw	s3,12(sp)
 10030c4:	00112e23          	sw	ra,28(sp)
 10030c8:	00877793          	and	a5,a4,8
 10030cc:	00058413          	mv	s0,a1
 10030d0:	00050993          	mv	s3,a0
 10030d4:	12079063          	bnez	a5,10031f4 <__sflush_r+0x140>
 10030d8:	000017b7          	lui	a5,0x1
 10030dc:	80078793          	add	a5,a5,-2048 # 800 <__reset-0xfff800>
 10030e0:	0045a683          	lw	a3,4(a1)
 10030e4:	00f767b3          	or	a5,a4,a5
 10030e8:	00f59623          	sh	a5,12(a1)
 10030ec:	18d05263          	blez	a3,1003270 <__sflush_r+0x1bc>
 10030f0:	02842803          	lw	a6,40(s0)
 10030f4:	0e080463          	beqz	a6,10031dc <__sflush_r+0x128>
 10030f8:	00912a23          	sw	s1,20(sp)
 10030fc:	01371693          	sll	a3,a4,0x13
 1003100:	0009a483          	lw	s1,0(s3)
 1003104:	0009a023          	sw	zero,0(s3)
 1003108:	01c42583          	lw	a1,28(s0)
 100310c:	1606ce63          	bltz	a3,1003288 <__sflush_r+0x1d4>
 1003110:	00000613          	li	a2,0
 1003114:	00100693          	li	a3,1
 1003118:	00098513          	mv	a0,s3
 100311c:	000800e7          	jalr	a6
 1003120:	fff00793          	li	a5,-1
 1003124:	00050613          	mv	a2,a0
 1003128:	1af50463          	beq	a0,a5,10032d0 <__sflush_r+0x21c>
 100312c:	00c41783          	lh	a5,12(s0)
 1003130:	02842803          	lw	a6,40(s0)
 1003134:	01c42583          	lw	a1,28(s0)
 1003138:	0047f793          	and	a5,a5,4
 100313c:	00078e63          	beqz	a5,1003158 <__sflush_r+0xa4>
 1003140:	00442703          	lw	a4,4(s0)
 1003144:	03042783          	lw	a5,48(s0)
 1003148:	40e60633          	sub	a2,a2,a4
 100314c:	00078663          	beqz	a5,1003158 <__sflush_r+0xa4>
 1003150:	03c42783          	lw	a5,60(s0)
 1003154:	40f60633          	sub	a2,a2,a5
 1003158:	00000693          	li	a3,0
 100315c:	00098513          	mv	a0,s3
 1003160:	000800e7          	jalr	a6
 1003164:	fff00793          	li	a5,-1
 1003168:	12f51463          	bne	a0,a5,1003290 <__sflush_r+0x1dc>
 100316c:	0009a683          	lw	a3,0(s3)
 1003170:	01d00793          	li	a5,29
 1003174:	00c41703          	lh	a4,12(s0)
 1003178:	16d7ea63          	bltu	a5,a3,10032ec <__sflush_r+0x238>
 100317c:	204007b7          	lui	a5,0x20400
 1003180:	00178793          	add	a5,a5,1 # 20400001 <__alt_mem_onchip_memory2_0+0x1e3d8001>
 1003184:	00d7d7b3          	srl	a5,a5,a3
 1003188:	0017f793          	and	a5,a5,1
 100318c:	16078063          	beqz	a5,10032ec <__sflush_r+0x238>
 1003190:	01042603          	lw	a2,16(s0)
 1003194:	fffff7b7          	lui	a5,0xfffff
 1003198:	7ff78793          	add	a5,a5,2047 # fffff7ff <__alt_mem_onchip_memory2_0+0xfdfd77ff>
 100319c:	00f777b3          	and	a5,a4,a5
 10031a0:	00f41623          	sh	a5,12(s0)
 10031a4:	00042223          	sw	zero,4(s0)
 10031a8:	00c42023          	sw	a2,0(s0)
 10031ac:	01371793          	sll	a5,a4,0x13
 10031b0:	0007d463          	bgez	a5,10031b8 <__sflush_r+0x104>
 10031b4:	10068263          	beqz	a3,10032b8 <__sflush_r+0x204>
 10031b8:	03042583          	lw	a1,48(s0)
 10031bc:	0099a023          	sw	s1,0(s3)
 10031c0:	10058463          	beqz	a1,10032c8 <__sflush_r+0x214>
 10031c4:	04040793          	add	a5,s0,64
 10031c8:	00f58663          	beq	a1,a5,10031d4 <__sflush_r+0x120>
 10031cc:	00098513          	mv	a0,s3
 10031d0:	a74ff0ef          	jal	1002444 <_free_r>
 10031d4:	01412483          	lw	s1,20(sp)
 10031d8:	02042823          	sw	zero,48(s0)
 10031dc:	00000513          	li	a0,0
 10031e0:	01c12083          	lw	ra,28(sp)
 10031e4:	01812403          	lw	s0,24(sp)
 10031e8:	00c12983          	lw	s3,12(sp)
 10031ec:	02010113          	add	sp,sp,32
 10031f0:	00008067          	ret
 10031f4:	01212823          	sw	s2,16(sp)
 10031f8:	0105a903          	lw	s2,16(a1)
 10031fc:	08090263          	beqz	s2,1003280 <__sflush_r+0x1cc>
 1003200:	00912a23          	sw	s1,20(sp)
 1003204:	0005a483          	lw	s1,0(a1)
 1003208:	00377713          	and	a4,a4,3
 100320c:	0125a023          	sw	s2,0(a1)
 1003210:	412484b3          	sub	s1,s1,s2
 1003214:	00000793          	li	a5,0
 1003218:	00071463          	bnez	a4,1003220 <__sflush_r+0x16c>
 100321c:	0145a783          	lw	a5,20(a1)
 1003220:	00f42423          	sw	a5,8(s0)
 1003224:	00904863          	bgtz	s1,1003234 <__sflush_r+0x180>
 1003228:	0540006f          	j	100327c <__sflush_r+0x1c8>
 100322c:	00a90933          	add	s2,s2,a0
 1003230:	04905663          	blez	s1,100327c <__sflush_r+0x1c8>
 1003234:	02442783          	lw	a5,36(s0)
 1003238:	01c42583          	lw	a1,28(s0)
 100323c:	00048693          	mv	a3,s1
 1003240:	00090613          	mv	a2,s2
 1003244:	00098513          	mv	a0,s3
 1003248:	000780e7          	jalr	a5
 100324c:	40a484b3          	sub	s1,s1,a0
 1003250:	fca04ee3          	bgtz	a0,100322c <__sflush_r+0x178>
 1003254:	00c41703          	lh	a4,12(s0)
 1003258:	01012903          	lw	s2,16(sp)
 100325c:	04076713          	or	a4,a4,64
 1003260:	01412483          	lw	s1,20(sp)
 1003264:	00e41623          	sh	a4,12(s0)
 1003268:	fff00513          	li	a0,-1
 100326c:	f75ff06f          	j	10031e0 <__sflush_r+0x12c>
 1003270:	03c5a683          	lw	a3,60(a1)
 1003274:	e6d04ee3          	bgtz	a3,10030f0 <__sflush_r+0x3c>
 1003278:	f65ff06f          	j	10031dc <__sflush_r+0x128>
 100327c:	01412483          	lw	s1,20(sp)
 1003280:	01012903          	lw	s2,16(sp)
 1003284:	f59ff06f          	j	10031dc <__sflush_r+0x128>
 1003288:	05042603          	lw	a2,80(s0)
 100328c:	eadff06f          	j	1003138 <__sflush_r+0x84>
 1003290:	00c41703          	lh	a4,12(s0)
 1003294:	01042683          	lw	a3,16(s0)
 1003298:	fffff7b7          	lui	a5,0xfffff
 100329c:	7ff78793          	add	a5,a5,2047 # fffff7ff <__alt_mem_onchip_memory2_0+0xfdfd77ff>
 10032a0:	00f777b3          	and	a5,a4,a5
 10032a4:	00f41623          	sh	a5,12(s0)
 10032a8:	00042223          	sw	zero,4(s0)
 10032ac:	00d42023          	sw	a3,0(s0)
 10032b0:	01371793          	sll	a5,a4,0x13
 10032b4:	f007d2e3          	bgez	a5,10031b8 <__sflush_r+0x104>
 10032b8:	03042583          	lw	a1,48(s0)
 10032bc:	04a42823          	sw	a0,80(s0)
 10032c0:	0099a023          	sw	s1,0(s3)
 10032c4:	f00590e3          	bnez	a1,10031c4 <__sflush_r+0x110>
 10032c8:	01412483          	lw	s1,20(sp)
 10032cc:	f11ff06f          	j	10031dc <__sflush_r+0x128>
 10032d0:	0009a783          	lw	a5,0(s3)
 10032d4:	e4078ce3          	beqz	a5,100312c <__sflush_r+0x78>
 10032d8:	01d00713          	li	a4,29
 10032dc:	00e78c63          	beq	a5,a4,10032f4 <__sflush_r+0x240>
 10032e0:	01600713          	li	a4,22
 10032e4:	00e78863          	beq	a5,a4,10032f4 <__sflush_r+0x240>
 10032e8:	00c41703          	lh	a4,12(s0)
 10032ec:	04076713          	or	a4,a4,64
 10032f0:	f71ff06f          	j	1003260 <__sflush_r+0x1ac>
 10032f4:	0099a023          	sw	s1,0(s3)
 10032f8:	01412483          	lw	s1,20(sp)
 10032fc:	ee1ff06f          	j	10031dc <__sflush_r+0x128>

01003300 <_fflush_r>:
 1003300:	ff010113          	add	sp,sp,-16
 1003304:	00812423          	sw	s0,8(sp)
 1003308:	00912223          	sw	s1,4(sp)
 100330c:	00112623          	sw	ra,12(sp)
 1003310:	01212023          	sw	s2,0(sp)
 1003314:	00050493          	mv	s1,a0
 1003318:	00058413          	mv	s0,a1
 100331c:	00050663          	beqz	a0,1003328 <_fflush_r+0x28>
 1003320:	03452783          	lw	a5,52(a0)
 1003324:	0a078a63          	beqz	a5,10033d8 <_fflush_r+0xd8>
 1003328:	00c41783          	lh	a5,12(s0)
 100332c:	00000913          	li	s2,0
 1003330:	04078063          	beqz	a5,1003370 <_fflush_r+0x70>
 1003334:	06442703          	lw	a4,100(s0)
 1003338:	00177713          	and	a4,a4,1
 100333c:	00071663          	bnez	a4,1003348 <_fflush_r+0x48>
 1003340:	2007f793          	and	a5,a5,512
 1003344:	04078463          	beqz	a5,100338c <_fflush_r+0x8c>
 1003348:	00040593          	mv	a1,s0
 100334c:	00048513          	mv	a0,s1
 1003350:	d65ff0ef          	jal	10030b4 <__sflush_r>
 1003354:	06442783          	lw	a5,100(s0)
 1003358:	00050913          	mv	s2,a0
 100335c:	0017f793          	and	a5,a5,1
 1003360:	00079863          	bnez	a5,1003370 <_fflush_r+0x70>
 1003364:	00c45783          	lhu	a5,12(s0)
 1003368:	2007f793          	and	a5,a5,512
 100336c:	04078463          	beqz	a5,10033b4 <_fflush_r+0xb4>
 1003370:	00c12083          	lw	ra,12(sp)
 1003374:	00812403          	lw	s0,8(sp)
 1003378:	00412483          	lw	s1,4(sp)
 100337c:	00090513          	mv	a0,s2
 1003380:	00012903          	lw	s2,0(sp)
 1003384:	01010113          	add	sp,sp,16
 1003388:	00008067          	ret
 100338c:	05842503          	lw	a0,88(s0)
 1003390:	b59fe0ef          	jal	1001ee8 <__retarget_lock_acquire_recursive>
 1003394:	00040593          	mv	a1,s0
 1003398:	00048513          	mv	a0,s1
 100339c:	d19ff0ef          	jal	10030b4 <__sflush_r>
 10033a0:	06442783          	lw	a5,100(s0)
 10033a4:	00050913          	mv	s2,a0
 10033a8:	0017f793          	and	a5,a5,1
 10033ac:	fc0792e3          	bnez	a5,1003370 <_fflush_r+0x70>
 10033b0:	fb5ff06f          	j	1003364 <_fflush_r+0x64>
 10033b4:	05842503          	lw	a0,88(s0)
 10033b8:	b49fe0ef          	jal	1001f00 <__retarget_lock_release_recursive>
 10033bc:	00c12083          	lw	ra,12(sp)
 10033c0:	00812403          	lw	s0,8(sp)
 10033c4:	00412483          	lw	s1,4(sp)
 10033c8:	00090513          	mv	a0,s2
 10033cc:	00012903          	lw	s2,0(sp)
 10033d0:	01010113          	add	sp,sp,16
 10033d4:	00008067          	ret
 10033d8:	9ecfe0ef          	jal	10015c4 <__sinit>
 10033dc:	f4dff06f          	j	1003328 <_fflush_r+0x28>

010033e0 <fflush>:
 10033e0:	0a050a63          	beqz	a0,1003494 <fflush+0xb4>
 10033e4:	ff010113          	add	sp,sp,-16
 10033e8:	00812423          	sw	s0,8(sp)
 10033ec:	01212023          	sw	s2,0(sp)
 10033f0:	00112623          	sw	ra,12(sp)
 10033f4:	00912223          	sw	s1,4(sp)
 10033f8:	8201a903          	lw	s2,-2016(gp) # 10065f8 <_impure_ptr>
 10033fc:	00050413          	mv	s0,a0
 1003400:	00090663          	beqz	s2,100340c <fflush+0x2c>
 1003404:	03492783          	lw	a5,52(s2)
 1003408:	06078463          	beqz	a5,1003470 <fflush+0x90>
 100340c:	00c41783          	lh	a5,12(s0)
 1003410:	00000493          	li	s1,0
 1003414:	04078063          	beqz	a5,1003454 <fflush+0x74>
 1003418:	06442703          	lw	a4,100(s0)
 100341c:	00177713          	and	a4,a4,1
 1003420:	00071663          	bnez	a4,100342c <fflush+0x4c>
 1003424:	2007f793          	and	a5,a5,512
 1003428:	04078a63          	beqz	a5,100347c <fflush+0x9c>
 100342c:	00040593          	mv	a1,s0
 1003430:	00090513          	mv	a0,s2
 1003434:	c81ff0ef          	jal	10030b4 <__sflush_r>
 1003438:	06442783          	lw	a5,100(s0)
 100343c:	00050493          	mv	s1,a0
 1003440:	0017f793          	and	a5,a5,1
 1003444:	00079863          	bnez	a5,1003454 <fflush+0x74>
 1003448:	00c45783          	lhu	a5,12(s0)
 100344c:	2007f793          	and	a5,a5,512
 1003450:	02078c63          	beqz	a5,1003488 <fflush+0xa8>
 1003454:	00c12083          	lw	ra,12(sp)
 1003458:	00812403          	lw	s0,8(sp)
 100345c:	00012903          	lw	s2,0(sp)
 1003460:	00048513          	mv	a0,s1
 1003464:	00412483          	lw	s1,4(sp)
 1003468:	01010113          	add	sp,sp,16
 100346c:	00008067          	ret
 1003470:	00090513          	mv	a0,s2
 1003474:	950fe0ef          	jal	10015c4 <__sinit>
 1003478:	f95ff06f          	j	100340c <fflush+0x2c>
 100347c:	05842503          	lw	a0,88(s0)
 1003480:	a69fe0ef          	jal	1001ee8 <__retarget_lock_acquire_recursive>
 1003484:	fa9ff06f          	j	100342c <fflush+0x4c>
 1003488:	05842503          	lw	a0,88(s0)
 100348c:	a75fe0ef          	jal	1001f00 <__retarget_lock_release_recursive>
 1003490:	fc5ff06f          	j	1003454 <fflush+0x74>
 1003494:	00003617          	auipc	a2,0x3
 1003498:	c1060613          	add	a2,a2,-1008 # 10060a4 <__sglue>
 100349c:	00000597          	auipc	a1,0x0
 10034a0:	e6458593          	add	a1,a1,-412 # 1003300 <_fflush_r>
 10034a4:	00003517          	auipc	a0,0x3
 10034a8:	c0c50513          	add	a0,a0,-1012 # 10060b0 <_impure_data>
 10034ac:	9e8fe06f          	j	1001694 <_fwalk_sglue>

010034b0 <__sfvwrite_r>:
 10034b0:	00862783          	lw	a5,8(a2)
 10034b4:	2c078463          	beqz	a5,100377c <__sfvwrite_r+0x2cc>
 10034b8:	00c59683          	lh	a3,12(a1)
 10034bc:	fd010113          	add	sp,sp,-48
 10034c0:	02812423          	sw	s0,40(sp)
 10034c4:	01412c23          	sw	s4,24(sp)
 10034c8:	01612823          	sw	s6,16(sp)
 10034cc:	02112623          	sw	ra,44(sp)
 10034d0:	0086f793          	and	a5,a3,8
 10034d4:	00060b13          	mv	s6,a2
 10034d8:	00050a13          	mv	s4,a0
 10034dc:	00058413          	mv	s0,a1
 10034e0:	08078e63          	beqz	a5,100357c <__sfvwrite_r+0xcc>
 10034e4:	0105a783          	lw	a5,16(a1)
 10034e8:	08078a63          	beqz	a5,100357c <__sfvwrite_r+0xcc>
 10034ec:	02912223          	sw	s1,36(sp)
 10034f0:	03212023          	sw	s2,32(sp)
 10034f4:	01312e23          	sw	s3,28(sp)
 10034f8:	01512a23          	sw	s5,20(sp)
 10034fc:	0026f793          	and	a5,a3,2
 1003500:	000b2483          	lw	s1,0(s6)
 1003504:	0a078463          	beqz	a5,10035ac <__sfvwrite_r+0xfc>
 1003508:	02442783          	lw	a5,36(s0)
 100350c:	01c42583          	lw	a1,28(s0)
 1003510:	80000ab7          	lui	s5,0x80000
 1003514:	00000993          	li	s3,0
 1003518:	00000913          	li	s2,0
 100351c:	c00a8a93          	add	s5,s5,-1024 # 7ffffc00 <__alt_mem_onchip_memory2_0+0x7dfd7c00>
 1003520:	00098613          	mv	a2,s3
 1003524:	000a0513          	mv	a0,s4
 1003528:	04090263          	beqz	s2,100356c <__sfvwrite_r+0xbc>
 100352c:	00090693          	mv	a3,s2
 1003530:	012af463          	bgeu	s5,s2,1003538 <__sfvwrite_r+0x88>
 1003534:	000a8693          	mv	a3,s5
 1003538:	000780e7          	jalr	a5
 100353c:	46a05263          	blez	a0,10039a0 <__sfvwrite_r+0x4f0>
 1003540:	008b2783          	lw	a5,8(s6)
 1003544:	00a989b3          	add	s3,s3,a0
 1003548:	40a90933          	sub	s2,s2,a0
 100354c:	40a787b3          	sub	a5,a5,a0
 1003550:	00fb2423          	sw	a5,8(s6)
 1003554:	1a078663          	beqz	a5,1003700 <__sfvwrite_r+0x250>
 1003558:	02442783          	lw	a5,36(s0)
 100355c:	01c42583          	lw	a1,28(s0)
 1003560:	00098613          	mv	a2,s3
 1003564:	000a0513          	mv	a0,s4
 1003568:	fc0912e3          	bnez	s2,100352c <__sfvwrite_r+0x7c>
 100356c:	0004a983          	lw	s3,0(s1)
 1003570:	0044a903          	lw	s2,4(s1)
 1003574:	00848493          	add	s1,s1,8
 1003578:	fa9ff06f          	j	1003520 <__sfvwrite_r+0x70>
 100357c:	00040593          	mv	a1,s0
 1003580:	000a0513          	mv	a0,s4
 1003584:	6b0000ef          	jal	1003c34 <__swsetup_r>
 1003588:	1c051c63          	bnez	a0,1003760 <__sfvwrite_r+0x2b0>
 100358c:	00c41683          	lh	a3,12(s0)
 1003590:	02912223          	sw	s1,36(sp)
 1003594:	03212023          	sw	s2,32(sp)
 1003598:	01312e23          	sw	s3,28(sp)
 100359c:	01512a23          	sw	s5,20(sp)
 10035a0:	0026f793          	and	a5,a3,2
 10035a4:	000b2483          	lw	s1,0(s6)
 10035a8:	f60790e3          	bnez	a5,1003508 <__sfvwrite_r+0x58>
 10035ac:	01712623          	sw	s7,12(sp)
 10035b0:	01812423          	sw	s8,8(sp)
 10035b4:	0016f793          	and	a5,a3,1
 10035b8:	1c079663          	bnez	a5,1003784 <__sfvwrite_r+0x2d4>
 10035bc:	00042783          	lw	a5,0(s0)
 10035c0:	00842703          	lw	a4,8(s0)
 10035c4:	80000ab7          	lui	s5,0x80000
 10035c8:	01912223          	sw	s9,4(sp)
 10035cc:	00000b93          	li	s7,0
 10035d0:	00000993          	li	s3,0
 10035d4:	fffa8a93          	add	s5,s5,-1 # 7fffffff <__alt_mem_onchip_memory2_0+0x7dfd7fff>
 10035d8:	00078513          	mv	a0,a5
 10035dc:	00070c13          	mv	s8,a4
 10035e0:	10098263          	beqz	s3,10036e4 <__sfvwrite_r+0x234>
 10035e4:	2006f613          	and	a2,a3,512
 10035e8:	28060863          	beqz	a2,1003878 <__sfvwrite_r+0x3c8>
 10035ec:	00070c93          	mv	s9,a4
 10035f0:	32e9e863          	bltu	s3,a4,1003920 <__sfvwrite_r+0x470>
 10035f4:	4806f713          	and	a4,a3,1152
 10035f8:	08070a63          	beqz	a4,100368c <__sfvwrite_r+0x1dc>
 10035fc:	01442603          	lw	a2,20(s0)
 1003600:	01042583          	lw	a1,16(s0)
 1003604:	00161713          	sll	a4,a2,0x1
 1003608:	00c70733          	add	a4,a4,a2
 100360c:	40b78933          	sub	s2,a5,a1
 1003610:	01f75c13          	srl	s8,a4,0x1f
 1003614:	00ec0c33          	add	s8,s8,a4
 1003618:	00190793          	add	a5,s2,1
 100361c:	401c5c13          	sra	s8,s8,0x1
 1003620:	013787b3          	add	a5,a5,s3
 1003624:	000c0613          	mv	a2,s8
 1003628:	00fc7663          	bgeu	s8,a5,1003634 <__sfvwrite_r+0x184>
 100362c:	00078c13          	mv	s8,a5
 1003630:	00078613          	mv	a2,a5
 1003634:	4006f693          	and	a3,a3,1024
 1003638:	32068063          	beqz	a3,1003958 <__sfvwrite_r+0x4a8>
 100363c:	00060593          	mv	a1,a2
 1003640:	000a0513          	mv	a0,s4
 1003644:	91cff0ef          	jal	1002760 <_malloc_r>
 1003648:	00050c93          	mv	s9,a0
 100364c:	34050e63          	beqz	a0,10039a8 <__sfvwrite_r+0x4f8>
 1003650:	01042583          	lw	a1,16(s0)
 1003654:	00090613          	mv	a2,s2
 1003658:	29d000ef          	jal	10040f4 <memcpy>
 100365c:	00c45783          	lhu	a5,12(s0)
 1003660:	b7f7f793          	and	a5,a5,-1153
 1003664:	0807e793          	or	a5,a5,128
 1003668:	00f41623          	sh	a5,12(s0)
 100366c:	012c8533          	add	a0,s9,s2
 1003670:	412c07b3          	sub	a5,s8,s2
 1003674:	01942823          	sw	s9,16(s0)
 1003678:	01842a23          	sw	s8,20(s0)
 100367c:	00a42023          	sw	a0,0(s0)
 1003680:	00098c13          	mv	s8,s3
 1003684:	00f42423          	sw	a5,8(s0)
 1003688:	00098c93          	mv	s9,s3
 100368c:	000c8613          	mv	a2,s9
 1003690:	000b8593          	mv	a1,s7
 1003694:	155000ef          	jal	1003fe8 <memmove>
 1003698:	00842703          	lw	a4,8(s0)
 100369c:	00042783          	lw	a5,0(s0)
 10036a0:	00098913          	mv	s2,s3
 10036a4:	41870733          	sub	a4,a4,s8
 10036a8:	019787b3          	add	a5,a5,s9
 10036ac:	00e42423          	sw	a4,8(s0)
 10036b0:	00f42023          	sw	a5,0(s0)
 10036b4:	00000993          	li	s3,0
 10036b8:	008b2783          	lw	a5,8(s6)
 10036bc:	012b8bb3          	add	s7,s7,s2
 10036c0:	412787b3          	sub	a5,a5,s2
 10036c4:	00fb2423          	sw	a5,8(s6)
 10036c8:	02078663          	beqz	a5,10036f4 <__sfvwrite_r+0x244>
 10036cc:	00042783          	lw	a5,0(s0)
 10036d0:	00842703          	lw	a4,8(s0)
 10036d4:	00c41683          	lh	a3,12(s0)
 10036d8:	00078513          	mv	a0,a5
 10036dc:	00070c13          	mv	s8,a4
 10036e0:	f00992e3          	bnez	s3,10035e4 <__sfvwrite_r+0x134>
 10036e4:	0004ab83          	lw	s7,0(s1)
 10036e8:	0044a983          	lw	s3,4(s1)
 10036ec:	00848493          	add	s1,s1,8
 10036f0:	ee9ff06f          	j	10035d8 <__sfvwrite_r+0x128>
 10036f4:	00c12b83          	lw	s7,12(sp)
 10036f8:	00812c03          	lw	s8,8(sp)
 10036fc:	00412c83          	lw	s9,4(sp)
 1003700:	02c12083          	lw	ra,44(sp)
 1003704:	02812403          	lw	s0,40(sp)
 1003708:	02412483          	lw	s1,36(sp)
 100370c:	02012903          	lw	s2,32(sp)
 1003710:	01c12983          	lw	s3,28(sp)
 1003714:	01412a83          	lw	s5,20(sp)
 1003718:	01812a03          	lw	s4,24(sp)
 100371c:	01012b03          	lw	s6,16(sp)
 1003720:	00000513          	li	a0,0
 1003724:	03010113          	add	sp,sp,48
 1003728:	00008067          	ret
 100372c:	00040593          	mv	a1,s0
 1003730:	000a0513          	mv	a0,s4
 1003734:	bcdff0ef          	jal	1003300 <_fflush_r>
 1003738:	0a050e63          	beqz	a0,10037f4 <__sfvwrite_r+0x344>
 100373c:	00c41783          	lh	a5,12(s0)
 1003740:	00c12b83          	lw	s7,12(sp)
 1003744:	00812c03          	lw	s8,8(sp)
 1003748:	02412483          	lw	s1,36(sp)
 100374c:	02012903          	lw	s2,32(sp)
 1003750:	01c12983          	lw	s3,28(sp)
 1003754:	01412a83          	lw	s5,20(sp)
 1003758:	0407e793          	or	a5,a5,64
 100375c:	00f41623          	sh	a5,12(s0)
 1003760:	02c12083          	lw	ra,44(sp)
 1003764:	02812403          	lw	s0,40(sp)
 1003768:	01812a03          	lw	s4,24(sp)
 100376c:	01012b03          	lw	s6,16(sp)
 1003770:	fff00513          	li	a0,-1
 1003774:	03010113          	add	sp,sp,48
 1003778:	00008067          	ret
 100377c:	00000513          	li	a0,0
 1003780:	00008067          	ret
 1003784:	00000a93          	li	s5,0
 1003788:	00000513          	li	a0,0
 100378c:	00000c13          	li	s8,0
 1003790:	00000993          	li	s3,0
 1003794:	08098263          	beqz	s3,1003818 <__sfvwrite_r+0x368>
 1003798:	08050a63          	beqz	a0,100382c <__sfvwrite_r+0x37c>
 100379c:	000a8793          	mv	a5,s5
 10037a0:	00098b93          	mv	s7,s3
 10037a4:	0137f463          	bgeu	a5,s3,10037ac <__sfvwrite_r+0x2fc>
 10037a8:	00078b93          	mv	s7,a5
 10037ac:	00042503          	lw	a0,0(s0)
 10037b0:	01042783          	lw	a5,16(s0)
 10037b4:	00842903          	lw	s2,8(s0)
 10037b8:	01442683          	lw	a3,20(s0)
 10037bc:	00a7f663          	bgeu	a5,a0,10037c8 <__sfvwrite_r+0x318>
 10037c0:	00d90933          	add	s2,s2,a3
 10037c4:	09794463          	blt	s2,s7,100384c <__sfvwrite_r+0x39c>
 10037c8:	16dbc263          	blt	s7,a3,100392c <__sfvwrite_r+0x47c>
 10037cc:	02442783          	lw	a5,36(s0)
 10037d0:	01c42583          	lw	a1,28(s0)
 10037d4:	000c0613          	mv	a2,s8
 10037d8:	000a0513          	mv	a0,s4
 10037dc:	000780e7          	jalr	a5
 10037e0:	00050913          	mv	s2,a0
 10037e4:	f4a05ce3          	blez	a0,100373c <__sfvwrite_r+0x28c>
 10037e8:	412a8ab3          	sub	s5,s5,s2
 10037ec:	00100513          	li	a0,1
 10037f0:	f20a8ee3          	beqz	s5,100372c <__sfvwrite_r+0x27c>
 10037f4:	008b2783          	lw	a5,8(s6)
 10037f8:	012c0c33          	add	s8,s8,s2
 10037fc:	412989b3          	sub	s3,s3,s2
 1003800:	412787b3          	sub	a5,a5,s2
 1003804:	00fb2423          	sw	a5,8(s6)
 1003808:	f80796e3          	bnez	a5,1003794 <__sfvwrite_r+0x2e4>
 100380c:	00c12b83          	lw	s7,12(sp)
 1003810:	00812c03          	lw	s8,8(sp)
 1003814:	eedff06f          	j	1003700 <__sfvwrite_r+0x250>
 1003818:	0044a983          	lw	s3,4(s1)
 100381c:	00048793          	mv	a5,s1
 1003820:	00848493          	add	s1,s1,8
 1003824:	fe098ae3          	beqz	s3,1003818 <__sfvwrite_r+0x368>
 1003828:	0007ac03          	lw	s8,0(a5)
 100382c:	00098613          	mv	a2,s3
 1003830:	00a00593          	li	a1,10
 1003834:	000c0513          	mv	a0,s8
 1003838:	53c000ef          	jal	1003d74 <memchr>
 100383c:	14050c63          	beqz	a0,1003994 <__sfvwrite_r+0x4e4>
 1003840:	00150513          	add	a0,a0,1
 1003844:	41850ab3          	sub	s5,a0,s8
 1003848:	f55ff06f          	j	100379c <__sfvwrite_r+0x2ec>
 100384c:	000c0593          	mv	a1,s8
 1003850:	00090613          	mv	a2,s2
 1003854:	794000ef          	jal	1003fe8 <memmove>
 1003858:	00042783          	lw	a5,0(s0)
 100385c:	00040593          	mv	a1,s0
 1003860:	000a0513          	mv	a0,s4
 1003864:	012787b3          	add	a5,a5,s2
 1003868:	00f42023          	sw	a5,0(s0)
 100386c:	a95ff0ef          	jal	1003300 <_fflush_r>
 1003870:	f6050ce3          	beqz	a0,10037e8 <__sfvwrite_r+0x338>
 1003874:	ec9ff06f          	j	100373c <__sfvwrite_r+0x28c>
 1003878:	01042683          	lw	a3,16(s0)
 100387c:	04f6e463          	bltu	a3,a5,10038c4 <__sfvwrite_r+0x414>
 1003880:	01442583          	lw	a1,20(s0)
 1003884:	04b9e063          	bltu	s3,a1,10038c4 <__sfvwrite_r+0x414>
 1003888:	00098913          	mv	s2,s3
 100388c:	013af463          	bgeu	s5,s3,1003894 <__sfvwrite_r+0x3e4>
 1003890:	000a8913          	mv	s2,s5
 1003894:	00090513          	mv	a0,s2
 1003898:	018010ef          	jal	10048b0 <__modsi3>
 100389c:	02442783          	lw	a5,36(s0)
 10038a0:	01c42583          	lw	a1,28(s0)
 10038a4:	40a906b3          	sub	a3,s2,a0
 10038a8:	000b8613          	mv	a2,s7
 10038ac:	000a0513          	mv	a0,s4
 10038b0:	000780e7          	jalr	a5
 10038b4:	00050913          	mv	s2,a0
 10038b8:	04a05a63          	blez	a0,100390c <__sfvwrite_r+0x45c>
 10038bc:	412989b3          	sub	s3,s3,s2
 10038c0:	df9ff06f          	j	10036b8 <__sfvwrite_r+0x208>
 10038c4:	00070913          	mv	s2,a4
 10038c8:	00e9f463          	bgeu	s3,a4,10038d0 <__sfvwrite_r+0x420>
 10038cc:	00098913          	mv	s2,s3
 10038d0:	00078513          	mv	a0,a5
 10038d4:	00090613          	mv	a2,s2
 10038d8:	000b8593          	mv	a1,s7
 10038dc:	70c000ef          	jal	1003fe8 <memmove>
 10038e0:	00842703          	lw	a4,8(s0)
 10038e4:	00042783          	lw	a5,0(s0)
 10038e8:	41270733          	sub	a4,a4,s2
 10038ec:	012787b3          	add	a5,a5,s2
 10038f0:	00e42423          	sw	a4,8(s0)
 10038f4:	00f42023          	sw	a5,0(s0)
 10038f8:	fc0712e3          	bnez	a4,10038bc <__sfvwrite_r+0x40c>
 10038fc:	00040593          	mv	a1,s0
 1003900:	000a0513          	mv	a0,s4
 1003904:	9fdff0ef          	jal	1003300 <_fflush_r>
 1003908:	fa050ae3          	beqz	a0,10038bc <__sfvwrite_r+0x40c>
 100390c:	00c41783          	lh	a5,12(s0)
 1003910:	00c12b83          	lw	s7,12(sp)
 1003914:	00812c03          	lw	s8,8(sp)
 1003918:	00412c83          	lw	s9,4(sp)
 100391c:	e2dff06f          	j	1003748 <__sfvwrite_r+0x298>
 1003920:	00098c13          	mv	s8,s3
 1003924:	00098c93          	mv	s9,s3
 1003928:	d65ff06f          	j	100368c <__sfvwrite_r+0x1dc>
 100392c:	000b8613          	mv	a2,s7
 1003930:	000c0593          	mv	a1,s8
 1003934:	6b4000ef          	jal	1003fe8 <memmove>
 1003938:	00842703          	lw	a4,8(s0)
 100393c:	00042783          	lw	a5,0(s0)
 1003940:	000b8913          	mv	s2,s7
 1003944:	41770733          	sub	a4,a4,s7
 1003948:	017787b3          	add	a5,a5,s7
 100394c:	00e42423          	sw	a4,8(s0)
 1003950:	00f42023          	sw	a5,0(s0)
 1003954:	e95ff06f          	j	10037e8 <__sfvwrite_r+0x338>
 1003958:	000a0513          	mv	a0,s4
 100395c:	13d000ef          	jal	1004298 <_realloc_r>
 1003960:	00050c93          	mv	s9,a0
 1003964:	d00514e3          	bnez	a0,100366c <__sfvwrite_r+0x1bc>
 1003968:	01042583          	lw	a1,16(s0)
 100396c:	000a0513          	mv	a0,s4
 1003970:	ad5fe0ef          	jal	1002444 <_free_r>
 1003974:	00c41783          	lh	a5,12(s0)
 1003978:	00c00713          	li	a4,12
 100397c:	00c12b83          	lw	s7,12(sp)
 1003980:	00812c03          	lw	s8,8(sp)
 1003984:	00412c83          	lw	s9,4(sp)
 1003988:	00ea2023          	sw	a4,0(s4)
 100398c:	f7f7f793          	and	a5,a5,-129
 1003990:	db9ff06f          	j	1003748 <__sfvwrite_r+0x298>
 1003994:	00198793          	add	a5,s3,1
 1003998:	00078a93          	mv	s5,a5
 100399c:	e05ff06f          	j	10037a0 <__sfvwrite_r+0x2f0>
 10039a0:	00c41783          	lh	a5,12(s0)
 10039a4:	da5ff06f          	j	1003748 <__sfvwrite_r+0x298>
 10039a8:	00c00713          	li	a4,12
 10039ac:	00c41783          	lh	a5,12(s0)
 10039b0:	00c12b83          	lw	s7,12(sp)
 10039b4:	00812c03          	lw	s8,8(sp)
 10039b8:	00412c83          	lw	s9,4(sp)
 10039bc:	00ea2023          	sw	a4,0(s4)
 10039c0:	d89ff06f          	j	1003748 <__sfvwrite_r+0x298>

010039c4 <__smakebuf_r>:
 10039c4:	00c59783          	lh	a5,12(a1)
 10039c8:	f8010113          	add	sp,sp,-128
 10039cc:	06812c23          	sw	s0,120(sp)
 10039d0:	06112e23          	sw	ra,124(sp)
 10039d4:	0027f713          	and	a4,a5,2
 10039d8:	00058413          	mv	s0,a1
 10039dc:	02070463          	beqz	a4,1003a04 <__smakebuf_r+0x40>
 10039e0:	04358793          	add	a5,a1,67
 10039e4:	00f5a023          	sw	a5,0(a1)
 10039e8:	00f5a823          	sw	a5,16(a1)
 10039ec:	00100793          	li	a5,1
 10039f0:	00f5aa23          	sw	a5,20(a1)
 10039f4:	07c12083          	lw	ra,124(sp)
 10039f8:	07812403          	lw	s0,120(sp)
 10039fc:	08010113          	add	sp,sp,128
 1003a00:	00008067          	ret
 1003a04:	00e59583          	lh	a1,14(a1)
 1003a08:	06912a23          	sw	s1,116(sp)
 1003a0c:	07212823          	sw	s2,112(sp)
 1003a10:	07312623          	sw	s3,108(sp)
 1003a14:	07412423          	sw	s4,104(sp)
 1003a18:	00050493          	mv	s1,a0
 1003a1c:	0805c663          	bltz	a1,1003aa8 <__smakebuf_r+0xe4>
 1003a20:	00810613          	add	a2,sp,8
 1003a24:	414000ef          	jal	1003e38 <_fstat_r>
 1003a28:	06054e63          	bltz	a0,1003aa4 <__smakebuf_r+0xe0>
 1003a2c:	00c12783          	lw	a5,12(sp)
 1003a30:	0000f937          	lui	s2,0xf
 1003a34:	000019b7          	lui	s3,0x1
 1003a38:	00f97933          	and	s2,s2,a5
 1003a3c:	ffffe7b7          	lui	a5,0xffffe
 1003a40:	00f90933          	add	s2,s2,a5
 1003a44:	00193913          	seqz	s2,s2
 1003a48:	40000a13          	li	s4,1024
 1003a4c:	80098993          	add	s3,s3,-2048 # 800 <__reset-0xfff800>
 1003a50:	000a0593          	mv	a1,s4
 1003a54:	00048513          	mv	a0,s1
 1003a58:	d09fe0ef          	jal	1002760 <_malloc_r>
 1003a5c:	00c41783          	lh	a5,12(s0)
 1003a60:	06050863          	beqz	a0,1003ad0 <__smakebuf_r+0x10c>
 1003a64:	0807e793          	or	a5,a5,128
 1003a68:	00a42023          	sw	a0,0(s0)
 1003a6c:	00a42823          	sw	a0,16(s0)
 1003a70:	00f41623          	sh	a5,12(s0)
 1003a74:	01442a23          	sw	s4,20(s0)
 1003a78:	0a091063          	bnez	s2,1003b18 <__smakebuf_r+0x154>
 1003a7c:	0137e7b3          	or	a5,a5,s3
 1003a80:	07c12083          	lw	ra,124(sp)
 1003a84:	00f41623          	sh	a5,12(s0)
 1003a88:	07812403          	lw	s0,120(sp)
 1003a8c:	07412483          	lw	s1,116(sp)
 1003a90:	07012903          	lw	s2,112(sp)
 1003a94:	06c12983          	lw	s3,108(sp)
 1003a98:	06812a03          	lw	s4,104(sp)
 1003a9c:	08010113          	add	sp,sp,128
 1003aa0:	00008067          	ret
 1003aa4:	00c41783          	lh	a5,12(s0)
 1003aa8:	0807f793          	and	a5,a5,128
 1003aac:	00000913          	li	s2,0
 1003ab0:	04078e63          	beqz	a5,1003b0c <__smakebuf_r+0x148>
 1003ab4:	04000a13          	li	s4,64
 1003ab8:	000a0593          	mv	a1,s4
 1003abc:	00048513          	mv	a0,s1
 1003ac0:	ca1fe0ef          	jal	1002760 <_malloc_r>
 1003ac4:	00c41783          	lh	a5,12(s0)
 1003ac8:	00000993          	li	s3,0
 1003acc:	f8051ce3          	bnez	a0,1003a64 <__smakebuf_r+0xa0>
 1003ad0:	2007f713          	and	a4,a5,512
 1003ad4:	04071e63          	bnez	a4,1003b30 <__smakebuf_r+0x16c>
 1003ad8:	ffc7f793          	and	a5,a5,-4
 1003adc:	0027e793          	or	a5,a5,2
 1003ae0:	04340713          	add	a4,s0,67
 1003ae4:	00f41623          	sh	a5,12(s0)
 1003ae8:	00100793          	li	a5,1
 1003aec:	07412483          	lw	s1,116(sp)
 1003af0:	07012903          	lw	s2,112(sp)
 1003af4:	06c12983          	lw	s3,108(sp)
 1003af8:	06812a03          	lw	s4,104(sp)
 1003afc:	00e42023          	sw	a4,0(s0)
 1003b00:	00e42823          	sw	a4,16(s0)
 1003b04:	00f42a23          	sw	a5,20(s0)
 1003b08:	eedff06f          	j	10039f4 <__smakebuf_r+0x30>
 1003b0c:	40000a13          	li	s4,1024
 1003b10:	00000993          	li	s3,0
 1003b14:	f3dff06f          	j	1003a50 <__smakebuf_r+0x8c>
 1003b18:	00e41583          	lh	a1,14(s0)
 1003b1c:	00048513          	mv	a0,s1
 1003b20:	370000ef          	jal	1003e90 <_isatty_r>
 1003b24:	02051063          	bnez	a0,1003b44 <__smakebuf_r+0x180>
 1003b28:	00c41783          	lh	a5,12(s0)
 1003b2c:	f51ff06f          	j	1003a7c <__smakebuf_r+0xb8>
 1003b30:	07412483          	lw	s1,116(sp)
 1003b34:	07012903          	lw	s2,112(sp)
 1003b38:	06c12983          	lw	s3,108(sp)
 1003b3c:	06812a03          	lw	s4,104(sp)
 1003b40:	eb5ff06f          	j	10039f4 <__smakebuf_r+0x30>
 1003b44:	00c45783          	lhu	a5,12(s0)
 1003b48:	ffc7f793          	and	a5,a5,-4
 1003b4c:	0017e793          	or	a5,a5,1
 1003b50:	01079793          	sll	a5,a5,0x10
 1003b54:	4107d793          	sra	a5,a5,0x10
 1003b58:	f25ff06f          	j	1003a7c <__smakebuf_r+0xb8>

01003b5c <__swhatbuf_r>:
 1003b5c:	f9010113          	add	sp,sp,-112
 1003b60:	06812423          	sw	s0,104(sp)
 1003b64:	00058413          	mv	s0,a1
 1003b68:	00e59583          	lh	a1,14(a1)
 1003b6c:	06912223          	sw	s1,100(sp)
 1003b70:	07212023          	sw	s2,96(sp)
 1003b74:	06112623          	sw	ra,108(sp)
 1003b78:	00060493          	mv	s1,a2
 1003b7c:	00068913          	mv	s2,a3
 1003b80:	0405ca63          	bltz	a1,1003bd4 <__swhatbuf_r+0x78>
 1003b84:	00810613          	add	a2,sp,8
 1003b88:	2b0000ef          	jal	1003e38 <_fstat_r>
 1003b8c:	04054463          	bltz	a0,1003bd4 <__swhatbuf_r+0x78>
 1003b90:	00c12703          	lw	a4,12(sp)
 1003b94:	0000f7b7          	lui	a5,0xf
 1003b98:	06c12083          	lw	ra,108(sp)
 1003b9c:	00e7f7b3          	and	a5,a5,a4
 1003ba0:	ffffe737          	lui	a4,0xffffe
 1003ba4:	00e787b3          	add	a5,a5,a4
 1003ba8:	06812403          	lw	s0,104(sp)
 1003bac:	0017b793          	seqz	a5,a5
 1003bb0:	00f92023          	sw	a5,0(s2) # f000 <__reset-0xff1000>
 1003bb4:	40000713          	li	a4,1024
 1003bb8:	00e4a023          	sw	a4,0(s1)
 1003bbc:	00001537          	lui	a0,0x1
 1003bc0:	06412483          	lw	s1,100(sp)
 1003bc4:	06012903          	lw	s2,96(sp)
 1003bc8:	80050513          	add	a0,a0,-2048 # 800 <__reset-0xfff800>
 1003bcc:	07010113          	add	sp,sp,112
 1003bd0:	00008067          	ret
 1003bd4:	00c45783          	lhu	a5,12(s0)
 1003bd8:	0807f793          	and	a5,a5,128
 1003bdc:	02078863          	beqz	a5,1003c0c <__swhatbuf_r+0xb0>
 1003be0:	06c12083          	lw	ra,108(sp)
 1003be4:	06812403          	lw	s0,104(sp)
 1003be8:	00000793          	li	a5,0
 1003bec:	00f92023          	sw	a5,0(s2)
 1003bf0:	04000713          	li	a4,64
 1003bf4:	00e4a023          	sw	a4,0(s1)
 1003bf8:	06012903          	lw	s2,96(sp)
 1003bfc:	06412483          	lw	s1,100(sp)
 1003c00:	00000513          	li	a0,0
 1003c04:	07010113          	add	sp,sp,112
 1003c08:	00008067          	ret
 1003c0c:	06c12083          	lw	ra,108(sp)
 1003c10:	06812403          	lw	s0,104(sp)
 1003c14:	00f92023          	sw	a5,0(s2)
 1003c18:	40000713          	li	a4,1024
 1003c1c:	00e4a023          	sw	a4,0(s1)
 1003c20:	06012903          	lw	s2,96(sp)
 1003c24:	06412483          	lw	s1,100(sp)
 1003c28:	00000513          	li	a0,0
 1003c2c:	07010113          	add	sp,sp,112
 1003c30:	00008067          	ret

01003c34 <__swsetup_r>:
 1003c34:	ff010113          	add	sp,sp,-16
 1003c38:	00812423          	sw	s0,8(sp)
 1003c3c:	00912223          	sw	s1,4(sp)
 1003c40:	00112623          	sw	ra,12(sp)
 1003c44:	8201a783          	lw	a5,-2016(gp) # 10065f8 <_impure_ptr>
 1003c48:	00050493          	mv	s1,a0
 1003c4c:	00058413          	mv	s0,a1
 1003c50:	00078663          	beqz	a5,1003c5c <__swsetup_r+0x28>
 1003c54:	0347a703          	lw	a4,52(a5) # f034 <__reset-0xff0fcc>
 1003c58:	0e070c63          	beqz	a4,1003d50 <__swsetup_r+0x11c>
 1003c5c:	00c41783          	lh	a5,12(s0)
 1003c60:	0087f713          	and	a4,a5,8
 1003c64:	06070a63          	beqz	a4,1003cd8 <__swsetup_r+0xa4>
 1003c68:	01042703          	lw	a4,16(s0)
 1003c6c:	08070663          	beqz	a4,1003cf8 <__swsetup_r+0xc4>
 1003c70:	0017f693          	and	a3,a5,1
 1003c74:	02068863          	beqz	a3,1003ca4 <__swsetup_r+0x70>
 1003c78:	01442683          	lw	a3,20(s0)
 1003c7c:	00042423          	sw	zero,8(s0)
 1003c80:	00000513          	li	a0,0
 1003c84:	40d006b3          	neg	a3,a3
 1003c88:	00d42c23          	sw	a3,24(s0)
 1003c8c:	02070a63          	beqz	a4,1003cc0 <__swsetup_r+0x8c>
 1003c90:	00c12083          	lw	ra,12(sp)
 1003c94:	00812403          	lw	s0,8(sp)
 1003c98:	00412483          	lw	s1,4(sp)
 1003c9c:	01010113          	add	sp,sp,16
 1003ca0:	00008067          	ret
 1003ca4:	0027f693          	and	a3,a5,2
 1003ca8:	00000613          	li	a2,0
 1003cac:	00069463          	bnez	a3,1003cb4 <__swsetup_r+0x80>
 1003cb0:	01442603          	lw	a2,20(s0)
 1003cb4:	00c42423          	sw	a2,8(s0)
 1003cb8:	00000513          	li	a0,0
 1003cbc:	fc071ae3          	bnez	a4,1003c90 <__swsetup_r+0x5c>
 1003cc0:	0807f713          	and	a4,a5,128
 1003cc4:	fc0706e3          	beqz	a4,1003c90 <__swsetup_r+0x5c>
 1003cc8:	0407e793          	or	a5,a5,64
 1003ccc:	00f41623          	sh	a5,12(s0)
 1003cd0:	fff00513          	li	a0,-1
 1003cd4:	fbdff06f          	j	1003c90 <__swsetup_r+0x5c>
 1003cd8:	0107f713          	and	a4,a5,16
 1003cdc:	08070063          	beqz	a4,1003d5c <__swsetup_r+0x128>
 1003ce0:	0047f713          	and	a4,a5,4
 1003ce4:	02071c63          	bnez	a4,1003d1c <__swsetup_r+0xe8>
 1003ce8:	01042703          	lw	a4,16(s0)
 1003cec:	0087e793          	or	a5,a5,8
 1003cf0:	00f41623          	sh	a5,12(s0)
 1003cf4:	f6071ee3          	bnez	a4,1003c70 <__swsetup_r+0x3c>
 1003cf8:	2807f693          	and	a3,a5,640
 1003cfc:	20000613          	li	a2,512
 1003d00:	f6c688e3          	beq	a3,a2,1003c70 <__swsetup_r+0x3c>
 1003d04:	00040593          	mv	a1,s0
 1003d08:	00048513          	mv	a0,s1
 1003d0c:	cb9ff0ef          	jal	10039c4 <__smakebuf_r>
 1003d10:	00c41783          	lh	a5,12(s0)
 1003d14:	01042703          	lw	a4,16(s0)
 1003d18:	f59ff06f          	j	1003c70 <__swsetup_r+0x3c>
 1003d1c:	03042583          	lw	a1,48(s0)
 1003d20:	00058e63          	beqz	a1,1003d3c <__swsetup_r+0x108>
 1003d24:	04040713          	add	a4,s0,64
 1003d28:	00e58863          	beq	a1,a4,1003d38 <__swsetup_r+0x104>
 1003d2c:	00048513          	mv	a0,s1
 1003d30:	f14fe0ef          	jal	1002444 <_free_r>
 1003d34:	00c41783          	lh	a5,12(s0)
 1003d38:	02042823          	sw	zero,48(s0)
 1003d3c:	01042703          	lw	a4,16(s0)
 1003d40:	fdb7f793          	and	a5,a5,-37
 1003d44:	00042223          	sw	zero,4(s0)
 1003d48:	00e42023          	sw	a4,0(s0)
 1003d4c:	fa1ff06f          	j	1003cec <__swsetup_r+0xb8>
 1003d50:	00078513          	mv	a0,a5
 1003d54:	871fd0ef          	jal	10015c4 <__sinit>
 1003d58:	f05ff06f          	j	1003c5c <__swsetup_r+0x28>
 1003d5c:	00900713          	li	a4,9
 1003d60:	00e4a023          	sw	a4,0(s1)
 1003d64:	0407e793          	or	a5,a5,64
 1003d68:	00f41623          	sh	a5,12(s0)
 1003d6c:	fff00513          	li	a0,-1
 1003d70:	f21ff06f          	j	1003c90 <__swsetup_r+0x5c>

01003d74 <memchr>:
 1003d74:	00357793          	and	a5,a0,3
 1003d78:	0ff5f693          	zext.b	a3,a1
 1003d7c:	02078a63          	beqz	a5,1003db0 <memchr+0x3c>
 1003d80:	fff60793          	add	a5,a2,-1
 1003d84:	02060e63          	beqz	a2,1003dc0 <memchr+0x4c>
 1003d88:	fff00613          	li	a2,-1
 1003d8c:	0180006f          	j	1003da4 <memchr+0x30>
 1003d90:	00150513          	add	a0,a0,1
 1003d94:	00357713          	and	a4,a0,3
 1003d98:	00070e63          	beqz	a4,1003db4 <memchr+0x40>
 1003d9c:	fff78793          	add	a5,a5,-1
 1003da0:	02c78063          	beq	a5,a2,1003dc0 <memchr+0x4c>
 1003da4:	00054703          	lbu	a4,0(a0)
 1003da8:	fed714e3          	bne	a4,a3,1003d90 <memchr+0x1c>
 1003dac:	00008067          	ret
 1003db0:	00060793          	mv	a5,a2
 1003db4:	00300713          	li	a4,3
 1003db8:	00f76863          	bltu	a4,a5,1003dc8 <memchr+0x54>
 1003dbc:	06079063          	bnez	a5,1003e1c <memchr+0xa8>
 1003dc0:	00000513          	li	a0,0
 1003dc4:	00008067          	ret
 1003dc8:	0ff5f593          	zext.b	a1,a1
 1003dcc:	00859713          	sll	a4,a1,0x8
 1003dd0:	00b705b3          	add	a1,a4,a1
 1003dd4:	01059713          	sll	a4,a1,0x10
 1003dd8:	feff08b7          	lui	a7,0xfeff0
 1003ddc:	80808837          	lui	a6,0x80808
 1003de0:	00e585b3          	add	a1,a1,a4
 1003de4:	eff88893          	add	a7,a7,-257 # fefefeff <__alt_mem_onchip_memory2_0+0xfcfc7eff>
 1003de8:	08080813          	add	a6,a6,128 # 80808080 <__alt_mem_onchip_memory2_0+0x7e7e0080>
 1003dec:	00300313          	li	t1,3
 1003df0:	0100006f          	j	1003e00 <memchr+0x8c>
 1003df4:	ffc78793          	add	a5,a5,-4
 1003df8:	00450513          	add	a0,a0,4
 1003dfc:	fcf370e3          	bgeu	t1,a5,1003dbc <memchr+0x48>
 1003e00:	00052703          	lw	a4,0(a0)
 1003e04:	00e5c733          	xor	a4,a1,a4
 1003e08:	01170633          	add	a2,a4,a7
 1003e0c:	fff74713          	not	a4,a4
 1003e10:	00e67733          	and	a4,a2,a4
 1003e14:	01077733          	and	a4,a4,a6
 1003e18:	fc070ee3          	beqz	a4,1003df4 <memchr+0x80>
 1003e1c:	00f507b3          	add	a5,a0,a5
 1003e20:	00c0006f          	j	1003e2c <memchr+0xb8>
 1003e24:	00150513          	add	a0,a0,1
 1003e28:	f8f50ce3          	beq	a0,a5,1003dc0 <memchr+0x4c>
 1003e2c:	00054703          	lbu	a4,0(a0)
 1003e30:	fed71ae3          	bne	a4,a3,1003e24 <memchr+0xb0>
 1003e34:	00008067          	ret

01003e38 <_fstat_r>:
 1003e38:	ff010113          	add	sp,sp,-16
 1003e3c:	00058713          	mv	a4,a1
 1003e40:	00812423          	sw	s0,8(sp)
 1003e44:	00060593          	mv	a1,a2
 1003e48:	00050413          	mv	s0,a0
 1003e4c:	00070513          	mv	a0,a4
 1003e50:	fa01a223          	sw	zero,-92(gp) # 1006d7c <errno>
 1003e54:	00112623          	sw	ra,12(sp)
 1003e58:	429000ef          	jal	1004a80 <_fstat>
 1003e5c:	fff00793          	li	a5,-1
 1003e60:	00f50a63          	beq	a0,a5,1003e74 <_fstat_r+0x3c>
 1003e64:	00c12083          	lw	ra,12(sp)
 1003e68:	00812403          	lw	s0,8(sp)
 1003e6c:	01010113          	add	sp,sp,16
 1003e70:	00008067          	ret
 1003e74:	fa41a783          	lw	a5,-92(gp) # 1006d7c <errno>
 1003e78:	fe0786e3          	beqz	a5,1003e64 <_fstat_r+0x2c>
 1003e7c:	00c12083          	lw	ra,12(sp)
 1003e80:	00f42023          	sw	a5,0(s0)
 1003e84:	00812403          	lw	s0,8(sp)
 1003e88:	01010113          	add	sp,sp,16
 1003e8c:	00008067          	ret

01003e90 <_isatty_r>:
 1003e90:	ff010113          	add	sp,sp,-16
 1003e94:	00812423          	sw	s0,8(sp)
 1003e98:	00050413          	mv	s0,a0
 1003e9c:	00058513          	mv	a0,a1
 1003ea0:	fa01a223          	sw	zero,-92(gp) # 1006d7c <errno>
 1003ea4:	00112623          	sw	ra,12(sp)
 1003ea8:	4d9000ef          	jal	1004b80 <_isatty>
 1003eac:	fff00793          	li	a5,-1
 1003eb0:	00f50a63          	beq	a0,a5,1003ec4 <_isatty_r+0x34>
 1003eb4:	00c12083          	lw	ra,12(sp)
 1003eb8:	00812403          	lw	s0,8(sp)
 1003ebc:	01010113          	add	sp,sp,16
 1003ec0:	00008067          	ret
 1003ec4:	fa41a783          	lw	a5,-92(gp) # 1006d7c <errno>
 1003ec8:	fe0786e3          	beqz	a5,1003eb4 <_isatty_r+0x24>
 1003ecc:	00c12083          	lw	ra,12(sp)
 1003ed0:	00f42023          	sw	a5,0(s0)
 1003ed4:	00812403          	lw	s0,8(sp)
 1003ed8:	01010113          	add	sp,sp,16
 1003edc:	00008067          	ret

01003ee0 <_open_r>:
 1003ee0:	ff010113          	add	sp,sp,-16
 1003ee4:	00058713          	mv	a4,a1
 1003ee8:	00812423          	sw	s0,8(sp)
 1003eec:	00060593          	mv	a1,a2
 1003ef0:	00050413          	mv	s0,a0
 1003ef4:	00068613          	mv	a2,a3
 1003ef8:	00070513          	mv	a0,a4
 1003efc:	fa01a223          	sw	zero,-92(gp) # 1006d7c <errno>
 1003f00:	00112623          	sw	ra,12(sp)
 1003f04:	7b9000ef          	jal	1004ebc <_open>
 1003f08:	fff00793          	li	a5,-1
 1003f0c:	00f50a63          	beq	a0,a5,1003f20 <_open_r+0x40>
 1003f10:	00c12083          	lw	ra,12(sp)
 1003f14:	00812403          	lw	s0,8(sp)
 1003f18:	01010113          	add	sp,sp,16
 1003f1c:	00008067          	ret
 1003f20:	fa41a783          	lw	a5,-92(gp) # 1006d7c <errno>
 1003f24:	fe0786e3          	beqz	a5,1003f10 <_open_r+0x30>
 1003f28:	00c12083          	lw	ra,12(sp)
 1003f2c:	00f42023          	sw	a5,0(s0)
 1003f30:	00812403          	lw	s0,8(sp)
 1003f34:	01010113          	add	sp,sp,16
 1003f38:	00008067          	ret

01003f3c <_sbrk_r>:
 1003f3c:	ff010113          	add	sp,sp,-16
 1003f40:	00812423          	sw	s0,8(sp)
 1003f44:	00050413          	mv	s0,a0
 1003f48:	00058513          	mv	a0,a1
 1003f4c:	fa01a223          	sw	zero,-92(gp) # 1006d7c <errno>
 1003f50:	00112623          	sw	ra,12(sp)
 1003f54:	218010ef          	jal	100516c <_sbrk>
 1003f58:	fff00793          	li	a5,-1
 1003f5c:	00f50a63          	beq	a0,a5,1003f70 <_sbrk_r+0x34>
 1003f60:	00c12083          	lw	ra,12(sp)
 1003f64:	00812403          	lw	s0,8(sp)
 1003f68:	01010113          	add	sp,sp,16
 1003f6c:	00008067          	ret
 1003f70:	fa41a783          	lw	a5,-92(gp) # 1006d7c <errno>
 1003f74:	fe0786e3          	beqz	a5,1003f60 <_sbrk_r+0x24>
 1003f78:	00c12083          	lw	ra,12(sp)
 1003f7c:	00f42023          	sw	a5,0(s0)
 1003f80:	00812403          	lw	s0,8(sp)
 1003f84:	01010113          	add	sp,sp,16
 1003f88:	00008067          	ret

01003f8c <__libc_fini_array>:
 1003f8c:	ff010113          	add	sp,sp,-16
 1003f90:	00812423          	sw	s0,8(sp)
 1003f94:	00002797          	auipc	a5,0x2
 1003f98:	ec478793          	add	a5,a5,-316 # 1005e58 <__fini_array_end>
 1003f9c:	00002417          	auipc	s0,0x2
 1003fa0:	ebc40413          	add	s0,s0,-324 # 1005e58 <__fini_array_end>
 1003fa4:	40f40433          	sub	s0,s0,a5
 1003fa8:	00912223          	sw	s1,4(sp)
 1003fac:	00112623          	sw	ra,12(sp)
 1003fb0:	40245493          	sra	s1,s0,0x2
 1003fb4:	02048063          	beqz	s1,1003fd4 <__libc_fini_array+0x48>
 1003fb8:	ffc40413          	add	s0,s0,-4
 1003fbc:	00f40433          	add	s0,s0,a5
 1003fc0:	00042783          	lw	a5,0(s0)
 1003fc4:	fff48493          	add	s1,s1,-1
 1003fc8:	ffc40413          	add	s0,s0,-4
 1003fcc:	000780e7          	jalr	a5
 1003fd0:	fe0498e3          	bnez	s1,1003fc0 <__libc_fini_array+0x34>
 1003fd4:	00c12083          	lw	ra,12(sp)
 1003fd8:	00812403          	lw	s0,8(sp)
 1003fdc:	00412483          	lw	s1,4(sp)
 1003fe0:	01010113          	add	sp,sp,16
 1003fe4:	00008067          	ret

01003fe8 <memmove>:
 1003fe8:	02a5f663          	bgeu	a1,a0,1004014 <memmove+0x2c>
 1003fec:	00c58733          	add	a4,a1,a2
 1003ff0:	02e57263          	bgeu	a0,a4,1004014 <memmove+0x2c>
 1003ff4:	00c507b3          	add	a5,a0,a2
 1003ff8:	04060663          	beqz	a2,1004044 <memmove+0x5c>
 1003ffc:	fff74683          	lbu	a3,-1(a4) # ffffdfff <__alt_mem_onchip_memory2_0+0xfdfd5fff>
 1004000:	fff78793          	add	a5,a5,-1
 1004004:	fff70713          	add	a4,a4,-1
 1004008:	00d78023          	sb	a3,0(a5)
 100400c:	fef518e3          	bne	a0,a5,1003ffc <memmove+0x14>
 1004010:	00008067          	ret
 1004014:	00f00793          	li	a5,15
 1004018:	02c7e863          	bltu	a5,a2,1004048 <memmove+0x60>
 100401c:	00050793          	mv	a5,a0
 1004020:	fff60693          	add	a3,a2,-1
 1004024:	0c060263          	beqz	a2,10040e8 <memmove+0x100>
 1004028:	00168693          	add	a3,a3,1
 100402c:	00d786b3          	add	a3,a5,a3
 1004030:	0005c703          	lbu	a4,0(a1)
 1004034:	00178793          	add	a5,a5,1
 1004038:	00158593          	add	a1,a1,1
 100403c:	fee78fa3          	sb	a4,-1(a5)
 1004040:	fed798e3          	bne	a5,a3,1004030 <memmove+0x48>
 1004044:	00008067          	ret
 1004048:	00b567b3          	or	a5,a0,a1
 100404c:	0037f793          	and	a5,a5,3
 1004050:	08079663          	bnez	a5,10040dc <memmove+0xf4>
 1004054:	ff060893          	add	a7,a2,-16
 1004058:	ff08f893          	and	a7,a7,-16
 100405c:	01088893          	add	a7,a7,16
 1004060:	011506b3          	add	a3,a0,a7
 1004064:	00058713          	mv	a4,a1
 1004068:	00050793          	mv	a5,a0
 100406c:	00072803          	lw	a6,0(a4)
 1004070:	01070713          	add	a4,a4,16
 1004074:	01078793          	add	a5,a5,16
 1004078:	ff07a823          	sw	a6,-16(a5)
 100407c:	ff472803          	lw	a6,-12(a4)
 1004080:	ff07aa23          	sw	a6,-12(a5)
 1004084:	ff872803          	lw	a6,-8(a4)
 1004088:	ff07ac23          	sw	a6,-8(a5)
 100408c:	ffc72803          	lw	a6,-4(a4)
 1004090:	ff07ae23          	sw	a6,-4(a5)
 1004094:	fcd79ce3          	bne	a5,a3,100406c <memmove+0x84>
 1004098:	00c67813          	and	a6,a2,12
 100409c:	011585b3          	add	a1,a1,a7
 10040a0:	00f67713          	and	a4,a2,15
 10040a4:	04080463          	beqz	a6,10040ec <memmove+0x104>
 10040a8:	ffc70813          	add	a6,a4,-4
 10040ac:	ffc87813          	and	a6,a6,-4
 10040b0:	00480813          	add	a6,a6,4
 10040b4:	010687b3          	add	a5,a3,a6
 10040b8:	00058713          	mv	a4,a1
 10040bc:	00072883          	lw	a7,0(a4)
 10040c0:	00468693          	add	a3,a3,4
 10040c4:	00470713          	add	a4,a4,4
 10040c8:	ff16ae23          	sw	a7,-4(a3)
 10040cc:	fef698e3          	bne	a3,a5,10040bc <memmove+0xd4>
 10040d0:	00367613          	and	a2,a2,3
 10040d4:	010585b3          	add	a1,a1,a6
 10040d8:	f49ff06f          	j	1004020 <memmove+0x38>
 10040dc:	fff60693          	add	a3,a2,-1
 10040e0:	00050793          	mv	a5,a0
 10040e4:	f45ff06f          	j	1004028 <memmove+0x40>
 10040e8:	00008067          	ret
 10040ec:	00070613          	mv	a2,a4
 10040f0:	f31ff06f          	j	1004020 <memmove+0x38>

010040f4 <memcpy>:
 10040f4:	00a5c7b3          	xor	a5,a1,a0
 10040f8:	0037f793          	and	a5,a5,3
 10040fc:	00c508b3          	add	a7,a0,a2
 1004100:	06079463          	bnez	a5,1004168 <memcpy+0x74>
 1004104:	00300793          	li	a5,3
 1004108:	06c7f063          	bgeu	a5,a2,1004168 <memcpy+0x74>
 100410c:	00357793          	and	a5,a0,3
 1004110:	00050713          	mv	a4,a0
 1004114:	06079a63          	bnez	a5,1004188 <memcpy+0x94>
 1004118:	ffc8f613          	and	a2,a7,-4
 100411c:	40e606b3          	sub	a3,a2,a4
 1004120:	02000793          	li	a5,32
 1004124:	08d7ce63          	blt	a5,a3,10041c0 <memcpy+0xcc>
 1004128:	00058693          	mv	a3,a1
 100412c:	00070793          	mv	a5,a4
 1004130:	02c77863          	bgeu	a4,a2,1004160 <memcpy+0x6c>
 1004134:	0006a803          	lw	a6,0(a3)
 1004138:	00478793          	add	a5,a5,4
 100413c:	00468693          	add	a3,a3,4
 1004140:	ff07ae23          	sw	a6,-4(a5)
 1004144:	fec7e8e3          	bltu	a5,a2,1004134 <memcpy+0x40>
 1004148:	fff60793          	add	a5,a2,-1
 100414c:	40e787b3          	sub	a5,a5,a4
 1004150:	ffc7f793          	and	a5,a5,-4
 1004154:	00478793          	add	a5,a5,4
 1004158:	00f70733          	add	a4,a4,a5
 100415c:	00f585b3          	add	a1,a1,a5
 1004160:	01176863          	bltu	a4,a7,1004170 <memcpy+0x7c>
 1004164:	00008067          	ret
 1004168:	00050713          	mv	a4,a0
 100416c:	05157863          	bgeu	a0,a7,10041bc <memcpy+0xc8>
 1004170:	0005c783          	lbu	a5,0(a1)
 1004174:	00170713          	add	a4,a4,1
 1004178:	00158593          	add	a1,a1,1
 100417c:	fef70fa3          	sb	a5,-1(a4)
 1004180:	fee898e3          	bne	a7,a4,1004170 <memcpy+0x7c>
 1004184:	00008067          	ret
 1004188:	0005c683          	lbu	a3,0(a1)
 100418c:	00170713          	add	a4,a4,1
 1004190:	00377793          	and	a5,a4,3
 1004194:	fed70fa3          	sb	a3,-1(a4)
 1004198:	00158593          	add	a1,a1,1
 100419c:	f6078ee3          	beqz	a5,1004118 <memcpy+0x24>
 10041a0:	0005c683          	lbu	a3,0(a1)
 10041a4:	00170713          	add	a4,a4,1
 10041a8:	00377793          	and	a5,a4,3
 10041ac:	fed70fa3          	sb	a3,-1(a4)
 10041b0:	00158593          	add	a1,a1,1
 10041b4:	fc079ae3          	bnez	a5,1004188 <memcpy+0x94>
 10041b8:	f61ff06f          	j	1004118 <memcpy+0x24>
 10041bc:	00008067          	ret
 10041c0:	ff010113          	add	sp,sp,-16
 10041c4:	00812623          	sw	s0,12(sp)
 10041c8:	02000413          	li	s0,32
 10041cc:	0005a383          	lw	t2,0(a1)
 10041d0:	0045a283          	lw	t0,4(a1)
 10041d4:	0085af83          	lw	t6,8(a1)
 10041d8:	00c5af03          	lw	t5,12(a1)
 10041dc:	0105ae83          	lw	t4,16(a1)
 10041e0:	0145ae03          	lw	t3,20(a1)
 10041e4:	0185a303          	lw	t1,24(a1)
 10041e8:	01c5a803          	lw	a6,28(a1)
 10041ec:	0205a683          	lw	a3,32(a1)
 10041f0:	02470713          	add	a4,a4,36
 10041f4:	40e607b3          	sub	a5,a2,a4
 10041f8:	fc772e23          	sw	t2,-36(a4)
 10041fc:	fe572023          	sw	t0,-32(a4)
 1004200:	fff72223          	sw	t6,-28(a4)
 1004204:	ffe72423          	sw	t5,-24(a4)
 1004208:	ffd72623          	sw	t4,-20(a4)
 100420c:	ffc72823          	sw	t3,-16(a4)
 1004210:	fe672a23          	sw	t1,-12(a4)
 1004214:	ff072c23          	sw	a6,-8(a4)
 1004218:	fed72e23          	sw	a3,-4(a4)
 100421c:	02458593          	add	a1,a1,36
 1004220:	faf446e3          	blt	s0,a5,10041cc <memcpy+0xd8>
 1004224:	00058693          	mv	a3,a1
 1004228:	00070793          	mv	a5,a4
 100422c:	02c77863          	bgeu	a4,a2,100425c <memcpy+0x168>
 1004230:	0006a803          	lw	a6,0(a3)
 1004234:	00478793          	add	a5,a5,4
 1004238:	00468693          	add	a3,a3,4
 100423c:	ff07ae23          	sw	a6,-4(a5)
 1004240:	fec7e8e3          	bltu	a5,a2,1004230 <memcpy+0x13c>
 1004244:	fff60793          	add	a5,a2,-1
 1004248:	40e787b3          	sub	a5,a5,a4
 100424c:	ffc7f793          	and	a5,a5,-4
 1004250:	00478793          	add	a5,a5,4
 1004254:	00f70733          	add	a4,a4,a5
 1004258:	00f585b3          	add	a1,a1,a5
 100425c:	01176863          	bltu	a4,a7,100426c <memcpy+0x178>
 1004260:	00c12403          	lw	s0,12(sp)
 1004264:	01010113          	add	sp,sp,16
 1004268:	00008067          	ret
 100426c:	0005c783          	lbu	a5,0(a1)
 1004270:	00170713          	add	a4,a4,1
 1004274:	00158593          	add	a1,a1,1
 1004278:	fef70fa3          	sb	a5,-1(a4)
 100427c:	fee882e3          	beq	a7,a4,1004260 <memcpy+0x16c>
 1004280:	0005c783          	lbu	a5,0(a1)
 1004284:	00170713          	add	a4,a4,1
 1004288:	00158593          	add	a1,a1,1
 100428c:	fef70fa3          	sb	a5,-1(a4)
 1004290:	fce89ee3          	bne	a7,a4,100426c <memcpy+0x178>
 1004294:	fcdff06f          	j	1004260 <memcpy+0x16c>

01004298 <_realloc_r>:
 1004298:	fd010113          	add	sp,sp,-48
 100429c:	02912223          	sw	s1,36(sp)
 10042a0:	02112623          	sw	ra,44(sp)
 10042a4:	00060493          	mv	s1,a2
 10042a8:	1e058863          	beqz	a1,1004498 <_realloc_r+0x200>
 10042ac:	02812423          	sw	s0,40(sp)
 10042b0:	03212023          	sw	s2,32(sp)
 10042b4:	00058413          	mv	s0,a1
 10042b8:	01312e23          	sw	s3,28(sp)
 10042bc:	01512a23          	sw	s5,20(sp)
 10042c0:	01412c23          	sw	s4,24(sp)
 10042c4:	00050913          	mv	s2,a0
 10042c8:	c61fe0ef          	jal	1002f28 <__malloc_lock>
 10042cc:	ffc42703          	lw	a4,-4(s0)
 10042d0:	00b48793          	add	a5,s1,11
 10042d4:	01600693          	li	a3,22
 10042d8:	ff840a93          	add	s5,s0,-8
 10042dc:	ffc77993          	and	s3,a4,-4
 10042e0:	10f6f263          	bgeu	a3,a5,10043e4 <_realloc_r+0x14c>
 10042e4:	ff87fa13          	and	s4,a5,-8
 10042e8:	1007c263          	bltz	a5,10043ec <_realloc_r+0x154>
 10042ec:	109a6063          	bltu	s4,s1,10043ec <_realloc_r+0x154>
 10042f0:	1349d263          	bge	s3,s4,1004414 <_realloc_r+0x17c>
 10042f4:	01812423          	sw	s8,8(sp)
 10042f8:	00002c17          	auipc	s8,0x2
 10042fc:	ed8c0c13          	add	s8,s8,-296 # 10061d0 <__malloc_av_>
 1004300:	008c2603          	lw	a2,8(s8)
 1004304:	013a86b3          	add	a3,s5,s3
 1004308:	0046a783          	lw	a5,4(a3)
 100430c:	1cd60863          	beq	a2,a3,10044dc <_realloc_r+0x244>
 1004310:	ffe7f613          	and	a2,a5,-2
 1004314:	00c68633          	add	a2,a3,a2
 1004318:	00462603          	lw	a2,4(a2)
 100431c:	00167613          	and	a2,a2,1
 1004320:	14061a63          	bnez	a2,1004474 <_realloc_r+0x1dc>
 1004324:	ffc7f793          	and	a5,a5,-4
 1004328:	00f98633          	add	a2,s3,a5
 100432c:	0d465863          	bge	a2,s4,10043fc <_realloc_r+0x164>
 1004330:	00177713          	and	a4,a4,1
 1004334:	02071c63          	bnez	a4,100436c <_realloc_r+0xd4>
 1004338:	01712623          	sw	s7,12(sp)
 100433c:	ff842b83          	lw	s7,-8(s0)
 1004340:	01612823          	sw	s6,16(sp)
 1004344:	417a8bb3          	sub	s7,s5,s7
 1004348:	004ba703          	lw	a4,4(s7)
 100434c:	ffc77713          	and	a4,a4,-4
 1004350:	00e787b3          	add	a5,a5,a4
 1004354:	01378b33          	add	s6,a5,s3
 1004358:	334b5c63          	bge	s6,s4,1004690 <_realloc_r+0x3f8>
 100435c:	00e98b33          	add	s6,s3,a4
 1004360:	294b5863          	bge	s6,s4,10045f0 <_realloc_r+0x358>
 1004364:	01012b03          	lw	s6,16(sp)
 1004368:	00c12b83          	lw	s7,12(sp)
 100436c:	00048593          	mv	a1,s1
 1004370:	00090513          	mv	a0,s2
 1004374:	becfe0ef          	jal	1002760 <_malloc_r>
 1004378:	00050493          	mv	s1,a0
 100437c:	40050863          	beqz	a0,100478c <_realloc_r+0x4f4>
 1004380:	ffc42783          	lw	a5,-4(s0)
 1004384:	ff850713          	add	a4,a0,-8
 1004388:	ffe7f793          	and	a5,a5,-2
 100438c:	00fa87b3          	add	a5,s5,a5
 1004390:	24e78663          	beq	a5,a4,10045dc <_realloc_r+0x344>
 1004394:	ffc98613          	add	a2,s3,-4
 1004398:	02400793          	li	a5,36
 100439c:	2ec7e463          	bltu	a5,a2,1004684 <_realloc_r+0x3ec>
 10043a0:	01300713          	li	a4,19
 10043a4:	20c76a63          	bltu	a4,a2,10045b8 <_realloc_r+0x320>
 10043a8:	00050793          	mv	a5,a0
 10043ac:	00040713          	mv	a4,s0
 10043b0:	00072683          	lw	a3,0(a4)
 10043b4:	00d7a023          	sw	a3,0(a5)
 10043b8:	00472683          	lw	a3,4(a4)
 10043bc:	00d7a223          	sw	a3,4(a5)
 10043c0:	00872703          	lw	a4,8(a4)
 10043c4:	00e7a423          	sw	a4,8(a5)
 10043c8:	00040593          	mv	a1,s0
 10043cc:	00090513          	mv	a0,s2
 10043d0:	874fe0ef          	jal	1002444 <_free_r>
 10043d4:	00090513          	mv	a0,s2
 10043d8:	b59fe0ef          	jal	1002f30 <__malloc_unlock>
 10043dc:	00812c03          	lw	s8,8(sp)
 10043e0:	06c0006f          	j	100444c <_realloc_r+0x1b4>
 10043e4:	01000a13          	li	s4,16
 10043e8:	f09a74e3          	bgeu	s4,s1,10042f0 <_realloc_r+0x58>
 10043ec:	00c00793          	li	a5,12
 10043f0:	00f92023          	sw	a5,0(s2)
 10043f4:	00000493          	li	s1,0
 10043f8:	0540006f          	j	100444c <_realloc_r+0x1b4>
 10043fc:	00c6a783          	lw	a5,12(a3)
 1004400:	0086a703          	lw	a4,8(a3)
 1004404:	00812c03          	lw	s8,8(sp)
 1004408:	00060993          	mv	s3,a2
 100440c:	00f72623          	sw	a5,12(a4)
 1004410:	00e7a423          	sw	a4,8(a5)
 1004414:	004aa783          	lw	a5,4(s5)
 1004418:	414986b3          	sub	a3,s3,s4
 100441c:	00f00613          	li	a2,15
 1004420:	0017f793          	and	a5,a5,1
 1004424:	013a8733          	add	a4,s5,s3
 1004428:	08d66263          	bltu	a2,a3,10044ac <_realloc_r+0x214>
 100442c:	0137e7b3          	or	a5,a5,s3
 1004430:	00faa223          	sw	a5,4(s5)
 1004434:	00472783          	lw	a5,4(a4)
 1004438:	0017e793          	or	a5,a5,1
 100443c:	00f72223          	sw	a5,4(a4)
 1004440:	00090513          	mv	a0,s2
 1004444:	aedfe0ef          	jal	1002f30 <__malloc_unlock>
 1004448:	00040493          	mv	s1,s0
 100444c:	02812403          	lw	s0,40(sp)
 1004450:	02c12083          	lw	ra,44(sp)
 1004454:	02012903          	lw	s2,32(sp)
 1004458:	01c12983          	lw	s3,28(sp)
 100445c:	01812a03          	lw	s4,24(sp)
 1004460:	01412a83          	lw	s5,20(sp)
 1004464:	00048513          	mv	a0,s1
 1004468:	02412483          	lw	s1,36(sp)
 100446c:	03010113          	add	sp,sp,48
 1004470:	00008067          	ret
 1004474:	00177713          	and	a4,a4,1
 1004478:	ee071ae3          	bnez	a4,100436c <_realloc_r+0xd4>
 100447c:	01712623          	sw	s7,12(sp)
 1004480:	ff842b83          	lw	s7,-8(s0)
 1004484:	01612823          	sw	s6,16(sp)
 1004488:	417a8bb3          	sub	s7,s5,s7
 100448c:	004ba703          	lw	a4,4(s7)
 1004490:	ffc77713          	and	a4,a4,-4
 1004494:	ec9ff06f          	j	100435c <_realloc_r+0xc4>
 1004498:	02c12083          	lw	ra,44(sp)
 100449c:	02412483          	lw	s1,36(sp)
 10044a0:	00060593          	mv	a1,a2
 10044a4:	03010113          	add	sp,sp,48
 10044a8:	ab8fe06f          	j	1002760 <_malloc_r>
 10044ac:	0147e7b3          	or	a5,a5,s4
 10044b0:	00faa223          	sw	a5,4(s5)
 10044b4:	014a85b3          	add	a1,s5,s4
 10044b8:	0016e693          	or	a3,a3,1
 10044bc:	00d5a223          	sw	a3,4(a1)
 10044c0:	00472783          	lw	a5,4(a4)
 10044c4:	00858593          	add	a1,a1,8
 10044c8:	00090513          	mv	a0,s2
 10044cc:	0017e793          	or	a5,a5,1
 10044d0:	00f72223          	sw	a5,4(a4)
 10044d4:	f71fd0ef          	jal	1002444 <_free_r>
 10044d8:	f69ff06f          	j	1004440 <_realloc_r+0x1a8>
 10044dc:	ffc7f793          	and	a5,a5,-4
 10044e0:	013786b3          	add	a3,a5,s3
 10044e4:	010a0613          	add	a2,s4,16
 10044e8:	26c6d063          	bge	a3,a2,1004748 <_realloc_r+0x4b0>
 10044ec:	00177713          	and	a4,a4,1
 10044f0:	e6071ee3          	bnez	a4,100436c <_realloc_r+0xd4>
 10044f4:	01712623          	sw	s7,12(sp)
 10044f8:	ff842b83          	lw	s7,-8(s0)
 10044fc:	01612823          	sw	s6,16(sp)
 1004500:	417a8bb3          	sub	s7,s5,s7
 1004504:	004ba703          	lw	a4,4(s7)
 1004508:	ffc77713          	and	a4,a4,-4
 100450c:	00e787b3          	add	a5,a5,a4
 1004510:	01378b33          	add	s6,a5,s3
 1004514:	e4cb44e3          	blt	s6,a2,100435c <_realloc_r+0xc4>
 1004518:	00cba783          	lw	a5,12(s7)
 100451c:	008ba703          	lw	a4,8(s7)
 1004520:	ffc98613          	add	a2,s3,-4
 1004524:	02400693          	li	a3,36
 1004528:	00f72623          	sw	a5,12(a4)
 100452c:	00e7a423          	sw	a4,8(a5)
 1004530:	008b8493          	add	s1,s7,8
 1004534:	28c6e463          	bltu	a3,a2,10047bc <_realloc_r+0x524>
 1004538:	01300713          	li	a4,19
 100453c:	00048793          	mv	a5,s1
 1004540:	02c77263          	bgeu	a4,a2,1004564 <_realloc_r+0x2cc>
 1004544:	00042703          	lw	a4,0(s0)
 1004548:	01b00793          	li	a5,27
 100454c:	00eba423          	sw	a4,8(s7)
 1004550:	00442703          	lw	a4,4(s0)
 1004554:	00eba623          	sw	a4,12(s7)
 1004558:	26c7ea63          	bltu	a5,a2,10047cc <_realloc_r+0x534>
 100455c:	00840413          	add	s0,s0,8
 1004560:	010b8793          	add	a5,s7,16
 1004564:	00042703          	lw	a4,0(s0)
 1004568:	00e7a023          	sw	a4,0(a5)
 100456c:	00442703          	lw	a4,4(s0)
 1004570:	00e7a223          	sw	a4,4(a5)
 1004574:	00842703          	lw	a4,8(s0)
 1004578:	00e7a423          	sw	a4,8(a5)
 100457c:	014b8733          	add	a4,s7,s4
 1004580:	414b07b3          	sub	a5,s6,s4
 1004584:	00ec2423          	sw	a4,8(s8)
 1004588:	0017e793          	or	a5,a5,1
 100458c:	00f72223          	sw	a5,4(a4)
 1004590:	004ba783          	lw	a5,4(s7)
 1004594:	00090513          	mv	a0,s2
 1004598:	0017f793          	and	a5,a5,1
 100459c:	0147e7b3          	or	a5,a5,s4
 10045a0:	00fba223          	sw	a5,4(s7)
 10045a4:	98dfe0ef          	jal	1002f30 <__malloc_unlock>
 10045a8:	01012b03          	lw	s6,16(sp)
 10045ac:	00c12b83          	lw	s7,12(sp)
 10045b0:	00812c03          	lw	s8,8(sp)
 10045b4:	e99ff06f          	j	100444c <_realloc_r+0x1b4>
 10045b8:	00042683          	lw	a3,0(s0)
 10045bc:	01b00713          	li	a4,27
 10045c0:	00d52023          	sw	a3,0(a0)
 10045c4:	00442683          	lw	a3,4(s0)
 10045c8:	00d52223          	sw	a3,4(a0)
 10045cc:	14c76e63          	bltu	a4,a2,1004728 <_realloc_r+0x490>
 10045d0:	00840713          	add	a4,s0,8
 10045d4:	00850793          	add	a5,a0,8
 10045d8:	dd9ff06f          	j	10043b0 <_realloc_r+0x118>
 10045dc:	ffc52783          	lw	a5,-4(a0)
 10045e0:	00812c03          	lw	s8,8(sp)
 10045e4:	ffc7f793          	and	a5,a5,-4
 10045e8:	00f989b3          	add	s3,s3,a5
 10045ec:	e29ff06f          	j	1004414 <_realloc_r+0x17c>
 10045f0:	00cba783          	lw	a5,12(s7)
 10045f4:	008ba703          	lw	a4,8(s7)
 10045f8:	ffc98613          	add	a2,s3,-4
 10045fc:	02400693          	li	a3,36
 1004600:	00f72623          	sw	a5,12(a4)
 1004604:	00e7a423          	sw	a4,8(a5)
 1004608:	008b8493          	add	s1,s7,8
 100460c:	10c6e663          	bltu	a3,a2,1004718 <_realloc_r+0x480>
 1004610:	01300713          	li	a4,19
 1004614:	00048793          	mv	a5,s1
 1004618:	02c77c63          	bgeu	a4,a2,1004650 <_realloc_r+0x3b8>
 100461c:	00042703          	lw	a4,0(s0)
 1004620:	01b00793          	li	a5,27
 1004624:	00eba423          	sw	a4,8(s7)
 1004628:	00442703          	lw	a4,4(s0)
 100462c:	00eba623          	sw	a4,12(s7)
 1004630:	14c7f863          	bgeu	a5,a2,1004780 <_realloc_r+0x4e8>
 1004634:	00842783          	lw	a5,8(s0)
 1004638:	00fba823          	sw	a5,16(s7)
 100463c:	00c42783          	lw	a5,12(s0)
 1004640:	00fbaa23          	sw	a5,20(s7)
 1004644:	0ad60c63          	beq	a2,a3,10046fc <_realloc_r+0x464>
 1004648:	01040413          	add	s0,s0,16
 100464c:	018b8793          	add	a5,s7,24
 1004650:	00042703          	lw	a4,0(s0)
 1004654:	00e7a023          	sw	a4,0(a5)
 1004658:	00442703          	lw	a4,4(s0)
 100465c:	00e7a223          	sw	a4,4(a5)
 1004660:	00842703          	lw	a4,8(s0)
 1004664:	00e7a423          	sw	a4,8(a5)
 1004668:	000b0993          	mv	s3,s6
 100466c:	000b8a93          	mv	s5,s7
 1004670:	01012b03          	lw	s6,16(sp)
 1004674:	00c12b83          	lw	s7,12(sp)
 1004678:	00812c03          	lw	s8,8(sp)
 100467c:	00048413          	mv	s0,s1
 1004680:	d95ff06f          	j	1004414 <_realloc_r+0x17c>
 1004684:	00040593          	mv	a1,s0
 1004688:	961ff0ef          	jal	1003fe8 <memmove>
 100468c:	d3dff06f          	j	10043c8 <_realloc_r+0x130>
 1004690:	00c6a783          	lw	a5,12(a3)
 1004694:	0086a703          	lw	a4,8(a3)
 1004698:	ffc98613          	add	a2,s3,-4
 100469c:	02400693          	li	a3,36
 10046a0:	00f72623          	sw	a5,12(a4)
 10046a4:	00e7a423          	sw	a4,8(a5)
 10046a8:	008ba703          	lw	a4,8(s7)
 10046ac:	00cba783          	lw	a5,12(s7)
 10046b0:	008b8493          	add	s1,s7,8
 10046b4:	00f72623          	sw	a5,12(a4)
 10046b8:	00e7a423          	sw	a4,8(a5)
 10046bc:	04c6ee63          	bltu	a3,a2,1004718 <_realloc_r+0x480>
 10046c0:	01300713          	li	a4,19
 10046c4:	00048793          	mv	a5,s1
 10046c8:	f8c774e3          	bgeu	a4,a2,1004650 <_realloc_r+0x3b8>
 10046cc:	00042703          	lw	a4,0(s0)
 10046d0:	01b00793          	li	a5,27
 10046d4:	00eba423          	sw	a4,8(s7)
 10046d8:	00442703          	lw	a4,4(s0)
 10046dc:	00eba623          	sw	a4,12(s7)
 10046e0:	0ac7f063          	bgeu	a5,a2,1004780 <_realloc_r+0x4e8>
 10046e4:	00842703          	lw	a4,8(s0)
 10046e8:	02400793          	li	a5,36
 10046ec:	00eba823          	sw	a4,16(s7)
 10046f0:	00c42703          	lw	a4,12(s0)
 10046f4:	00ebaa23          	sw	a4,20(s7)
 10046f8:	f4f618e3          	bne	a2,a5,1004648 <_realloc_r+0x3b0>
 10046fc:	01042703          	lw	a4,16(s0)
 1004700:	020b8793          	add	a5,s7,32
 1004704:	01840413          	add	s0,s0,24
 1004708:	00ebac23          	sw	a4,24(s7)
 100470c:	ffc42703          	lw	a4,-4(s0)
 1004710:	00ebae23          	sw	a4,28(s7)
 1004714:	f3dff06f          	j	1004650 <_realloc_r+0x3b8>
 1004718:	00040593          	mv	a1,s0
 100471c:	00048513          	mv	a0,s1
 1004720:	8c9ff0ef          	jal	1003fe8 <memmove>
 1004724:	f45ff06f          	j	1004668 <_realloc_r+0x3d0>
 1004728:	00842703          	lw	a4,8(s0)
 100472c:	00e52423          	sw	a4,8(a0)
 1004730:	00c42703          	lw	a4,12(s0)
 1004734:	00e52623          	sw	a4,12(a0)
 1004738:	06f60463          	beq	a2,a5,10047a0 <_realloc_r+0x508>
 100473c:	01040713          	add	a4,s0,16
 1004740:	01050793          	add	a5,a0,16
 1004744:	c6dff06f          	j	10043b0 <_realloc_r+0x118>
 1004748:	014a8ab3          	add	s5,s5,s4
 100474c:	414687b3          	sub	a5,a3,s4
 1004750:	015c2423          	sw	s5,8(s8)
 1004754:	0017e793          	or	a5,a5,1
 1004758:	00faa223          	sw	a5,4(s5)
 100475c:	ffc42783          	lw	a5,-4(s0)
 1004760:	00090513          	mv	a0,s2
 1004764:	00040493          	mv	s1,s0
 1004768:	0017f793          	and	a5,a5,1
 100476c:	0147e7b3          	or	a5,a5,s4
 1004770:	fef42e23          	sw	a5,-4(s0)
 1004774:	fbcfe0ef          	jal	1002f30 <__malloc_unlock>
 1004778:	00812c03          	lw	s8,8(sp)
 100477c:	cd1ff06f          	j	100444c <_realloc_r+0x1b4>
 1004780:	00840413          	add	s0,s0,8
 1004784:	010b8793          	add	a5,s7,16
 1004788:	ec9ff06f          	j	1004650 <_realloc_r+0x3b8>
 100478c:	00090513          	mv	a0,s2
 1004790:	fa0fe0ef          	jal	1002f30 <__malloc_unlock>
 1004794:	00000493          	li	s1,0
 1004798:	00812c03          	lw	s8,8(sp)
 100479c:	cb1ff06f          	j	100444c <_realloc_r+0x1b4>
 10047a0:	01042683          	lw	a3,16(s0)
 10047a4:	01840713          	add	a4,s0,24
 10047a8:	01850793          	add	a5,a0,24
 10047ac:	00d52823          	sw	a3,16(a0)
 10047b0:	01442683          	lw	a3,20(s0)
 10047b4:	00d52a23          	sw	a3,20(a0)
 10047b8:	bf9ff06f          	j	10043b0 <_realloc_r+0x118>
 10047bc:	00040593          	mv	a1,s0
 10047c0:	00048513          	mv	a0,s1
 10047c4:	825ff0ef          	jal	1003fe8 <memmove>
 10047c8:	db5ff06f          	j	100457c <_realloc_r+0x2e4>
 10047cc:	00842783          	lw	a5,8(s0)
 10047d0:	00fba823          	sw	a5,16(s7)
 10047d4:	00c42783          	lw	a5,12(s0)
 10047d8:	00fbaa23          	sw	a5,20(s7)
 10047dc:	00d60863          	beq	a2,a3,10047ec <_realloc_r+0x554>
 10047e0:	01040413          	add	s0,s0,16
 10047e4:	018b8793          	add	a5,s7,24
 10047e8:	d7dff06f          	j	1004564 <_realloc_r+0x2cc>
 10047ec:	01042703          	lw	a4,16(s0)
 10047f0:	020b8793          	add	a5,s7,32
 10047f4:	01840413          	add	s0,s0,24
 10047f8:	00ebac23          	sw	a4,24(s7)
 10047fc:	ffc42703          	lw	a4,-4(s0)
 1004800:	00ebae23          	sw	a4,28(s7)
 1004804:	d61ff06f          	j	1004564 <_realloc_r+0x2cc>

01004808 <__mulsi3>:
 1004808:	00050613          	mv	a2,a0
 100480c:	00000513          	li	a0,0
 1004810:	0015f693          	and	a3,a1,1
 1004814:	00068463          	beqz	a3,100481c <__mulsi3+0x14>
 1004818:	00c50533          	add	a0,a0,a2
 100481c:	0015d593          	srl	a1,a1,0x1
 1004820:	00161613          	sll	a2,a2,0x1
 1004824:	fe0596e3          	bnez	a1,1004810 <__mulsi3+0x8>
 1004828:	00008067          	ret

0100482c <__divsi3>:
 100482c:	06054063          	bltz	a0,100488c <__umodsi3+0x10>
 1004830:	0605c663          	bltz	a1,100489c <__umodsi3+0x20>

01004834 <__hidden___udivsi3>:
 1004834:	00058613          	mv	a2,a1
 1004838:	00050593          	mv	a1,a0
 100483c:	fff00513          	li	a0,-1
 1004840:	02060c63          	beqz	a2,1004878 <__hidden___udivsi3+0x44>
 1004844:	00100693          	li	a3,1
 1004848:	00b67a63          	bgeu	a2,a1,100485c <__hidden___udivsi3+0x28>
 100484c:	00c05863          	blez	a2,100485c <__hidden___udivsi3+0x28>
 1004850:	00161613          	sll	a2,a2,0x1
 1004854:	00169693          	sll	a3,a3,0x1
 1004858:	feb66ae3          	bltu	a2,a1,100484c <__hidden___udivsi3+0x18>
 100485c:	00000513          	li	a0,0
 1004860:	00c5e663          	bltu	a1,a2,100486c <__hidden___udivsi3+0x38>
 1004864:	40c585b3          	sub	a1,a1,a2
 1004868:	00d56533          	or	a0,a0,a3
 100486c:	0016d693          	srl	a3,a3,0x1
 1004870:	00165613          	srl	a2,a2,0x1
 1004874:	fe0696e3          	bnez	a3,1004860 <__hidden___udivsi3+0x2c>
 1004878:	00008067          	ret

0100487c <__umodsi3>:
 100487c:	00008293          	mv	t0,ra
 1004880:	fb5ff0ef          	jal	1004834 <__hidden___udivsi3>
 1004884:	00058513          	mv	a0,a1
 1004888:	00028067          	jr	t0 # 100200c <memset+0xb4>
 100488c:	40a00533          	neg	a0,a0
 1004890:	00b04863          	bgtz	a1,10048a0 <__umodsi3+0x24>
 1004894:	40b005b3          	neg	a1,a1
 1004898:	f9dff06f          	j	1004834 <__hidden___udivsi3>
 100489c:	40b005b3          	neg	a1,a1
 10048a0:	00008293          	mv	t0,ra
 10048a4:	f91ff0ef          	jal	1004834 <__hidden___udivsi3>
 10048a8:	40a00533          	neg	a0,a0
 10048ac:	00028067          	jr	t0

010048b0 <__modsi3>:
 10048b0:	00008293          	mv	t0,ra
 10048b4:	0005ca63          	bltz	a1,10048c8 <__modsi3+0x18>
 10048b8:	00054c63          	bltz	a0,10048d0 <__modsi3+0x20>
 10048bc:	f79ff0ef          	jal	1004834 <__hidden___udivsi3>
 10048c0:	00058513          	mv	a0,a1
 10048c4:	00028067          	jr	t0
 10048c8:	40b005b3          	neg	a1,a1
 10048cc:	fe0558e3          	bgez	a0,10048bc <__modsi3+0xc>
 10048d0:	40a00533          	neg	a0,a0
 10048d4:	f61ff0ef          	jal	1004834 <__hidden___udivsi3>
 10048d8:	40b00533          	neg	a0,a1
 10048dc:	00028067          	jr	t0

010048e0 <alt_get_errno>:
  if (fd)
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */
 10048e0:	ff010113          	add	sp,sp,-16
 10048e4:	00112623          	sw	ra,12(sp)
 10048e8:	00812423          	sw	s0,8(sp)
 10048ec:	01010413          	add	s0,sp,16

 10048f0:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 10048f4:	00078a63          	beqz	a5,1004908 <alt_get_errno+0x28>
 10048f8:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 10048fc:	000780e7          	jalr	a5
 1004900:	00050793          	mv	a5,a0
 1004904:	0080006f          	j	100490c <alt_get_errno+0x2c>
 1004908:	fa418793          	add	a5,gp,-92 # 1006d7c <errno>
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100490c:	00078513          	mv	a0,a5
 1004910:	00c12083          	lw	ra,12(sp)
 1004914:	00812403          	lw	s0,8(sp)
 1004918:	01010113          	add	sp,sp,16
 100491c:	00008067          	ret

01004920 <_close>:
{
 1004920:	fd010113          	add	sp,sp,-48
 1004924:	02112623          	sw	ra,44(sp)
 1004928:	02812423          	sw	s0,40(sp)
 100492c:	03010413          	add	s0,sp,48
 1004930:	fca42e23          	sw	a0,-36(s0)
  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1004934:	fdc42783          	lw	a5,-36(s0)
 1004938:	0207c463          	bltz	a5,1004960 <_close+0x40>
 100493c:	fdc42703          	lw	a4,-36(s0)
 1004940:	00070793          	mv	a5,a4
 1004944:	00179793          	sll	a5,a5,0x1
 1004948:	00e787b3          	add	a5,a5,a4
 100494c:	00279793          	sll	a5,a5,0x2
 1004950:	01006737          	lui	a4,0x1006
 1004954:	f2470713          	add	a4,a4,-220 # 1005f24 <alt_fd_list>
 1004958:	00e787b3          	add	a5,a5,a4
 100495c:	0080006f          	j	1004964 <_close+0x44>
 1004960:	00000793          	li	a5,0
 1004964:	fef42423          	sw	a5,-24(s0)
  if (fd)
 1004968:	fe842783          	lw	a5,-24(s0)
 100496c:	06078663          	beqz	a5,10049d8 <_close+0xb8>
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1004970:	fe842783          	lw	a5,-24(s0)
 1004974:	0007a783          	lw	a5,0(a5)
 1004978:	0107a783          	lw	a5,16(a5)
 100497c:	02078063          	beqz	a5,100499c <_close+0x7c>
 1004980:	fe842783          	lw	a5,-24(s0)
 1004984:	0007a783          	lw	a5,0(a5)
 1004988:	0107a783          	lw	a5,16(a5)
 100498c:	fe842503          	lw	a0,-24(s0)
 1004990:	000780e7          	jalr	a5
 1004994:	00050793          	mv	a5,a0
 1004998:	0080006f          	j	10049a0 <_close+0x80>
 100499c:	00000793          	li	a5,0
 10049a0:	fef42623          	sw	a5,-20(s0)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 10049a4:	fdc42503          	lw	a0,-36(s0)
 10049a8:	ab8fc0ef          	jal	1000c60 <alt_release_fd>
    if (rval < 0)
 10049ac:	fec42783          	lw	a5,-20(s0)
 10049b0:	0207d063          	bgez	a5,10049d0 <_close+0xb0>
    {
      ALT_ERRNO = -rval;
 10049b4:	f2dff0ef          	jal	10048e0 <alt_get_errno>
 10049b8:	00050713          	mv	a4,a0
 10049bc:	fec42783          	lw	a5,-20(s0)
 10049c0:	40f007b3          	neg	a5,a5
 10049c4:	00f72023          	sw	a5,0(a4)
      return -1;
 10049c8:	fff00793          	li	a5,-1
 10049cc:	0200006f          	j	10049ec <_close+0xcc>
    }
    return 0;
 10049d0:	00000793          	li	a5,0
 10049d4:	0180006f          	j	10049ec <_close+0xcc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10049d8:	f09ff0ef          	jal	10048e0 <alt_get_errno>
 10049dc:	00050713          	mv	a4,a0
 10049e0:	05100793          	li	a5,81
 10049e4:	00f72023          	sw	a5,0(a4)
    return -1;
 10049e8:	fff00793          	li	a5,-1
  }
}
 10049ec:	00078513          	mv	a0,a5
 10049f0:	02c12083          	lw	ra,44(sp)
 10049f4:	02812403          	lw	s0,40(sp)
 10049f8:	03010113          	add	sp,sp,48
 10049fc:	00008067          	ret

01004a00 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1004a00:	fd010113          	add	sp,sp,-48
 1004a04:	02812623          	sw	s0,44(sp)
 1004a08:	03010413          	add	s0,sp,48
 1004a0c:	fca42e23          	sw	a0,-36(s0)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1004a10:	00000013          	nop
 1004a14:	fdc42783          	lw	a5,-36(s0)
 1004a18:	fef42623          	sw	a5,-20(s0)
 * Routine called on exit.
 * TODO: Add support for GMON/gprof.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int a0 asm ("a0") = exit_code;
 1004a1c:	fec42503          	lw	a0,-20(s0)
    "ebreak" 
    : 
    : "r"(a0), "r"(a1));

#else /* !DEBUG_STUB */
  if (a0) {
 1004a20:	00050793          	mv	a5,a0
 1004a24:	00078663          	beqz	a5,1004a30 <_exit+0x30>
    ALT_SIM_FAIL();
 1004a28:	7c103013          	sltiu	zero,zero,1985
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 1004a2c:	0080006f          	j	1004a34 <_exit+0x34>
    ALT_SIM_PASS();
 1004a30:	7c203013          	sltiu	zero,zero,1986
}
 1004a34:	00000013          	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1004a38:	00000013          	nop
 1004a3c:	ffdff06f          	j	1004a38 <_exit+0x38>

01004a40 <alt_get_errno>:
    case 2: /* stderr file descriptor */
        st->st_mode = _IFCHR;
        return 0;
#endif /* ALT_STDERR_PRESENT */        
    default:
        return -1;
 1004a40:	ff010113          	add	sp,sp,-16
 1004a44:	00112623          	sw	ra,12(sp)
 1004a48:	00812423          	sw	s0,8(sp)
 1004a4c:	01010413          	add	s0,sp,16
    }
 1004a50:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1004a54:	00078a63          	beqz	a5,1004a68 <alt_get_errno+0x28>
 1004a58:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1004a5c:	000780e7          	jalr	a5
 1004a60:	00050793          	mv	a5,a0
 1004a64:	0080006f          	j	1004a6c <alt_get_errno+0x2c>
 1004a68:	fa418793          	add	a5,gp,-92 # 1006d7c <errno>

 1004a6c:	00078513          	mv	a0,a5
 1004a70:	00c12083          	lw	ra,12(sp)
 1004a74:	00812403          	lw	s0,8(sp)
 1004a78:	01010113          	add	sp,sp,16
 1004a7c:	00008067          	ret

01004a80 <_fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1004a80:	fd010113          	add	sp,sp,-48
 1004a84:	02112623          	sw	ra,44(sp)
 1004a88:	02812423          	sw	s0,40(sp)
 1004a8c:	03010413          	add	s0,sp,48
 1004a90:	fca42e23          	sw	a0,-36(s0)
 1004a94:	fcb42c23          	sw	a1,-40(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1004a98:	fdc42783          	lw	a5,-36(s0)
 1004a9c:	0207c463          	bltz	a5,1004ac4 <_fstat+0x44>
 1004aa0:	fdc42703          	lw	a4,-36(s0)
 1004aa4:	00070793          	mv	a5,a4
 1004aa8:	00179793          	sll	a5,a5,0x1
 1004aac:	00e787b3          	add	a5,a5,a4
 1004ab0:	00279793          	sll	a5,a5,0x2
 1004ab4:	01006737          	lui	a4,0x1006
 1004ab8:	f2470713          	add	a4,a4,-220 # 1005f24 <alt_fd_list>
 1004abc:	00e787b3          	add	a5,a5,a4
 1004ac0:	0080006f          	j	1004ac8 <_fstat+0x48>
 1004ac4:	00000793          	li	a5,0
 1004ac8:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
 1004acc:	fec42783          	lw	a5,-20(s0)
 1004ad0:	04078463          	beqz	a5,1004b18 <_fstat+0x98>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1004ad4:	fec42783          	lw	a5,-20(s0)
 1004ad8:	0007a783          	lw	a5,0(a5)
 1004adc:	0207a783          	lw	a5,32(a5)
 1004ae0:	02078263          	beqz	a5,1004b04 <_fstat+0x84>
    {
      return fd->dev->fstat(fd, st);
 1004ae4:	fec42783          	lw	a5,-20(s0)
 1004ae8:	0007a783          	lw	a5,0(a5)
 1004aec:	0207a783          	lw	a5,32(a5)
 1004af0:	fd842583          	lw	a1,-40(s0)
 1004af4:	fec42503          	lw	a0,-20(s0)
 1004af8:	000780e7          	jalr	a5
 1004afc:	00050793          	mv	a5,a0
 1004b00:	02c0006f          	j	1004b2c <_fstat+0xac>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1004b04:	fd842783          	lw	a5,-40(s0)
 1004b08:	00002737          	lui	a4,0x2
 1004b0c:	00e7a223          	sw	a4,4(a5)
      return 0;
 1004b10:	00000793          	li	a5,0
 1004b14:	0180006f          	j	1004b2c <_fstat+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1004b18:	f29ff0ef          	jal	1004a40 <alt_get_errno>
 1004b1c:	00050713          	mv	a4,a0
 1004b20:	05100793          	li	a5,81
 1004b24:	00f72023          	sw	a5,0(a4) # 2000 <__reset-0xffe000>
    return -1;
 1004b28:	fff00793          	li	a5,-1
  }
}
 1004b2c:	00078513          	mv	a0,a5
 1004b30:	02c12083          	lw	ra,44(sp)
 1004b34:	02812403          	lw	s0,40(sp)
 1004b38:	03010113          	add	sp,sp,48
 1004b3c:	00008067          	ret

01004b40 <alt_get_errno>:
 * isatty() can be used to determine whether the input file descriptor "file" 
 * refers to a terminal device or not. If it is a terminal device then the
 * return value is one, otherwise it is zero.  
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 1004b40:	ff010113          	add	sp,sp,-16
 1004b44:	00112623          	sw	ra,12(sp)
 1004b48:	00812423          	sw	s0,8(sp)
 1004b4c:	01010413          	add	s0,sp,16
 
 1004b50:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1004b54:	00078a63          	beqz	a5,1004b68 <alt_get_errno+0x28>
 1004b58:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1004b5c:	000780e7          	jalr	a5
 1004b60:	00050793          	mv	a5,a0
 1004b64:	0080006f          	j	1004b6c <alt_get_errno+0x2c>
 1004b68:	fa418793          	add	a5,gp,-92 # 1006d7c <errno>
int ALT_ISATTY (int file)
 1004b6c:	00078513          	mv	a0,a5
 1004b70:	00c12083          	lw	ra,12(sp)
 1004b74:	00812403          	lw	s0,8(sp)
 1004b78:	01010113          	add	sp,sp,16
 1004b7c:	00008067          	ret

01004b80 <_isatty>:
{
 1004b80:	f7010113          	add	sp,sp,-144
 1004b84:	08112623          	sw	ra,140(sp)
 1004b88:	08812423          	sw	s0,136(sp)
 1004b8c:	09010413          	add	s0,sp,144
 1004b90:	f6a42e23          	sw	a0,-132(s0)
 1004b94:	fd81a703          	lw	a4,-40(gp) # 1006db0 <__stack_chk_guard>
 1004b98:	fee42623          	sw	a4,-20(s0)
 1004b9c:	00000713          	li	a4,0
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
 1004ba0:	f8042a23          	sw	zero,-108(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1004ba4:	f7c42783          	lw	a5,-132(s0)
 1004ba8:	0207c463          	bltz	a5,1004bd0 <_isatty+0x50>
 1004bac:	f7c42703          	lw	a4,-132(s0)
 1004bb0:	00070793          	mv	a5,a4
 1004bb4:	00179793          	sll	a5,a5,0x1
 1004bb8:	00e787b3          	add	a5,a5,a4
 1004bbc:	00279793          	sll	a5,a5,0x2
 1004bc0:	01006737          	lui	a4,0x1006
 1004bc4:	f2470713          	add	a4,a4,-220 # 1005f24 <alt_fd_list>
 1004bc8:	00e787b3          	add	a5,a5,a4
 1004bcc:	0080006f          	j	1004bd4 <_isatty+0x54>
 1004bd0:	00000793          	li	a5,0
 1004bd4:	f8f42623          	sw	a5,-116(s0)
  
  if (fd)
 1004bd8:	f8c42783          	lw	a5,-116(s0)
 1004bdc:	04078a63          	beqz	a5,1004c30 <_isatty+0xb0>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1004be0:	f8c42783          	lw	a5,-116(s0)
 1004be4:	0007a783          	lw	a5,0(a5)
 1004be8:	0207a783          	lw	a5,32(a5)
 1004bec:	00079663          	bnez	a5,1004bf8 <_isatty+0x78>
    {
      return 1;
 1004bf0:	00100793          	li	a5,1
 1004bf4:	0500006f          	j	1004c44 <_isatty+0xc4>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      if (fstat (file, &stat) < 0)
 1004bf8:	f9040793          	add	a5,s0,-112
 1004bfc:	00078593          	mv	a1,a5
 1004c00:	f7c42503          	lw	a0,-132(s0)
 1004c04:	27d000ef          	jal	1005680 <fstat>
 1004c08:	00050793          	mv	a5,a0
 1004c0c:	0007d663          	bgez	a5,1004c18 <_isatty+0x98>
        return 0;  // fstat will set ERRNO
 1004c10:	00000793          	li	a5,0
 1004c14:	0300006f          	j	1004c44 <_isatty+0xc4>
      else
        return (stat.st_mode == _IFCHR) ? 1 : 0;
 1004c18:	f9442703          	lw	a4,-108(s0)
 1004c1c:	ffffe7b7          	lui	a5,0xffffe
 1004c20:	00f707b3          	add	a5,a4,a5
 1004c24:	0017b793          	seqz	a5,a5
 1004c28:	0ff7f793          	zext.b	a5,a5
 1004c2c:	0180006f          	j	1004c44 <_isatty+0xc4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1004c30:	f11ff0ef          	jal	1004b40 <alt_get_errno>
 1004c34:	00050713          	mv	a4,a0
 1004c38:	05100793          	li	a5,81
 1004c3c:	00f72023          	sw	a5,0(a4)
    return 0;
 1004c40:	00000793          	li	a5,0
  }
}
 1004c44:	00078713          	mv	a4,a5
 1004c48:	fec42683          	lw	a3,-20(s0)
 1004c4c:	fd81a783          	lw	a5,-40(gp) # 1006db0 <__stack_chk_guard>
 1004c50:	00f6c7b3          	xor	a5,a3,a5
 1004c54:	00000693          	li	a3,0
 1004c58:	00078463          	beqz	a5,1004c60 <_isatty+0xe0>
 1004c5c:	235000ef          	jal	1005690 <__stack_chk_fail>
 1004c60:	00070513          	mv	a0,a4
 1004c64:	08c12083          	lw	ra,140(sp)
 1004c68:	08812403          	lw	s0,136(sp)
 1004c6c:	09010113          	add	sp,sp,144
 1004c70:	00008067          	ret

01004c74 <alt_get_errno>:
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  
 1004c74:	ff010113          	add	sp,sp,-16
 1004c78:	00112623          	sw	ra,12(sp)
 1004c7c:	00812423          	sw	s0,8(sp)
 1004c80:	01010413          	add	s0,sp,16
  if (fd) 
 1004c84:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1004c88:	00078a63          	beqz	a5,1004c9c <alt_get_errno+0x28>
 1004c8c:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1004c90:	000780e7          	jalr	a5 # ffffe000 <__alt_mem_onchip_memory2_0+0xfdfd6000>
 1004c94:	00050793          	mv	a5,a0
 1004c98:	0080006f          	j	1004ca0 <alt_get_errno+0x2c>
 1004c9c:	fa418793          	add	a5,gp,-92 # 1006d7c <errno>
  {
 1004ca0:	00078513          	mv	a0,a5
 1004ca4:	00c12083          	lw	ra,12(sp)
 1004ca8:	00812403          	lw	s0,8(sp)
 1004cac:	01010113          	add	sp,sp,16
 1004cb0:	00008067          	ret

01004cb4 <_lseek>:
{
 1004cb4:	fd010113          	add	sp,sp,-48
 1004cb8:	02112623          	sw	ra,44(sp)
 1004cbc:	02812423          	sw	s0,40(sp)
 1004cc0:	03010413          	add	s0,sp,48
 1004cc4:	fca42e23          	sw	a0,-36(s0)
 1004cc8:	fcb42c23          	sw	a1,-40(s0)
 1004ccc:	fcc42a23          	sw	a2,-44(s0)
  off_t   rc = 0; 
 1004cd0:	fe042423          	sw	zero,-24(s0)
  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1004cd4:	fdc42783          	lw	a5,-36(s0)
 1004cd8:	0207c463          	bltz	a5,1004d00 <_lseek+0x4c>
 1004cdc:	fdc42703          	lw	a4,-36(s0)
 1004ce0:	00070793          	mv	a5,a4
 1004ce4:	00179793          	sll	a5,a5,0x1
 1004ce8:	00e787b3          	add	a5,a5,a4
 1004cec:	00279793          	sll	a5,a5,0x2
 1004cf0:	01006737          	lui	a4,0x1006
 1004cf4:	f2470713          	add	a4,a4,-220 # 1005f24 <alt_fd_list>
 1004cf8:	00e787b3          	add	a5,a5,a4
 1004cfc:	0080006f          	j	1004d04 <_lseek+0x50>
 1004d00:	00000793          	li	a5,0
 1004d04:	fef42623          	sw	a5,-20(s0)
  if (fd) 
 1004d08:	fec42783          	lw	a5,-20(s0)
 1004d0c:	04078263          	beqz	a5,1004d50 <_lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1004d10:	fec42783          	lw	a5,-20(s0)
 1004d14:	0007a783          	lw	a5,0(a5)
 1004d18:	01c7a783          	lw	a5,28(a5)
 1004d1c:	02078463          	beqz	a5,1004d44 <_lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1004d20:	fec42783          	lw	a5,-20(s0)
 1004d24:	0007a783          	lw	a5,0(a5)
 1004d28:	01c7a783          	lw	a5,28(a5)
 1004d2c:	fd442603          	lw	a2,-44(s0)
 1004d30:	fd842583          	lw	a1,-40(s0)
 1004d34:	fec42503          	lw	a0,-20(s0)
 1004d38:	000780e7          	jalr	a5
 1004d3c:	fea42423          	sw	a0,-24(s0)
 1004d40:	0180006f          	j	1004d58 <_lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1004d44:	f7a00793          	li	a5,-134
 1004d48:	fef42423          	sw	a5,-24(s0)
 1004d4c:	00c0006f          	j	1004d58 <_lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 1004d50:	faf00793          	li	a5,-81
 1004d54:	fef42423          	sw	a5,-24(s0)
  }

  if (rc < 0)
 1004d58:	fe842783          	lw	a5,-24(s0)
 1004d5c:	0207d063          	bgez	a5,1004d7c <_lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 1004d60:	f15ff0ef          	jal	1004c74 <alt_get_errno>
 1004d64:	00050713          	mv	a4,a0
 1004d68:	fe842783          	lw	a5,-24(s0)
 1004d6c:	40f007b3          	neg	a5,a5
 1004d70:	00f72023          	sw	a5,0(a4)
    rc = -1;
 1004d74:	fff00793          	li	a5,-1
 1004d78:	fef42423          	sw	a5,-24(s0)
  }

  return rc;
 1004d7c:	fe842783          	lw	a5,-24(s0)
}
 1004d80:	00078513          	mv	a0,a5
 1004d84:	02c12083          	lw	ra,44(sp)
 1004d88:	02812403          	lw	s0,40(sp)
 1004d8c:	03010113          	add	sp,sp,48
 1004d90:	00008067          	ret

01004d94 <alt_get_errno>:
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1004d94:	ff010113          	add	sp,sp,-16
 1004d98:	00112623          	sw	ra,12(sp)
 1004d9c:	00812423          	sw	s0,8(sp)
 1004da0:	01010413          	add	s0,sp,16
        (&alt_fd_list[i] != fd))
 1004da4:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1004da8:	00078a63          	beqz	a5,1004dbc <alt_get_errno+0x28>
 1004dac:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1004db0:	000780e7          	jalr	a5
 1004db4:	00050793          	mv	a5,a0
 1004db8:	0080006f          	j	1004dc0 <alt_get_errno+0x2c>
 1004dbc:	fa418793          	add	a5,gp,-92 # 1006d7c <errno>
    {
 1004dc0:	00078513          	mv	a0,a5
 1004dc4:	00c12083          	lw	ra,12(sp)
 1004dc8:	00812403          	lw	s0,8(sp)
 1004dcc:	01010113          	add	sp,sp,16
 1004dd0:	00008067          	ret

01004dd4 <alt_file_locked>:
{
 1004dd4:	fd010113          	add	sp,sp,-48
 1004dd8:	02812623          	sw	s0,44(sp)
 1004ddc:	03010413          	add	s0,sp,48
 1004de0:	fca42e23          	sw	a0,-36(s0)
  fd->fd_flags |= ALT_FD_DEV;
 1004de4:	fdc42783          	lw	a5,-36(s0)
 1004de8:	0087a703          	lw	a4,8(a5)
 1004dec:	400007b7          	lui	a5,0x40000
 1004df0:	00f76733          	or	a4,a4,a5
 1004df4:	fdc42783          	lw	a5,-36(s0)
 1004df8:	00e7a423          	sw	a4,8(a5) # 40000008 <__alt_mem_onchip_memory2_0+0x3dfd8008>
  for (i = 0; i <= alt_max_fd; i++)
 1004dfc:	fe042623          	sw	zero,-20(s0)
 1004e00:	0980006f          	j	1004e98 <alt_file_locked+0xc4>
    if ((alt_fd_list[i].dev == fd->dev) &&
 1004e04:	010067b7          	lui	a5,0x1006
 1004e08:	f2478693          	add	a3,a5,-220 # 1005f24 <alt_fd_list>
 1004e0c:	fec42703          	lw	a4,-20(s0)
 1004e10:	00070793          	mv	a5,a4
 1004e14:	00179793          	sll	a5,a5,0x1
 1004e18:	00e787b3          	add	a5,a5,a4
 1004e1c:	00279793          	sll	a5,a5,0x2
 1004e20:	00f687b3          	add	a5,a3,a5
 1004e24:	0007a703          	lw	a4,0(a5)
 1004e28:	fdc42783          	lw	a5,-36(s0)
 1004e2c:	0007a783          	lw	a5,0(a5)
 1004e30:	04f71e63          	bne	a4,a5,1004e8c <alt_file_locked+0xb8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1004e34:	010067b7          	lui	a5,0x1006
 1004e38:	f2478693          	add	a3,a5,-220 # 1005f24 <alt_fd_list>
 1004e3c:	fec42703          	lw	a4,-20(s0)
 1004e40:	00070793          	mv	a5,a4
 1004e44:	00179793          	sll	a5,a5,0x1
 1004e48:	00e787b3          	add	a5,a5,a4
 1004e4c:	00279793          	sll	a5,a5,0x2
 1004e50:	00f687b3          	add	a5,a3,a5
 1004e54:	0087a783          	lw	a5,8(a5)
    if ((alt_fd_list[i].dev == fd->dev) &&
 1004e58:	0207da63          	bgez	a5,1004e8c <alt_file_locked+0xb8>
        (&alt_fd_list[i] != fd))
 1004e5c:	fec42703          	lw	a4,-20(s0)
 1004e60:	00070793          	mv	a5,a4
 1004e64:	00179793          	sll	a5,a5,0x1
 1004e68:	00e787b3          	add	a5,a5,a4
 1004e6c:	00279793          	sll	a5,a5,0x2
 1004e70:	01006737          	lui	a4,0x1006
 1004e74:	f2470713          	add	a4,a4,-220 # 1005f24 <alt_fd_list>
 1004e78:	00e787b3          	add	a5,a5,a4
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1004e7c:	fdc42703          	lw	a4,-36(s0)
 1004e80:	00f70663          	beq	a4,a5,1004e8c <alt_file_locked+0xb8>
      return -EACCES;
 1004e84:	ff300793          	li	a5,-13
 1004e88:	0240006f          	j	1004eac <alt_file_locked+0xd8>
  for (i = 0; i <= alt_max_fd; i++)
 1004e8c:	fec42783          	lw	a5,-20(s0)
 1004e90:	00178793          	add	a5,a5,1
 1004e94:	fef42623          	sw	a5,-20(s0)
 1004e98:	8101a783          	lw	a5,-2032(gp) # 10065e8 <alt_max_fd>
 1004e9c:	00078713          	mv	a4,a5
 1004ea0:	fec42783          	lw	a5,-20(s0)
 1004ea4:	f6f770e3          	bgeu	a4,a5,1004e04 <alt_file_locked+0x30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1004ea8:	00000793          	li	a5,0
}
 1004eac:	00078513          	mv	a0,a5
 1004eb0:	02c12403          	lw	s0,44(sp)
 1004eb4:	03010113          	add	sp,sp,48
 1004eb8:	00008067          	ret

01004ebc <_open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1004ebc:	fc010113          	add	sp,sp,-64
 1004ec0:	02112e23          	sw	ra,60(sp)
 1004ec4:	02812c23          	sw	s0,56(sp)
 1004ec8:	04010413          	add	s0,sp,64
 1004ecc:	fca42623          	sw	a0,-52(s0)
 1004ed0:	fcb42423          	sw	a1,-56(s0)
 1004ed4:	fcc42223          	sw	a2,-60(s0)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1004ed8:	fff00793          	li	a5,-1
 1004edc:	fef42023          	sw	a5,-32(s0)
  int status = -ENODEV;
 1004ee0:	fed00793          	li	a5,-19
 1004ee4:	fef42223          	sw	a5,-28(s0)
  int isafs = 0;
 1004ee8:	fe042423          	sw	zero,-24(s0)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1004eec:	010067b7          	lui	a5,0x1006
 1004ef0:	5e078593          	add	a1,a5,1504 # 10065e0 <alt_dev_list>
 1004ef4:	fcc42503          	lw	a0,-52(s0)
 1004ef8:	46c000ef          	jal	1005364 <alt_find_dev>
 1004efc:	fca42e23          	sw	a0,-36(s0)
 1004f00:	fdc42783          	lw	a5,-36(s0)
 1004f04:	00079c63          	bnez	a5,1004f1c <_open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1004f08:	fcc42503          	lw	a0,-52(s0)
 1004f0c:	578000ef          	jal	1005484 <alt_find_file>
 1004f10:	fca42e23          	sw	a0,-36(s0)
    isafs = 1;
 1004f14:	00100793          	li	a5,1
 1004f18:	fef42423          	sw	a5,-24(s0)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1004f1c:	fdc42783          	lw	a5,-36(s0)
 1004f20:	0a078c63          	beqz	a5,1004fd8 <_open+0x11c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1004f24:	fdc42503          	lw	a0,-36(s0)
 1004f28:	698000ef          	jal	10055c0 <alt_get_fd>
 1004f2c:	fea42023          	sw	a0,-32(s0)
 1004f30:	fe042783          	lw	a5,-32(s0)
 1004f34:	0007d863          	bgez	a5,1004f44 <_open+0x88>
    {
      status = index;
 1004f38:	fe042783          	lw	a5,-32(s0)
 1004f3c:	fef42223          	sw	a5,-28(s0)
 1004f40:	0a00006f          	j	1004fe0 <_open+0x124>
    }
    else
    {
      fd = &alt_fd_list[index];
 1004f44:	fe042703          	lw	a4,-32(s0)
 1004f48:	00070793          	mv	a5,a4
 1004f4c:	00179793          	sll	a5,a5,0x1
 1004f50:	00e787b3          	add	a5,a5,a4
 1004f54:	00279793          	sll	a5,a5,0x2
 1004f58:	01006737          	lui	a4,0x1006
 1004f5c:	f2470713          	add	a4,a4,-220 # 1005f24 <alt_fd_list>
 1004f60:	00e787b3          	add	a5,a5,a4
 1004f64:	fef42623          	sw	a5,-20(s0)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1004f68:	fc842703          	lw	a4,-56(s0)
 1004f6c:	400007b7          	lui	a5,0x40000
 1004f70:	fff78793          	add	a5,a5,-1 # 3fffffff <__alt_mem_onchip_memory2_0+0x3dfd7fff>
 1004f74:	00f77733          	and	a4,a4,a5
 1004f78:	fec42783          	lw	a5,-20(s0)
 1004f7c:	00e7a423          	sw	a4,8(a5)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1004f80:	fe842783          	lw	a5,-24(s0)
 1004f84:	00079c63          	bnez	a5,1004f9c <_open+0xe0>
 1004f88:	fec42503          	lw	a0,-20(s0)
 1004f8c:	e49ff0ef          	jal	1004dd4 <alt_file_locked>
 1004f90:	fea42223          	sw	a0,-28(s0)
 1004f94:	fe442783          	lw	a5,-28(s0)
 1004f98:	0407c463          	bltz	a5,1004fe0 <_open+0x124>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1004f9c:	fdc42783          	lw	a5,-36(s0)
 1004fa0:	00c7a783          	lw	a5,12(a5)
 1004fa4:	02078463          	beqz	a5,1004fcc <_open+0x110>
 1004fa8:	fdc42783          	lw	a5,-36(s0)
 1004fac:	00c7a783          	lw	a5,12(a5)
 1004fb0:	fc442683          	lw	a3,-60(s0)
 1004fb4:	fc842603          	lw	a2,-56(s0)
 1004fb8:	fcc42583          	lw	a1,-52(s0)
 1004fbc:	fec42503          	lw	a0,-20(s0)
 1004fc0:	000780e7          	jalr	a5
 1004fc4:	00050793          	mv	a5,a0
 1004fc8:	0080006f          	j	1004fd0 <_open+0x114>
 1004fcc:	00000793          	li	a5,0
 1004fd0:	fef42223          	sw	a5,-28(s0)
 1004fd4:	00c0006f          	j	1004fe0 <_open+0x124>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1004fd8:	fed00793          	li	a5,-19
 1004fdc:	fef42223          	sw	a5,-28(s0)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1004fe0:	fe442783          	lw	a5,-28(s0)
 1004fe4:	0207d463          	bgez	a5,100500c <_open+0x150>
  {
    alt_release_fd (index);  
 1004fe8:	fe042503          	lw	a0,-32(s0)
 1004fec:	c75fb0ef          	jal	1000c60 <alt_release_fd>
    ALT_ERRNO = -status;
 1004ff0:	da5ff0ef          	jal	1004d94 <alt_get_errno>
 1004ff4:	00050713          	mv	a4,a0
 1004ff8:	fe442783          	lw	a5,-28(s0)
 1004ffc:	40f007b3          	neg	a5,a5
 1005000:	00f72023          	sw	a5,0(a4)
    return -1;
 1005004:	fff00793          	li	a5,-1
 1005008:	0080006f          	j	1005010 <_open+0x154>
  }
  
  /* return the reference upon success */

  return index;
 100500c:	fe042783          	lw	a5,-32(s0)
}
 1005010:	00078513          	mv	a0,a5
 1005014:	03c12083          	lw	ra,60(sp)
 1005018:	03812403          	lw	s0,56(sp)
 100501c:	04010113          	add	sp,sp,64
 1005020:	00008067          	ret

01005024 <alt_get_errno>:
    }
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
 1005024:	ff010113          	add	sp,sp,-16
 1005028:	00112623          	sw	ra,12(sp)
 100502c:	00812423          	sw	s0,8(sp)
 1005030:	01010413          	add	s0,sp,16
{
 1005034:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1005038:	00078a63          	beqz	a5,100504c <alt_get_errno+0x28>
 100503c:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1005040:	000780e7          	jalr	a5
 1005044:	00050793          	mv	a5,a0
 1005048:	0080006f          	j	1005050 <alt_get_errno+0x2c>
 100504c:	fa418793          	add	a5,gp,-92 # 1006d7c <errno>
  alt_fd*  fd;
 1005050:	00078513          	mv	a0,a5
 1005054:	00c12083          	lw	ra,12(sp)
 1005058:	00812403          	lw	s0,8(sp)
 100505c:	01010113          	add	sp,sp,16
 1005060:	00008067          	ret

01005064 <_read>:
{
 1005064:	fd010113          	add	sp,sp,-48
 1005068:	02112623          	sw	ra,44(sp)
 100506c:	02812423          	sw	s0,40(sp)
 1005070:	03010413          	add	s0,sp,48
 1005074:	fca42e23          	sw	a0,-36(s0)
 1005078:	fcb42c23          	sw	a1,-40(s0)
 100507c:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1005080:	fdc42783          	lw	a5,-36(s0)
 1005084:	0207c463          	bltz	a5,10050ac <_read+0x48>
 1005088:	fdc42703          	lw	a4,-36(s0)
 100508c:	00070793          	mv	a5,a4
 1005090:	00179793          	sll	a5,a5,0x1
 1005094:	00e787b3          	add	a5,a5,a4
 1005098:	00279793          	sll	a5,a5,0x2
 100509c:	01006737          	lui	a4,0x1006
 10050a0:	f2470713          	add	a4,a4,-220 # 1005f24 <alt_fd_list>
 10050a4:	00e787b3          	add	a5,a5,a4
 10050a8:	0080006f          	j	10050b0 <_read+0x4c>
 10050ac:	00000793          	li	a5,0
 10050b0:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
 10050b4:	fe842783          	lw	a5,-24(s0)
 10050b8:	08078663          	beqz	a5,1005144 <_read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 10050bc:	fe842783          	lw	a5,-24(s0)
 10050c0:	0087a783          	lw	a5,8(a5)
 10050c4:	0037f713          	and	a4,a5,3
 10050c8:	00100793          	li	a5,1
 10050cc:	06f70263          	beq	a4,a5,1005130 <_read+0xcc>
        (fd->dev->read))
 10050d0:	fe842783          	lw	a5,-24(s0)
 10050d4:	0007a783          	lw	a5,0(a5)
 10050d8:	0147a783          	lw	a5,20(a5)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 10050dc:	04078a63          	beqz	a5,1005130 <_read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 10050e0:	fe842783          	lw	a5,-24(s0)
 10050e4:	0007a783          	lw	a5,0(a5)
 10050e8:	0147a783          	lw	a5,20(a5)
 10050ec:	fd442703          	lw	a4,-44(s0)
 10050f0:	00070613          	mv	a2,a4
 10050f4:	fd842583          	lw	a1,-40(s0)
 10050f8:	fe842503          	lw	a0,-24(s0)
 10050fc:	000780e7          	jalr	a5
 1005100:	fea42623          	sw	a0,-20(s0)
 1005104:	fec42783          	lw	a5,-20(s0)
 1005108:	0207d063          	bgez	a5,1005128 <_read+0xc4>
        {
          ALT_ERRNO = -rval;
 100510c:	f19ff0ef          	jal	1005024 <alt_get_errno>
 1005110:	00050713          	mv	a4,a0
 1005114:	fec42783          	lw	a5,-20(s0)
 1005118:	40f007b3          	neg	a5,a5
 100511c:	00f72023          	sw	a5,0(a4)
          return -1;
 1005120:	fff00793          	li	a5,-1
 1005124:	0340006f          	j	1005158 <_read+0xf4>
        }
        return rval;
 1005128:	fec42783          	lw	a5,-20(s0)
 100512c:	02c0006f          	j	1005158 <_read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1005130:	ef5ff0ef          	jal	1005024 <alt_get_errno>
 1005134:	00050713          	mv	a4,a0
 1005138:	00d00793          	li	a5,13
 100513c:	00f72023          	sw	a5,0(a4)
 1005140:	0140006f          	j	1005154 <_read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1005144:	ee1ff0ef          	jal	1005024 <alt_get_errno>
 1005148:	00050713          	mv	a4,a0
 100514c:	05100793          	li	a5,81
 1005150:	00f72023          	sw	a5,0(a4)
  }
  return -1;
 1005154:	fff00793          	li	a5,-1
}
 1005158:	00078513          	mv	a0,a5
 100515c:	02c12083          	lw	ra,44(sp)
 1005160:	02812403          	lw	s0,40(sp)
 1005164:	03010113          	add	sp,sp,48
 1005168:	00008067          	ret

0100516c <_sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100516c:	fc010113          	add	sp,sp,-64
 1005170:	02812e23          	sw	s0,60(sp)
 1005174:	04010413          	add	s0,sp,64
 1005178:	fca42623          	sw	a0,-52(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 100517c:	00800793          	li	a5,8
 1005180:	3007b7f3          	csrrc	a5,mstatus,a5
 1005184:	fef42223          	sw	a5,-28(s0)
    return context;
 1005188:	fe442783          	lw	a5,-28(s0)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100518c:	fcf42e23          	sw	a5,-36(s0)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1005190:	8301a783          	lw	a5,-2000(gp) # 1006608 <heap_end>
 1005194:	00378793          	add	a5,a5,3
 1005198:	ffc7f793          	and	a5,a5,-4
 100519c:	00078713          	mv	a4,a5
 10051a0:	82e1a823          	sw	a4,-2000(gp) # 1006608 <heap_end>
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 10051a4:	8301a703          	lw	a4,-2000(gp) # 1006608 <heap_end>
 10051a8:	fcc42783          	lw	a5,-52(s0)
 10051ac:	00f70733          	add	a4,a4,a5
 10051b0:	020007b7          	lui	a5,0x2000
 10051b4:	00078793          	mv	a5,a5
 10051b8:	02e7f263          	bgeu	a5,a4,10051dc <_sbrk+0x70>
 10051bc:	fdc42783          	lw	a5,-36(s0)
 10051c0:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 10051c4:	fe842783          	lw	a5,-24(s0)
 10051c8:	0087f793          	and	a5,a5,8
 10051cc:	3007a073          	csrs	mstatus,a5
}
 10051d0:	00000013          	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 10051d4:	fff00793          	li	a5,-1
 10051d8:	0380006f          	j	1005210 <_sbrk+0xa4>
  }
#endif

  prev_heap_end = heap_end; 
 10051dc:	8301a783          	lw	a5,-2000(gp) # 1006608 <heap_end>
 10051e0:	fef42023          	sw	a5,-32(s0)
  heap_end += incr; 
 10051e4:	8301a703          	lw	a4,-2000(gp) # 1006608 <heap_end>
 10051e8:	fcc42783          	lw	a5,-52(s0)
 10051ec:	00f70733          	add	a4,a4,a5
 10051f0:	82e1a823          	sw	a4,-2000(gp) # 1006608 <heap_end>
 10051f4:	fdc42783          	lw	a5,-36(s0)
 10051f8:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 10051fc:	fec42783          	lw	a5,-20(s0)
 1005200:	0087f793          	and	a5,a5,8
 1005204:	3007a073          	csrs	mstatus,a5
}
 1005208:	00000013          	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100520c:	fe042783          	lw	a5,-32(s0)
}
 1005210:	00078513          	mv	a0,a5
 1005214:	03c12403          	lw	s0,60(sp)
 1005218:	04010113          	add	sp,sp,64
 100521c:	00008067          	ret

01005220 <alt_get_errno>:
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 1005220:	ff010113          	add	sp,sp,-16
 1005224:	00112623          	sw	ra,12(sp)
 1005228:	00812423          	sw	s0,8(sp)
 100522c:	01010413          	add	s0,sp,16
#endif /* ALT_STDERR_PRESENT */
 1005230:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1005234:	00078a63          	beqz	a5,1005248 <alt_get_errno+0x28>
 1005238:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 100523c:	000780e7          	jalr	a5 # 2000000 <__alt_data_end>
 1005240:	00050793          	mv	a5,a0
 1005244:	0080006f          	j	100524c <alt_get_errno+0x2c>
 1005248:	fa418793          	add	a5,gp,-92 # 1006d7c <errno>
    default:
 100524c:	00078513          	mv	a0,a5
 1005250:	00c12083          	lw	ra,12(sp)
 1005254:	00812403          	lw	s0,8(sp)
 1005258:	01010113          	add	sp,sp,16
 100525c:	00008067          	ret

01005260 <_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1005260:	fd010113          	add	sp,sp,-48
 1005264:	02112623          	sw	ra,44(sp)
 1005268:	02812423          	sw	s0,40(sp)
 100526c:	03010413          	add	s0,sp,48
 1005270:	fca42e23          	sw	a0,-36(s0)
 1005274:	fcb42c23          	sw	a1,-40(s0)
 1005278:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100527c:	fdc42783          	lw	a5,-36(s0)
 1005280:	0207c463          	bltz	a5,10052a8 <_write+0x48>
 1005284:	fdc42703          	lw	a4,-36(s0)
 1005288:	00070793          	mv	a5,a4
 100528c:	00179793          	sll	a5,a5,0x1
 1005290:	00e787b3          	add	a5,a5,a4
 1005294:	00279793          	sll	a5,a5,0x2
 1005298:	01006737          	lui	a4,0x1006
 100529c:	f2470713          	add	a4,a4,-220 # 1005f24 <alt_fd_list>
 10052a0:	00e787b3          	add	a5,a5,a4
 10052a4:	0080006f          	j	10052ac <_write+0x4c>
 10052a8:	00000793          	li	a5,0
 10052ac:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
 10052b0:	fe842783          	lw	a5,-24(s0)
 10052b4:	08078463          	beqz	a5,100533c <_write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 10052b8:	fe842783          	lw	a5,-24(s0)
 10052bc:	0087a783          	lw	a5,8(a5)
 10052c0:	0037f793          	and	a5,a5,3
 10052c4:	06078263          	beqz	a5,1005328 <_write+0xc8>
 10052c8:	fe842783          	lw	a5,-24(s0)
 10052cc:	0007a783          	lw	a5,0(a5)
 10052d0:	0187a783          	lw	a5,24(a5)
 10052d4:	04078a63          	beqz	a5,1005328 <_write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 10052d8:	fe842783          	lw	a5,-24(s0)
 10052dc:	0007a783          	lw	a5,0(a5)
 10052e0:	0187a783          	lw	a5,24(a5)
 10052e4:	fd442703          	lw	a4,-44(s0)
 10052e8:	00070613          	mv	a2,a4
 10052ec:	fd842583          	lw	a1,-40(s0)
 10052f0:	fe842503          	lw	a0,-24(s0)
 10052f4:	000780e7          	jalr	a5
 10052f8:	fea42623          	sw	a0,-20(s0)
 10052fc:	fec42783          	lw	a5,-20(s0)
 1005300:	0207d063          	bgez	a5,1005320 <_write+0xc0>
      {
        ALT_ERRNO = -rval;
 1005304:	f1dff0ef          	jal	1005220 <alt_get_errno>
 1005308:	00050713          	mv	a4,a0
 100530c:	fec42783          	lw	a5,-20(s0)
 1005310:	40f007b3          	neg	a5,a5
 1005314:	00f72023          	sw	a5,0(a4)
        return -1;
 1005318:	fff00793          	li	a5,-1
 100531c:	0340006f          	j	1005350 <_write+0xf0>
      }
      return rval;
 1005320:	fec42783          	lw	a5,-20(s0)
 1005324:	02c0006f          	j	1005350 <_write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1005328:	ef9ff0ef          	jal	1005220 <alt_get_errno>
 100532c:	00050713          	mv	a4,a0
 1005330:	00d00793          	li	a5,13
 1005334:	00f72023          	sw	a5,0(a4)
 1005338:	0140006f          	j	100534c <_write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100533c:	ee5ff0ef          	jal	1005220 <alt_get_errno>
 1005340:	00050713          	mv	a4,a0
 1005344:	05100793          	li	a5,81
 1005348:	00f72023          	sw	a5,0(a4)
  }
  return -1;
 100534c:	fff00793          	li	a5,-1
}
 1005350:	00078513          	mv	a0,a5
 1005354:	02c12083          	lw	ra,44(sp)
 1005358:	02812403          	lw	s0,40(sp)
 100535c:	03010113          	add	sp,sp,48
 1005360:	00008067          	ret

01005364 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1005364:	fd010113          	add	sp,sp,-48
 1005368:	02812623          	sw	s0,44(sp)
 100536c:	03010413          	add	s0,sp,48
 1005370:	fca42e23          	sw	a0,-36(s0)
 1005374:	fcb42c23          	sw	a1,-40(s0)
    alt_dev* next=NULL; 
 1005378:	fe042223          	sw	zero,-28(s0)
    alt_32   len=0;
 100537c:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
 1005380:	3e800793          	li	a5,1000
 1005384:	fef42623          	sw	a5,-20(s0)
    
    if (llist == NULL) { return NULL; }
 1005388:	fd842783          	lw	a5,-40(s0)
 100538c:	00079663          	bnez	a5,1005398 <alt_find_dev+0x34>
 1005390:	00000793          	li	a5,0
 1005394:	0e00006f          	j	1005474 <alt_find_dev+0x110>
    next = (alt_dev*) llist->next;
 1005398:	fd842783          	lw	a5,-40(s0)
 100539c:	0007a783          	lw	a5,0(a5)
 10053a0:	fef42223          	sw	a5,-28(s0)
    /*
     * Check each list entry in turn, until a match is found, or we reach the
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
 10053a4:	0c00006f          	j	1005464 <alt_find_dev+0x100>
    {
        len=0;
 10053a8:	fe042423          	sw	zero,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
 10053ac:	0380006f          	j	10053e4 <alt_find_dev+0x80>
        {
            if (next->name[len] != name[len]) { break; }
 10053b0:	fe442783          	lw	a5,-28(s0)
 10053b4:	0087a703          	lw	a4,8(a5)
 10053b8:	fe842783          	lw	a5,-24(s0)
 10053bc:	00f707b3          	add	a5,a4,a5
 10053c0:	0007c703          	lbu	a4,0(a5)
 10053c4:	fe842783          	lw	a5,-24(s0)
 10053c8:	fdc42683          	lw	a3,-36(s0)
 10053cc:	00f687b3          	add	a5,a3,a5
 10053d0:	0007c783          	lbu	a5,0(a5)
 10053d4:	04f71663          	bne	a4,a5,1005420 <alt_find_dev+0xbc>
            len++;
 10053d8:	fe842783          	lw	a5,-24(s0)
 10053dc:	00178793          	add	a5,a5,1
 10053e0:	fef42423          	sw	a5,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
 10053e4:	fe842783          	lw	a5,-24(s0)
 10053e8:	fdc42703          	lw	a4,-36(s0)
 10053ec:	00f707b3          	add	a5,a4,a5
 10053f0:	0007c783          	lbu	a5,0(a5)
 10053f4:	02078863          	beqz	a5,1005424 <alt_find_dev+0xc0>
 10053f8:	fe442783          	lw	a5,-28(s0)
 10053fc:	0087a703          	lw	a4,8(a5)
 1005400:	fe842783          	lw	a5,-24(s0)
 1005404:	00f707b3          	add	a5,a4,a5
 1005408:	0007c783          	lbu	a5,0(a5)
 100540c:	00078c63          	beqz	a5,1005424 <alt_find_dev+0xc0>
 1005410:	fe842703          	lw	a4,-24(s0)
 1005414:	fec42783          	lw	a5,-20(s0)
 1005418:	f8f74ce3          	blt	a4,a5,10053b0 <alt_find_dev+0x4c>
 100541c:	0080006f          	j	1005424 <alt_find_dev+0xc0>
            if (next->name[len] != name[len]) { break; }
 1005420:	00000013          	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
 1005424:	fe842783          	lw	a5,-24(s0)
 1005428:	fdc42703          	lw	a4,-36(s0)
 100542c:	00f707b3          	add	a5,a4,a5
 1005430:	0007c783          	lbu	a5,0(a5)
 1005434:	02079263          	bnez	a5,1005458 <alt_find_dev+0xf4>
 1005438:	fe442783          	lw	a5,-28(s0)
 100543c:	0087a703          	lw	a4,8(a5)
 1005440:	fe842783          	lw	a5,-24(s0)
 1005444:	00f707b3          	add	a5,a4,a5
 1005448:	0007c783          	lbu	a5,0(a5)
 100544c:	00079663          	bnez	a5,1005458 <alt_find_dev+0xf4>
 1005450:	fe442783          	lw	a5,-28(s0)
 1005454:	0200006f          	j	1005474 <alt_find_dev+0x110>

        next = (alt_dev*) next->llist.next;
 1005458:	fe442783          	lw	a5,-28(s0)
 100545c:	0007a783          	lw	a5,0(a5)
 1005460:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) llist)
 1005464:	fe442703          	lw	a4,-28(s0)
 1005468:	fd842783          	lw	a5,-40(s0)
 100546c:	f2f71ee3          	bne	a4,a5,10053a8 <alt_find_dev+0x44>
    }
  
    /* No match found */
  
    return NULL;
 1005470:	00000793          	li	a5,0
}
 1005474:	00078513          	mv	a0,a5
 1005478:	02c12403          	lw	s0,44(sp)
 100547c:	03010113          	add	sp,sp,48
 1005480:	00008067          	ret

01005484 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1005484:	fd010113          	add	sp,sp,-48
 1005488:	02812623          	sw	s0,44(sp)
 100548c:	03010413          	add	s0,sp,48
 1005490:	fca42e23          	sw	a0,-36(s0)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1005494:	010067b7          	lui	a5,0x1006
 1005498:	5d878793          	add	a5,a5,1496 # 10065d8 <alt_fs_list>
 100549c:	0007a783          	lw	a5,0(a5)
 10054a0:	fef42223          	sw	a5,-28(s0)
    alt_32   len=0;
 10054a4:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
 10054a8:	3e800793          	li	a5,1000
 10054ac:	fef42623          	sw	a5,-20(s0)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
 10054b0:	0ec0006f          	j	100559c <alt_find_file+0x118>
    {
        len=0;
 10054b4:	fe042423          	sw	zero,-24(s0)
        while (len < MAX_STRING_LENGTH)    
 10054b8:	0bc0006f          	j	1005574 <alt_find_file+0xf0>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
 10054bc:	fe442783          	lw	a5,-28(s0)
 10054c0:	0087a703          	lw	a4,8(a5)
 10054c4:	fe842783          	lw	a5,-24(s0)
 10054c8:	00f707b3          	add	a5,a4,a5
 10054cc:	0007c703          	lbu	a4,0(a5)
 10054d0:	02f00793          	li	a5,47
 10054d4:	02f71063          	bne	a4,a5,10054f4 <alt_find_file+0x70>
 10054d8:	fe442783          	lw	a5,-28(s0)
 10054dc:	0087a703          	lw	a4,8(a5)
 10054e0:	fe842783          	lw	a5,-24(s0)
 10054e4:	00178793          	add	a5,a5,1
 10054e8:	00f707b3          	add	a5,a4,a5
 10054ec:	0007c783          	lbu	a5,0(a5)
 10054f0:	00078e63          	beqz	a5,100550c <alt_find_file+0x88>
 10054f4:	fe442783          	lw	a5,-28(s0)
 10054f8:	0087a703          	lw	a4,8(a5)
 10054fc:	fe842783          	lw	a5,-24(s0)
 1005500:	00f707b3          	add	a5,a4,a5
 1005504:	0007c783          	lbu	a5,0(a5)
 1005508:	02079c63          	bnez	a5,1005540 <alt_find_file+0xbc>
            { 
                if ((name[len]== '/') || (name[len] == 0))
 100550c:	fe842783          	lw	a5,-24(s0)
 1005510:	fdc42703          	lw	a4,-36(s0)
 1005514:	00f707b3          	add	a5,a4,a5
 1005518:	0007c703          	lbu	a4,0(a5)
 100551c:	02f00793          	li	a5,47
 1005520:	00f70c63          	beq	a4,a5,1005538 <alt_find_file+0xb4>
 1005524:	fe842783          	lw	a5,-24(s0)
 1005528:	fdc42703          	lw	a4,-36(s0)
 100552c:	00f707b3          	add	a5,a4,a5
 1005530:	0007c783          	lbu	a5,0(a5)
 1005534:	04079863          	bnez	a5,1005584 <alt_find_file+0x100>
                {
                    return next;
 1005538:	fe442783          	lw	a5,-28(s0)
 100553c:	0740006f          	j	10055b0 <alt_find_file+0x12c>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
 1005540:	fe442783          	lw	a5,-28(s0)
 1005544:	0087a703          	lw	a4,8(a5)
 1005548:	fe842783          	lw	a5,-24(s0)
 100554c:	00f707b3          	add	a5,a4,a5
 1005550:	0007c703          	lbu	a4,0(a5)
 1005554:	fe842783          	lw	a5,-24(s0)
 1005558:	fdc42683          	lw	a3,-36(s0)
 100555c:	00f687b3          	add	a5,a3,a5
 1005560:	0007c783          	lbu	a5,0(a5)
 1005564:	02f71463          	bne	a4,a5,100558c <alt_find_file+0x108>
            len++;
 1005568:	fe842783          	lw	a5,-24(s0)
 100556c:	00178793          	add	a5,a5,1
 1005570:	fef42423          	sw	a5,-24(s0)
        while (len < MAX_STRING_LENGTH)    
 1005574:	fe842703          	lw	a4,-24(s0)
 1005578:	fec42783          	lw	a5,-20(s0)
 100557c:	f4f740e3          	blt	a4,a5,10054bc <alt_find_file+0x38>
 1005580:	0100006f          	j	1005590 <alt_find_file+0x10c>
                break;
 1005584:	00000013          	nop
 1005588:	0080006f          	j	1005590 <alt_find_file+0x10c>
            if (next->name[len]!=name[len]) { break; }
 100558c:	00000013          	nop
        }  
        
        next = (alt_dev*) next->llist.next;
 1005590:	fe442783          	lw	a5,-28(s0)
 1005594:	0007a783          	lw	a5,0(a5)
 1005598:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) &alt_fs_list)
 100559c:	fe442703          	lw	a4,-28(s0)
 10055a0:	010067b7          	lui	a5,0x1006
 10055a4:	5d878793          	add	a5,a5,1496 # 10065d8 <alt_fs_list>
 10055a8:	f0f716e3          	bne	a4,a5,10054b4 <alt_find_file+0x30>
    }
  
    /* No match found */
  
    return NULL;     
 10055ac:	00000793          	li	a5,0
}
 10055b0:	00078513          	mv	a0,a5
 10055b4:	02c12403          	lw	s0,44(sp)
 10055b8:	03010113          	add	sp,sp,48
 10055bc:	00008067          	ret

010055c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 10055c0:	fd010113          	add	sp,sp,-48
 10055c4:	02812623          	sw	s0,44(sp)
 10055c8:	03010413          	add	s0,sp,48
 10055cc:	fca42e23          	sw	a0,-36(s0)
  alt_32 i;
  int rc = -EMFILE;
 10055d0:	fe800793          	li	a5,-24
 10055d4:	fef42623          	sw	a5,-20(s0)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10055d8:	fe042423          	sw	zero,-24(s0)
 10055dc:	0800006f          	j	100565c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 10055e0:	010067b7          	lui	a5,0x1006
 10055e4:	f2478693          	add	a3,a5,-220 # 1005f24 <alt_fd_list>
 10055e8:	fe842703          	lw	a4,-24(s0)
 10055ec:	00070793          	mv	a5,a4
 10055f0:	00179793          	sll	a5,a5,0x1
 10055f4:	00e787b3          	add	a5,a5,a4
 10055f8:	00279793          	sll	a5,a5,0x2
 10055fc:	00f687b3          	add	a5,a3,a5
 1005600:	0007a783          	lw	a5,0(a5)
 1005604:	04079663          	bnez	a5,1005650 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 1005608:	010067b7          	lui	a5,0x1006
 100560c:	f2478693          	add	a3,a5,-220 # 1005f24 <alt_fd_list>
 1005610:	fe842703          	lw	a4,-24(s0)
 1005614:	00070793          	mv	a5,a4
 1005618:	00179793          	sll	a5,a5,0x1
 100561c:	00e787b3          	add	a5,a5,a4
 1005620:	00279793          	sll	a5,a5,0x2
 1005624:	00f687b3          	add	a5,a3,a5
 1005628:	fdc42703          	lw	a4,-36(s0)
 100562c:	00e7a023          	sw	a4,0(a5)
      if (i > alt_max_fd)
 1005630:	8101a783          	lw	a5,-2032(gp) # 10065e8 <alt_max_fd>
 1005634:	fe842703          	lw	a4,-24(s0)
 1005638:	00e7d663          	bge	a5,a4,1005644 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 100563c:	fe842703          	lw	a4,-24(s0)
 1005640:	80e1a823          	sw	a4,-2032(gp) # 10065e8 <alt_max_fd>
      }
      rc = i;
 1005644:	fe842783          	lw	a5,-24(s0)
 1005648:	fef42623          	sw	a5,-20(s0)
      goto alt_get_fd_exit;
 100564c:	0200006f          	j	100566c <alt_get_fd+0xac>
  for (i = 0; i < ALT_MAX_FD; i++)
 1005650:	fe842783          	lw	a5,-24(s0)
 1005654:	00178793          	add	a5,a5,1
 1005658:	fef42423          	sw	a5,-24(s0)
 100565c:	fe842703          	lw	a4,-24(s0)
 1005660:	01f00793          	li	a5,31
 1005664:	f6e7dee3          	bge	a5,a4,10055e0 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 1005668:	00000013          	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100566c:	fec42783          	lw	a5,-20(s0)
}
 1005670:	00078513          	mv	a0,a5
 1005674:	02c12403          	lw	s0,44(sp)
 1005678:	03010113          	add	sp,sp,48
 100567c:	00008067          	ret

01005680 <fstat>:
 1005680:	00058613          	mv	a2,a1
 1005684:	00050593          	mv	a1,a0
 1005688:	8201a503          	lw	a0,-2016(gp) # 10065f8 <_impure_ptr>
 100568c:	facfe06f          	j	1003e38 <_fstat_r>

01005690 <__stack_chk_fail>:
 1005690:	00001797          	auipc	a5,0x1
 1005694:	81078793          	add	a5,a5,-2032 # 1005ea0 <__fini_array_end+0x48>
 1005698:	0007af83          	lw	t6,0(a5)
 100569c:	0047af03          	lw	t5,4(a5)
 10056a0:	0087ae83          	lw	t4,8(a5)
 10056a4:	00c7ae03          	lw	t3,12(a5)
 10056a8:	0107a303          	lw	t1,16(a5)
 10056ac:	0147a883          	lw	a7,20(a5)
 10056b0:	0187a803          	lw	a6,24(a5)
 10056b4:	0247a683          	lw	a3,36(a5)
 10056b8:	0287a703          	lw	a4,40(a5)
 10056bc:	01c7a583          	lw	a1,28(a5)
 10056c0:	0207a603          	lw	a2,32(a5)
 10056c4:	02c7c783          	lbu	a5,44(a5)
 10056c8:	fc010113          	add	sp,sp,-64
 10056cc:	00010513          	mv	a0,sp
 10056d0:	02112e23          	sw	ra,60(sp)
 10056d4:	01f12023          	sw	t6,0(sp)
 10056d8:	01e12223          	sw	t5,4(sp)
 10056dc:	01d12423          	sw	t4,8(sp)
 10056e0:	01c12623          	sw	t3,12(sp)
 10056e4:	00612823          	sw	t1,16(sp)
 10056e8:	01112a23          	sw	a7,20(sp)
 10056ec:	01012c23          	sw	a6,24(sp)
 10056f0:	02d12223          	sw	a3,36(sp)
 10056f4:	02e12423          	sw	a4,40(sp)
 10056f8:	02f10623          	sb	a5,44(sp)
 10056fc:	00b12e23          	sw	a1,28(sp)
 1005700:	02c12023          	sw	a2,32(sp)
 1005704:	931fc0ef          	jal	1002034 <strlen>
 1005708:	00050613          	mv	a2,a0
 100570c:	00010593          	mv	a1,sp
 1005710:	00200513          	li	a0,2
 1005714:	5d4000ef          	jal	1005ce8 <write>
 1005718:	00600513          	li	a0,6
 100571c:	2cc000ef          	jal	10059e8 <raise>
 1005720:	07f00513          	li	a0,127
 1005724:	adcff0ef          	jal	1004a00 <_exit>

01005728 <__stack_chk_fail_local>:
 1005728:	ff010113          	add	sp,sp,-16
 100572c:	00112623          	sw	ra,12(sp)
 1005730:	f61ff0ef          	jal	1005690 <__stack_chk_fail>

01005734 <__stack_chk_init>:
 1005734:	fd818793          	add	a5,gp,-40 # 1006db0 <__stack_chk_guard>
 1005738:	0007a703          	lw	a4,0(a5)
 100573c:	00071663          	bnez	a4,1005748 <__stack_chk_init+0x14>
 1005740:	ff0a0737          	lui	a4,0xff0a0
 1005744:	00e7a023          	sw	a4,0(a5)
 1005748:	00008067          	ret

0100574c <_init_signal_r>:
 100574c:	11852783          	lw	a5,280(a0)
 1005750:	00078663          	beqz	a5,100575c <_init_signal_r+0x10>
 1005754:	00000513          	li	a0,0
 1005758:	00008067          	ret
 100575c:	ff010113          	add	sp,sp,-16
 1005760:	08000593          	li	a1,128
 1005764:	00812423          	sw	s0,8(sp)
 1005768:	00112623          	sw	ra,12(sp)
 100576c:	00050413          	mv	s0,a0
 1005770:	ff1fc0ef          	jal	1002760 <_malloc_r>
 1005774:	10a42c23          	sw	a0,280(s0)
 1005778:	02050463          	beqz	a0,10057a0 <_init_signal_r+0x54>
 100577c:	08050793          	add	a5,a0,128
 1005780:	00052023          	sw	zero,0(a0)
 1005784:	00450513          	add	a0,a0,4
 1005788:	fef51ce3          	bne	a0,a5,1005780 <_init_signal_r+0x34>
 100578c:	00000513          	li	a0,0
 1005790:	00c12083          	lw	ra,12(sp)
 1005794:	00812403          	lw	s0,8(sp)
 1005798:	01010113          	add	sp,sp,16
 100579c:	00008067          	ret
 10057a0:	fff00513          	li	a0,-1
 10057a4:	fedff06f          	j	1005790 <_init_signal_r+0x44>

010057a8 <_signal_r>:
 10057a8:	fe010113          	add	sp,sp,-32
 10057ac:	00912a23          	sw	s1,20(sp)
 10057b0:	00112e23          	sw	ra,28(sp)
 10057b4:	01f00793          	li	a5,31
 10057b8:	00050493          	mv	s1,a0
 10057bc:	02b7ec63          	bltu	a5,a1,10057f4 <_signal_r+0x4c>
 10057c0:	11852783          	lw	a5,280(a0)
 10057c4:	00812c23          	sw	s0,24(sp)
 10057c8:	00058413          	mv	s0,a1
 10057cc:	02078c63          	beqz	a5,1005804 <_signal_r+0x5c>
 10057d0:	00241413          	sll	s0,s0,0x2
 10057d4:	008787b3          	add	a5,a5,s0
 10057d8:	01812403          	lw	s0,24(sp)
 10057dc:	0007a503          	lw	a0,0(a5)
 10057e0:	00c7a023          	sw	a2,0(a5)
 10057e4:	01c12083          	lw	ra,28(sp)
 10057e8:	01412483          	lw	s1,20(sp)
 10057ec:	02010113          	add	sp,sp,32
 10057f0:	00008067          	ret
 10057f4:	01600793          	li	a5,22
 10057f8:	00f52023          	sw	a5,0(a0)
 10057fc:	fff00513          	li	a0,-1
 1005800:	fe5ff06f          	j	10057e4 <_signal_r+0x3c>
 1005804:	08000593          	li	a1,128
 1005808:	00c12623          	sw	a2,12(sp)
 100580c:	f55fc0ef          	jal	1002760 <_malloc_r>
 1005810:	10a4ac23          	sw	a0,280(s1)
 1005814:	00c12603          	lw	a2,12(sp)
 1005818:	00050793          	mv	a5,a0
 100581c:	00050713          	mv	a4,a0
 1005820:	08050693          	add	a3,a0,128
 1005824:	00050a63          	beqz	a0,1005838 <_signal_r+0x90>
 1005828:	00072023          	sw	zero,0(a4) # ff0a0000 <__alt_mem_onchip_memory2_0+0xfd078000>
 100582c:	00470713          	add	a4,a4,4
 1005830:	fed71ce3          	bne	a4,a3,1005828 <_signal_r+0x80>
 1005834:	f9dff06f          	j	10057d0 <_signal_r+0x28>
 1005838:	01812403          	lw	s0,24(sp)
 100583c:	fff00513          	li	a0,-1
 1005840:	fa5ff06f          	j	10057e4 <_signal_r+0x3c>

01005844 <_raise_r>:
 1005844:	ff010113          	add	sp,sp,-16
 1005848:	00912223          	sw	s1,4(sp)
 100584c:	00112623          	sw	ra,12(sp)
 1005850:	01f00793          	li	a5,31
 1005854:	00050493          	mv	s1,a0
 1005858:	0ab7e063          	bltu	a5,a1,10058f8 <_raise_r+0xb4>
 100585c:	11852783          	lw	a5,280(a0)
 1005860:	00812423          	sw	s0,8(sp)
 1005864:	00058413          	mv	s0,a1
 1005868:	04078463          	beqz	a5,10058b0 <_raise_r+0x6c>
 100586c:	00259713          	sll	a4,a1,0x2
 1005870:	00e787b3          	add	a5,a5,a4
 1005874:	0007a703          	lw	a4,0(a5)
 1005878:	02070c63          	beqz	a4,10058b0 <_raise_r+0x6c>
 100587c:	00100693          	li	a3,1
 1005880:	00d70c63          	beq	a4,a3,1005898 <_raise_r+0x54>
 1005884:	fff00693          	li	a3,-1
 1005888:	04d70863          	beq	a4,a3,10058d8 <_raise_r+0x94>
 100588c:	0007a023          	sw	zero,0(a5)
 1005890:	00058513          	mv	a0,a1
 1005894:	000700e7          	jalr	a4
 1005898:	00812403          	lw	s0,8(sp)
 100589c:	00000513          	li	a0,0
 10058a0:	00c12083          	lw	ra,12(sp)
 10058a4:	00412483          	lw	s1,4(sp)
 10058a8:	01010113          	add	sp,sp,16
 10058ac:	00008067          	ret
 10058b0:	00048513          	mv	a0,s1
 10058b4:	430000ef          	jal	1005ce4 <_getpid_r>
 10058b8:	00040613          	mv	a2,s0
 10058bc:	00812403          	lw	s0,8(sp)
 10058c0:	00c12083          	lw	ra,12(sp)
 10058c4:	00050593          	mv	a1,a0
 10058c8:	00048513          	mv	a0,s1
 10058cc:	00412483          	lw	s1,4(sp)
 10058d0:	01010113          	add	sp,sp,16
 10058d4:	3b80006f          	j	1005c8c <_kill_r>
 10058d8:	00812403          	lw	s0,8(sp)
 10058dc:	00c12083          	lw	ra,12(sp)
 10058e0:	01600793          	li	a5,22
 10058e4:	00f52023          	sw	a5,0(a0)
 10058e8:	00412483          	lw	s1,4(sp)
 10058ec:	00100513          	li	a0,1
 10058f0:	01010113          	add	sp,sp,16
 10058f4:	00008067          	ret
 10058f8:	01600793          	li	a5,22
 10058fc:	00f52023          	sw	a5,0(a0)
 1005900:	fff00513          	li	a0,-1
 1005904:	f9dff06f          	j	10058a0 <_raise_r+0x5c>

01005908 <__sigtramp_r>:
 1005908:	01f00793          	li	a5,31
 100590c:	0cb7ea63          	bltu	a5,a1,10059e0 <__sigtramp_r+0xd8>
 1005910:	11852783          	lw	a5,280(a0)
 1005914:	ff010113          	add	sp,sp,-16
 1005918:	00812423          	sw	s0,8(sp)
 100591c:	00912223          	sw	s1,4(sp)
 1005920:	00112623          	sw	ra,12(sp)
 1005924:	00058413          	mv	s0,a1
 1005928:	00050493          	mv	s1,a0
 100592c:	08078063          	beqz	a5,10059ac <__sigtramp_r+0xa4>
 1005930:	00241713          	sll	a4,s0,0x2
 1005934:	00e787b3          	add	a5,a5,a4
 1005938:	0007a703          	lw	a4,0(a5)
 100593c:	02070c63          	beqz	a4,1005974 <__sigtramp_r+0x6c>
 1005940:	fff00693          	li	a3,-1
 1005944:	06d70063          	beq	a4,a3,10059a4 <__sigtramp_r+0x9c>
 1005948:	00100693          	li	a3,1
 100594c:	04d70063          	beq	a4,a3,100598c <__sigtramp_r+0x84>
 1005950:	00040513          	mv	a0,s0
 1005954:	0007a023          	sw	zero,0(a5)
 1005958:	000700e7          	jalr	a4
 100595c:	00000513          	li	a0,0
 1005960:	00c12083          	lw	ra,12(sp)
 1005964:	00812403          	lw	s0,8(sp)
 1005968:	00412483          	lw	s1,4(sp)
 100596c:	01010113          	add	sp,sp,16
 1005970:	00008067          	ret
 1005974:	00c12083          	lw	ra,12(sp)
 1005978:	00812403          	lw	s0,8(sp)
 100597c:	00412483          	lw	s1,4(sp)
 1005980:	00100513          	li	a0,1
 1005984:	01010113          	add	sp,sp,16
 1005988:	00008067          	ret
 100598c:	00c12083          	lw	ra,12(sp)
 1005990:	00812403          	lw	s0,8(sp)
 1005994:	00412483          	lw	s1,4(sp)
 1005998:	00300513          	li	a0,3
 100599c:	01010113          	add	sp,sp,16
 10059a0:	00008067          	ret
 10059a4:	00200513          	li	a0,2
 10059a8:	fb9ff06f          	j	1005960 <__sigtramp_r+0x58>
 10059ac:	08000593          	li	a1,128
 10059b0:	db1fc0ef          	jal	1002760 <_malloc_r>
 10059b4:	10a4ac23          	sw	a0,280(s1)
 10059b8:	00050793          	mv	a5,a0
 10059bc:	00050e63          	beqz	a0,10059d8 <__sigtramp_r+0xd0>
 10059c0:	00050713          	mv	a4,a0
 10059c4:	08050693          	add	a3,a0,128
 10059c8:	00072023          	sw	zero,0(a4)
 10059cc:	00470713          	add	a4,a4,4
 10059d0:	fed71ce3          	bne	a4,a3,10059c8 <__sigtramp_r+0xc0>
 10059d4:	f5dff06f          	j	1005930 <__sigtramp_r+0x28>
 10059d8:	fff00513          	li	a0,-1
 10059dc:	f85ff06f          	j	1005960 <__sigtramp_r+0x58>
 10059e0:	fff00513          	li	a0,-1
 10059e4:	00008067          	ret

010059e8 <raise>:
 10059e8:	ff010113          	add	sp,sp,-16
 10059ec:	00912223          	sw	s1,4(sp)
 10059f0:	00112623          	sw	ra,12(sp)
 10059f4:	01f00793          	li	a5,31
 10059f8:	8201a483          	lw	s1,-2016(gp) # 10065f8 <_impure_ptr>
 10059fc:	08a7ee63          	bltu	a5,a0,1005a98 <raise+0xb0>
 1005a00:	1184a783          	lw	a5,280(s1)
 1005a04:	00812423          	sw	s0,8(sp)
 1005a08:	00050413          	mv	s0,a0
 1005a0c:	04078263          	beqz	a5,1005a50 <raise+0x68>
 1005a10:	00251713          	sll	a4,a0,0x2
 1005a14:	00e787b3          	add	a5,a5,a4
 1005a18:	0007a703          	lw	a4,0(a5)
 1005a1c:	02070a63          	beqz	a4,1005a50 <raise+0x68>
 1005a20:	00100693          	li	a3,1
 1005a24:	00d70a63          	beq	a4,a3,1005a38 <raise+0x50>
 1005a28:	fff00693          	li	a3,-1
 1005a2c:	04d70663          	beq	a4,a3,1005a78 <raise+0x90>
 1005a30:	0007a023          	sw	zero,0(a5)
 1005a34:	000700e7          	jalr	a4
 1005a38:	00812403          	lw	s0,8(sp)
 1005a3c:	00000513          	li	a0,0
 1005a40:	00c12083          	lw	ra,12(sp)
 1005a44:	00412483          	lw	s1,4(sp)
 1005a48:	01010113          	add	sp,sp,16
 1005a4c:	00008067          	ret
 1005a50:	00048513          	mv	a0,s1
 1005a54:	290000ef          	jal	1005ce4 <_getpid_r>
 1005a58:	00040613          	mv	a2,s0
 1005a5c:	00812403          	lw	s0,8(sp)
 1005a60:	00c12083          	lw	ra,12(sp)
 1005a64:	00050593          	mv	a1,a0
 1005a68:	00048513          	mv	a0,s1
 1005a6c:	00412483          	lw	s1,4(sp)
 1005a70:	01010113          	add	sp,sp,16
 1005a74:	2180006f          	j	1005c8c <_kill_r>
 1005a78:	00812403          	lw	s0,8(sp)
 1005a7c:	00c12083          	lw	ra,12(sp)
 1005a80:	01600793          	li	a5,22
 1005a84:	00f4a023          	sw	a5,0(s1)
 1005a88:	00100513          	li	a0,1
 1005a8c:	00412483          	lw	s1,4(sp)
 1005a90:	01010113          	add	sp,sp,16
 1005a94:	00008067          	ret
 1005a98:	01600793          	li	a5,22
 1005a9c:	00f4a023          	sw	a5,0(s1)
 1005aa0:	fff00513          	li	a0,-1
 1005aa4:	f9dff06f          	j	1005a40 <raise+0x58>

01005aa8 <signal>:
 1005aa8:	ff010113          	add	sp,sp,-16
 1005aac:	01212023          	sw	s2,0(sp)
 1005ab0:	00112623          	sw	ra,12(sp)
 1005ab4:	01f00793          	li	a5,31
 1005ab8:	8201a903          	lw	s2,-2016(gp) # 10065f8 <_impure_ptr>
 1005abc:	04a7e263          	bltu	a5,a0,1005b00 <signal+0x58>
 1005ac0:	00812423          	sw	s0,8(sp)
 1005ac4:	00050413          	mv	s0,a0
 1005ac8:	11892503          	lw	a0,280(s2)
 1005acc:	00912223          	sw	s1,4(sp)
 1005ad0:	00058493          	mv	s1,a1
 1005ad4:	02050e63          	beqz	a0,1005b10 <signal+0x68>
 1005ad8:	00241413          	sll	s0,s0,0x2
 1005adc:	008507b3          	add	a5,a0,s0
 1005ae0:	0007a503          	lw	a0,0(a5)
 1005ae4:	00812403          	lw	s0,8(sp)
 1005ae8:	0097a023          	sw	s1,0(a5)
 1005aec:	00412483          	lw	s1,4(sp)
 1005af0:	00c12083          	lw	ra,12(sp)
 1005af4:	00012903          	lw	s2,0(sp)
 1005af8:	01010113          	add	sp,sp,16
 1005afc:	00008067          	ret
 1005b00:	01600793          	li	a5,22
 1005b04:	00f92023          	sw	a5,0(s2)
 1005b08:	fff00513          	li	a0,-1
 1005b0c:	fe5ff06f          	j	1005af0 <signal+0x48>
 1005b10:	08000593          	li	a1,128
 1005b14:	00090513          	mv	a0,s2
 1005b18:	c49fc0ef          	jal	1002760 <_malloc_r>
 1005b1c:	10a92c23          	sw	a0,280(s2)
 1005b20:	00050793          	mv	a5,a0
 1005b24:	08050713          	add	a4,a0,128
 1005b28:	00050a63          	beqz	a0,1005b3c <signal+0x94>
 1005b2c:	0007a023          	sw	zero,0(a5)
 1005b30:	00478793          	add	a5,a5,4
 1005b34:	fef71ce3          	bne	a4,a5,1005b2c <signal+0x84>
 1005b38:	fa1ff06f          	j	1005ad8 <signal+0x30>
 1005b3c:	00812403          	lw	s0,8(sp)
 1005b40:	00412483          	lw	s1,4(sp)
 1005b44:	fff00513          	li	a0,-1
 1005b48:	fa9ff06f          	j	1005af0 <signal+0x48>

01005b4c <_init_signal>:
 1005b4c:	ff010113          	add	sp,sp,-16
 1005b50:	00812423          	sw	s0,8(sp)
 1005b54:	8201a403          	lw	s0,-2016(gp) # 10065f8 <_impure_ptr>
 1005b58:	11842783          	lw	a5,280(s0)
 1005b5c:	00112623          	sw	ra,12(sp)
 1005b60:	00078c63          	beqz	a5,1005b78 <_init_signal+0x2c>
 1005b64:	00000513          	li	a0,0
 1005b68:	00c12083          	lw	ra,12(sp)
 1005b6c:	00812403          	lw	s0,8(sp)
 1005b70:	01010113          	add	sp,sp,16
 1005b74:	00008067          	ret
 1005b78:	08000593          	li	a1,128
 1005b7c:	00040513          	mv	a0,s0
 1005b80:	be1fc0ef          	jal	1002760 <_malloc_r>
 1005b84:	10a42c23          	sw	a0,280(s0)
 1005b88:	00050c63          	beqz	a0,1005ba0 <_init_signal+0x54>
 1005b8c:	08050793          	add	a5,a0,128
 1005b90:	00052023          	sw	zero,0(a0)
 1005b94:	00450513          	add	a0,a0,4
 1005b98:	fef51ce3          	bne	a0,a5,1005b90 <_init_signal+0x44>
 1005b9c:	fc9ff06f          	j	1005b64 <_init_signal+0x18>
 1005ba0:	fff00513          	li	a0,-1
 1005ba4:	fc5ff06f          	j	1005b68 <_init_signal+0x1c>

01005ba8 <__sigtramp>:
 1005ba8:	ff010113          	add	sp,sp,-16
 1005bac:	00912223          	sw	s1,4(sp)
 1005bb0:	00112623          	sw	ra,12(sp)
 1005bb4:	01f00793          	li	a5,31
 1005bb8:	8201a483          	lw	s1,-2016(gp) # 10065f8 <_impure_ptr>
 1005bbc:	0ca7e463          	bltu	a5,a0,1005c84 <__sigtramp+0xdc>
 1005bc0:	1184a783          	lw	a5,280(s1)
 1005bc4:	00812423          	sw	s0,8(sp)
 1005bc8:	00050413          	mv	s0,a0
 1005bcc:	08078263          	beqz	a5,1005c50 <__sigtramp+0xa8>
 1005bd0:	00241713          	sll	a4,s0,0x2
 1005bd4:	00e787b3          	add	a5,a5,a4
 1005bd8:	0007a703          	lw	a4,0(a5)
 1005bdc:	02070c63          	beqz	a4,1005c14 <__sigtramp+0x6c>
 1005be0:	fff00693          	li	a3,-1
 1005be4:	06d70063          	beq	a4,a3,1005c44 <__sigtramp+0x9c>
 1005be8:	00100693          	li	a3,1
 1005bec:	04d70063          	beq	a4,a3,1005c2c <__sigtramp+0x84>
 1005bf0:	00040513          	mv	a0,s0
 1005bf4:	0007a023          	sw	zero,0(a5)
 1005bf8:	000700e7          	jalr	a4
 1005bfc:	00812403          	lw	s0,8(sp)
 1005c00:	00000513          	li	a0,0
 1005c04:	00c12083          	lw	ra,12(sp)
 1005c08:	00412483          	lw	s1,4(sp)
 1005c0c:	01010113          	add	sp,sp,16
 1005c10:	00008067          	ret
 1005c14:	00812403          	lw	s0,8(sp)
 1005c18:	00c12083          	lw	ra,12(sp)
 1005c1c:	00412483          	lw	s1,4(sp)
 1005c20:	00100513          	li	a0,1
 1005c24:	01010113          	add	sp,sp,16
 1005c28:	00008067          	ret
 1005c2c:	00812403          	lw	s0,8(sp)
 1005c30:	00c12083          	lw	ra,12(sp)
 1005c34:	00412483          	lw	s1,4(sp)
 1005c38:	00300513          	li	a0,3
 1005c3c:	01010113          	add	sp,sp,16
 1005c40:	00008067          	ret
 1005c44:	00812403          	lw	s0,8(sp)
 1005c48:	00200513          	li	a0,2
 1005c4c:	fb9ff06f          	j	1005c04 <__sigtramp+0x5c>
 1005c50:	08000593          	li	a1,128
 1005c54:	00048513          	mv	a0,s1
 1005c58:	b09fc0ef          	jal	1002760 <_malloc_r>
 1005c5c:	10a4ac23          	sw	a0,280(s1)
 1005c60:	00050793          	mv	a5,a0
 1005c64:	00050e63          	beqz	a0,1005c80 <__sigtramp+0xd8>
 1005c68:	00050713          	mv	a4,a0
 1005c6c:	08050693          	add	a3,a0,128
 1005c70:	00072023          	sw	zero,0(a4)
 1005c74:	00470713          	add	a4,a4,4
 1005c78:	fee69ce3          	bne	a3,a4,1005c70 <__sigtramp+0xc8>
 1005c7c:	f55ff06f          	j	1005bd0 <__sigtramp+0x28>
 1005c80:	00812403          	lw	s0,8(sp)
 1005c84:	fff00513          	li	a0,-1
 1005c88:	f7dff06f          	j	1005c04 <__sigtramp+0x5c>

01005c8c <_kill_r>:
 1005c8c:	ff010113          	add	sp,sp,-16
 1005c90:	00058713          	mv	a4,a1
 1005c94:	00812423          	sw	s0,8(sp)
 1005c98:	00060593          	mv	a1,a2
 1005c9c:	00050413          	mv	s0,a0
 1005ca0:	00070513          	mv	a0,a4
 1005ca4:	fa01a223          	sw	zero,-92(gp) # 1006d7c <errno>
 1005ca8:	00112623          	sw	ra,12(sp)
 1005cac:	0b0000ef          	jal	1005d5c <_kill>
 1005cb0:	fff00793          	li	a5,-1
 1005cb4:	00f50a63          	beq	a0,a5,1005cc8 <_kill_r+0x3c>
 1005cb8:	00c12083          	lw	ra,12(sp)
 1005cbc:	00812403          	lw	s0,8(sp)
 1005cc0:	01010113          	add	sp,sp,16
 1005cc4:	00008067          	ret
 1005cc8:	fa41a783          	lw	a5,-92(gp) # 1006d7c <errno>
 1005ccc:	fe0786e3          	beqz	a5,1005cb8 <_kill_r+0x2c>
 1005cd0:	00c12083          	lw	ra,12(sp)
 1005cd4:	00f42023          	sw	a5,0(s0)
 1005cd8:	00812403          	lw	s0,8(sp)
 1005cdc:	01010113          	add	sp,sp,16
 1005ce0:	00008067          	ret

01005ce4 <_getpid_r>:
 1005ce4:	0180006f          	j	1005cfc <_getpid>

01005ce8 <write>:
 1005ce8:	00060693          	mv	a3,a2
 1005cec:	00058613          	mv	a2,a1
 1005cf0:	00050593          	mv	a1,a0
 1005cf4:	8201a503          	lw	a0,-2016(gp) # 10065f8 <_impure_ptr>
 1005cf8:	980fc06f          	j	1001e78 <_write_r>

01005cfc <_getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 1005cfc:	ff010113          	add	sp,sp,-16
 1005d00:	00812623          	sw	s0,12(sp)
 1005d04:	01010413          	add	s0,sp,16
  return 0;
 1005d08:	00000793          	li	a5,0
}
 1005d0c:	00078513          	mv	a0,a5
 1005d10:	00c12403          	lw	s0,12(sp)
 1005d14:	01010113          	add	sp,sp,16
 1005d18:	00008067          	ret

01005d1c <alt_get_errno>:
    case SIGSYS:
    case SIGTRAP:
    case SIGVTALRM:
    case SIGXCPU:
    case SIGXFSZ:

 1005d1c:	ff010113          	add	sp,sp,-16
 1005d20:	00112623          	sw	ra,12(sp)
 1005d24:	00812423          	sw	s0,8(sp)
 1005d28:	01010413          	add	s0,sp,16
      /* 
 1005d2c:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1005d30:	00078a63          	beqz	a5,1005d44 <alt_get_errno+0x28>
 1005d34:	8141a783          	lw	a5,-2028(gp) # 10065ec <alt_errno>
 1005d38:	000780e7          	jalr	a5
 1005d3c:	00050793          	mv	a5,a0
 1005d40:	0080006f          	j	1005d48 <alt_get_errno+0x2c>
 1005d44:	fa418793          	add	a5,gp,-92 # 1006d7c <errno>
       * The Posix standard defines the default behaviour for all these signals 
 1005d48:	00078513          	mv	a0,a5
 1005d4c:	00c12083          	lw	ra,12(sp)
 1005d50:	00812403          	lw	s0,8(sp)
 1005d54:	01010113          	add	sp,sp,16
 1005d58:	00008067          	ret

01005d5c <_kill>:
{
 1005d5c:	fd010113          	add	sp,sp,-48
 1005d60:	02112623          	sw	ra,44(sp)
 1005d64:	02812423          	sw	s0,40(sp)
 1005d68:	03010413          	add	s0,sp,48
 1005d6c:	fca42e23          	sw	a0,-36(s0)
 1005d70:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
 1005d74:	fe042623          	sw	zero,-20(s0)
  if (pid <= 0)
 1005d78:	fdc42783          	lw	a5,-36(s0)
 1005d7c:	06f04e63          	bgtz	a5,1005df8 <_kill+0x9c>
    switch (sig)
 1005d80:	fd842783          	lw	a5,-40(s0)
 1005d84:	08078463          	beqz	a5,1005e0c <_kill+0xb0>
 1005d88:	fd842783          	lw	a5,-40(s0)
 1005d8c:	0607c063          	bltz	a5,1005dec <_kill+0x90>
 1005d90:	fd842703          	lw	a4,-40(s0)
 1005d94:	01f00793          	li	a5,31
 1005d98:	04e7ca63          	blt	a5,a4,1005dec <_kill+0x90>
 1005d9c:	fd842703          	lw	a4,-40(s0)
 1005da0:	00300793          	li	a5,3
 1005da4:	04f74463          	blt	a4,a5,1005dec <_kill+0x90>
 1005da8:	fd842783          	lw	a5,-40(s0)
 1005dac:	00100713          	li	a4,1
 1005db0:	00f717b3          	sll	a5,a4,a5
 1005db4:	cf810737          	lui	a4,0xcf810
 1005db8:	f7870713          	add	a4,a4,-136 # cf80ff78 <__alt_mem_onchip_memory2_0+0xcd7e7f78>
 1005dbc:	00e7f733          	and	a4,a5,a4
 1005dc0:	00e03733          	snez	a4,a4
 1005dc4:	0ff77713          	zext.b	a4,a4
 1005dc8:	00071e63          	bnez	a4,1005de4 <_kill+0x88>
 1005dcc:	00110737          	lui	a4,0x110
 1005dd0:	00e7f7b3          	and	a5,a5,a4
 1005dd4:	00f037b3          	snez	a5,a5
 1005dd8:	0ff7f793          	zext.b	a5,a5
 1005ddc:	02079c63          	bnez	a5,1005e14 <_kill+0xb8>
 1005de0:	00c0006f          	j	1005dec <_kill+0x90>
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 1005de4:	00000513          	li	a0,0
 1005de8:	c19fe0ef          	jal	1004a00 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 1005dec:	01600793          	li	a5,22
 1005df0:	fef42623          	sw	a5,-20(s0)
 1005df4:	0240006f          	j	1005e18 <_kill+0xbc>
    }
  }

  else if (pid > 0)
 1005df8:	fdc42783          	lw	a5,-36(s0)
 1005dfc:	00f05e63          	blez	a5,1005e18 <_kill+0xbc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 1005e00:	00300793          	li	a5,3
 1005e04:	fef42623          	sw	a5,-20(s0)
 1005e08:	0100006f          	j	1005e18 <_kill+0xbc>
      break;
 1005e0c:	00000013          	nop
 1005e10:	0080006f          	j	1005e18 <_kill+0xbc>
      break;
 1005e14:	00000013          	nop
  }

  if (status)
 1005e18:	fec42783          	lw	a5,-20(s0)
 1005e1c:	00078e63          	beqz	a5,1005e38 <_kill+0xdc>
  {
    ALT_ERRNO = status;
 1005e20:	efdff0ef          	jal	1005d1c <alt_get_errno>
 1005e24:	00050713          	mv	a4,a0
 1005e28:	fec42783          	lw	a5,-20(s0)
 1005e2c:	00f72023          	sw	a5,0(a4) # 110000 <__reset-0xef0000>
    return -1;
 1005e30:	fff00793          	li	a5,-1
 1005e34:	0080006f          	j	1005e3c <_kill+0xe0>
  }

  return 0;
 1005e38:	00000793          	li	a5,0
}
 1005e3c:	00078513          	mv	a0,a5
 1005e40:	02c12083          	lw	ra,44(sp)
 1005e44:	02812403          	lw	s0,40(sp)
 1005e48:	03010113          	add	sp,sp,48
 1005e4c:	00008067          	ret
 1005e50:	22f4                	.insn	2, 0x22f4
 1005e52:	0100                	.insn	2, 0x0100
 1005e54:	5734                	.insn	2, 0x5734
 1005e56:	0100                	.insn	2, 0x0100
