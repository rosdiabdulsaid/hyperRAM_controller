// sys_intel_niosv_m_0.v

// This file was auto-generated from intel_niosv_m_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 24.1 1077

`timescale 1 ps / 1 ps
module sys_intel_niosv_m_0 (
		input  wire        clk,                               //                 clk.clk
		input  wire        reset_reset,                       //               reset.reset
		input  wire [15:0] platform_irq_rx_irq,               //     platform_irq_rx.irq
		input  wire [5:0]  timer_sw_agent_address,            //      timer_sw_agent.address
		input  wire [3:0]  timer_sw_agent_byteenable,         //                    .byteenable
		input  wire        timer_sw_agent_read,               //                    .read
		output wire [31:0] timer_sw_agent_readdata,           //                    .readdata
		input  wire        timer_sw_agent_write,              //                    .write
		input  wire [31:0] timer_sw_agent_writedata,          //                    .writedata
		output wire        timer_sw_agent_waitrequest,        //                    .waitrequest
		output wire        timer_sw_agent_readdatavalid,      //                    .readdatavalid
		input  wire [31:0] instruction_manager_readdata,      // instruction_manager.readdata
		input  wire        instruction_manager_waitrequest,   //                    .waitrequest
		input  wire        instruction_manager_readdatavalid, //                    .readdatavalid
		input  wire [1:0]  instruction_manager_response,      //                    .response
		output wire [31:0] instruction_manager_address,       //                    .address
		output wire        instruction_manager_read,          //                    .read
		input  wire [31:0] data_manager_readdata,             //        data_manager.readdata
		input  wire        data_manager_waitrequest,          //                    .waitrequest
		input  wire        data_manager_readdatavalid,        //                    .readdatavalid
		input  wire [1:0]  data_manager_response,             //                    .response
		output wire [31:0] data_manager_address,              //                    .address
		output wire        data_manager_read,                 //                    .read
		output wire        data_manager_write,                //                    .write
		output wire [31:0] data_manager_writedata,            //                    .writedata
		output wire [3:0]  data_manager_byteenable,           //                    .byteenable
		input  wire        data_manager_writeresponsevalid,   //                    .writeresponsevalid
		input  wire [15:0] dm_agent_address,                  //            dm_agent.address
		input  wire        dm_agent_read,                     //                    .read
		output wire [31:0] dm_agent_readdata,                 //                    .readdata
		input  wire        dm_agent_write,                    //                    .write
		input  wire [31:0] dm_agent_writedata,                //                    .writedata
		output wire        dm_agent_waitrequest,              //                    .waitrequest
		output wire        dm_agent_readdatavalid             //                    .readdatavalid
	);

	wire    irq_mapper_receiver0_irq;     // dbg_mod:dbg_irq -> irq_mapper:receiver0_irq
	wire    hart_debug_irq_rx_irq;        // irq_mapper:sender_irq -> hart:irq_debug
	wire    irq_mapper_001_receiver0_irq; // timer_module:timer_irq -> irq_mapper_001:receiver0_irq
	wire    hart_timer_irq_rx_irq;        // irq_mapper_001:sender_irq -> hart:irq_timer
	wire    irq_mapper_002_receiver0_irq; // timer_module:sw_irq -> irq_mapper_002:receiver0_irq
	wire    hart_sw_irq_rx_irq;           // irq_mapper_002:sender_irq -> hart:irq_sw

	sys_intel_niosv_m_0_hart #(
		.RESET_VECTOR    (32'b00000001000000000000000000000000),
		.DBG_EXPN_VECTOR (32'b00000010000000010000000000000000),
		.HARTID          (32'b00000000000000000000000000000000),
		.CORE_EXTN       (256),
		.DEBUG_ENABLED   (1),
		.DEVICE_FAMILY   ("Cyclone 10 LP"),
		.USE_RESET_REQ   (0),
		.ECC_EN          (0),
		.SMALL_CORE      (1)
	) hart (
		.clk                   (clk),                               //             cpu_clk.clk
		.reset                 (reset_reset),                       //           cpu_reset.reset
		.irq_plat_vec          (platform_irq_rx_irq),               //     platform_irq_rx.irq
		.irq_debug             (hart_debug_irq_rx_irq),             //        debug_irq_rx.irq
		.irq_timer             (hart_timer_irq_rx_irq),             //        timer_irq_rx.irq
		.irq_sw                (hart_sw_irq_rx_irq),                //           sw_irq_rx.irq
		.instr_avl_rdata       (instruction_manager_readdata),      // instruction_manager.readdata
		.instr_avl_waitrequest (instruction_manager_waitrequest),   //                    .waitrequest
		.instr_avl_rdatavalid  (instruction_manager_readdatavalid), //                    .readdatavalid
		.instr_avl_resp        (instruction_manager_response),      //                    .response
		.instr_avl_addr        (instruction_manager_address),       //                    .address
		.instr_avl_read        (instruction_manager_read),          //                    .read
		.data_avl_rdata        (data_manager_readdata),             //        data_manager.readdata
		.data_avl_waitrequest  (data_manager_waitrequest),          //                    .waitrequest
		.data_avl_rdatavalid   (data_manager_readdatavalid),        //                    .readdatavalid
		.data_avl_resp         (data_manager_response),             //                    .response
		.data_avl_addr         (data_manager_address),              //                    .address
		.data_avl_read         (data_manager_read),                 //                    .read
		.data_avl_write        (data_manager_write),                //                    .write
		.data_avl_wdata        (data_manager_writedata),            //                    .writedata
		.data_avl_byteen       (data_manager_byteenable),           //                    .byteenable
		.data_avl_wrespvalid   (data_manager_writeresponsevalid),   //                    .writeresponsevalid
		.reset_req             (1'b0),                              //         (terminated)
		.reset_req_ack         (),                                  //         (terminated)
		.core_ecc_status       (),                                  //         (terminated)
		.core_ecc_src          (),                                  //         (terminated)
		.irq_ext               (1'b0)                               //         (terminated)
	);

	niosv_timer_msip #(
		.IRQ_EN     (1),
		.HARTID     (0),
		.ADDR_WIDTH (6)
	) timer_module (
		.clk                (clk),                          //            clk.clk
		.reset              (reset_reset),                  //          reset.reset
		.hart_address       (timer_sw_agent_address),       // timer_sw_agent.address
		.hart_byteen        (timer_sw_agent_byteenable),    //               .byteenable
		.hart_read          (timer_sw_agent_read),          //               .read
		.hart_readdata      (timer_sw_agent_readdata),      //               .readdata
		.hart_write         (timer_sw_agent_write),         //               .write
		.hart_writedata     (timer_sw_agent_writedata),     //               .writedata
		.hart_waitrequest   (timer_sw_agent_waitrequest),   //               .waitrequest
		.hart_readdatavalid (timer_sw_agent_readdatavalid), //               .readdatavalid
		.timer_irq          (irq_mapper_001_receiver0_irq), //      timer_irq.irq
		.sw_irq             (irq_mapper_002_receiver0_irq)  //         sw_irq.irq
	);

	niosv_dm_top #(
		.DEBUG_RESET_EN (0),
		.FPU_EN         (0),
		.DEVICE_FAMILY  ("Cyclone 10 LP")
	) dbg_mod (
		.clk                (clk),                      //           clk.clk
		.reset              (reset_reset),              //         reset.reset
		.hart_address       (dm_agent_address),         //      dm_agent.address
		.hart_read          (dm_agent_read),            //              .read
		.hart_readdata      (dm_agent_readdata),        //              .readdata
		.hart_write         (dm_agent_write),           //              .write
		.hart_writedata     (dm_agent_writedata),       //              .writedata
		.hart_waitrequest   (dm_agent_waitrequest),     //              .waitrequest
		.hart_readdatavalid (dm_agent_readdatavalid),   //              .readdatavalid
		.dbg_irq            (irq_mapper_receiver0_irq), //       dbg_irq.irq
		.dbg_reset          ()                          // dbg_reset_out.reset
	);

	sys_intel_niosv_m_0_irq_mapper irq_mapper (
		.clk           (clk),                      //       clk.clk
		.reset         (reset_reset),              // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq), // receiver0.irq
		.sender_irq    (hart_debug_irq_rx_irq)     //    sender.irq
	);

	sys_intel_niosv_m_0_irq_mapper irq_mapper_001 (
		.clk           (clk),                          //       clk.clk
		.reset         (reset_reset),                  // clk_reset.reset
		.receiver0_irq (irq_mapper_001_receiver0_irq), // receiver0.irq
		.sender_irq    (hart_timer_irq_rx_irq)         //    sender.irq
	);

	sys_intel_niosv_m_0_irq_mapper irq_mapper_002 (
		.clk           (clk),                          //       clk.clk
		.reset         (reset_reset),                  // clk_reset.reset
		.receiver0_irq (irq_mapper_002_receiver0_irq), // receiver0.irq
		.sender_irq    (hart_sw_irq_rx_irq)            //    sender.irq
	);

endmodule
